!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(t,e){var r="Webkit Moz O ms".split(" "),n=.001;function o(t,e,n){for(var o=t.style,a=0;a<r.length;++a){o[r[a]+i(e)]=n}o[e]=n}function i(t){return t.charAt(0).toUpperCase()+t.slice(1)}function a(t){return!function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t)&&("object"===typeof t&&!!t)}function s(t,e){for(var r in t){if(t.hasOwnProperty(r))e(t[r],r)}}t.exports={extend:function t(e,r,n){for(var o in e=e||{},n=n||!1,r=r||{})if(r.hasOwnProperty(o)){var i=e[o],s=r[o];n&&a(i)&&a(s)?e[o]=t(i,s,n):e[o]=s}return e},render:function(t,e){var r=t;for(var n in e)if(e.hasOwnProperty(n)){var o=e[n],i=new RegExp("\\{"+n+"\\}","g");r=r.replace(i,o)}return r},setStyle:o,setStyles:function(t,e){s(e,function(e,r){null!=e&&(a(e)&&!0===e.prefix?o(t,r,e.value):t.style[r]=e)})},capitalize:i,isString:function(t){return"string"==typeof t||t instanceof String},isFunction:function(t){return"function"==typeof t},isObject:a,forEachObject:s,floatEquals:function(t,e){return Math.abs(t-e)<n},removeChildren:function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}}},function(t,e,r){var n=r(2),o=r(0),i=function t(e,r){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=o.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},r,!0),o.isObject(r)&&void 0!==r.svgStyle&&(this._opts.svgStyle=r.svgStyle),o.isObject(r)&&o.isObject(r.text)&&void 0!==r.text.style&&(this._opts.text.style=r.text.style);var i,a=this._createSvgView(this._opts);if(!(i=o.isString(e)?document.querySelector(e):e))throw new Error("Container does not exist: "+e);this._container=i,this._container.appendChild(a.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&o.setStyles(a.svg,this._opts.svgStyle),this.svg=a.svg,this.path=a.path,this.trail=a.trail,this.text=null;var s=o.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new n(a.path,s),o.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};i.prototype.animate=function(t,e,r){if(null===this._progressPath)throw new Error("Object is destroyed");this._progressPath.animate(t,e,r)},i.prototype.stop=function(){if(null===this._progressPath)throw new Error("Object is destroyed");void 0!==this._progressPath&&this._progressPath.stop()},i.prototype.destroy=function(){if(null===this._progressPath)throw new Error("Object is destroyed");this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},i.prototype.set=function(t){if(null===this._progressPath)throw new Error("Object is destroyed");this._progressPath.set(t)},i.prototype.value=function(){if(null===this._progressPath)throw new Error("Object is destroyed");return void 0===this._progressPath?0:this._progressPath.value()},i.prototype.setText=function(t){if(null===this._progressPath)throw new Error("Object is destroyed");null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),o.isObject(t)?(o.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},i.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var r=null;(t.trailColor||t.trailWidth)&&(r=this._createTrail(t),e.appendChild(r));var n=this._createPath(t);return e.appendChild(n),{svg:e,path:n,trail:r}},i.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},i.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},i.prototype._createTrail=function(t){var e=this._trailString(t),r=o.extend({},t);return r.trailColor||(r.trailColor="#eee"),r.trailWidth||(r.trailWidth=r.strokeWidth),r.color=r.trailColor,r.strokeWidth=r.trailWidth,r.fill=null,this._createPathElement(e,r)},i.prototype._createPathElement=function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",t),r.setAttribute("stroke",e.color),r.setAttribute("stroke-width",e.strokeWidth),e.fill?r.setAttribute("fill",e.fill):r.setAttribute("fill-opacity","0"),r},i.prototype._createTextContainer=function(t,e){var r=document.createElement("div");r.className=t.text.className;var n=t.text.style;return n&&(t.text.autoStyleContainer&&(e.style.position="relative"),o.setStyles(r,n),n.color||(r.style.color=t.color)),this._initializeTextContainer(t,e,r),r},i.prototype._initializeTextContainer=function(t,e,r){},i.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},i.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},i.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),r=parseFloat(e.getPropertyValue("width"),10),n=parseFloat(e.getPropertyValue("height"),10);o.floatEquals(this.containerAspectRatio,r/n)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",r/n),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=i},function(t,e,r){var n=r(12),o=r(0),i={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},a=function t(e,r){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");var n;r=o.extend({duration:800,easing:"linear",from:{},to:{},step:function(){}},r),n=o.isString(e)?document.querySelector(e):e,this.path=n,this._opts=r,this._tweenable=null;var i=this.path.getTotalLength();this.path.style.strokeDasharray=i+" "+i,this.set(0)};a.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength();return parseFloat((1-t/e).toFixed(6),10)},a.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(o.isFunction(e)){var r=this._easing(this._opts.easing);e(this._calculateTo(t,r),this._opts.shape||this,this._opts.attachment)}},a.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},a.prototype.animate=function(t,e,r){e=e||{},o.isFunction(e)&&(r=e,e={});var i=o.extend({},e),a=o.extend({},this._opts);e=o.extend(a,e);var s=this._easing(e.easing),u=this._resolveFromAndTo(t,s,i);this.stop(),this.path.getBoundingClientRect();var c=this._getComputedDashOffset(),h=this._progressToOffset(t),l=this;this._tweenable=new n,this._tweenable.tween({from:o.extend({offset:c},u.from),to:o.extend({offset:h},u.to),duration:e.duration,easing:s,step:function(t){l.path.style.strokeDashoffset=t.offset;var r=e.shape||l;e.step(t,r,e.attachment)},finish:function(t){o.isFunction(r)&&r()}})},a.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},a.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},a.prototype._resolveFromAndTo=function(t,e,r){return r.from&&r.to?{from:r.from,to:r.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},a.prototype._calculateFrom=function(t){return n.interpolate(this._opts.from,this._opts.to,this.value(),t)},a.prototype._calculateTo=function(t,e){return n.interpolate(this._opts.from,this._opts.to,t,e)},a.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},a.prototype._easing=function(t){return i.hasOwnProperty(t)?i[t]:t},t.exports=a},function(t,e,r){var n=r(1),o=r(0),i=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,n.apply(this,arguments)};(i.prototype=new n).constructor=i,i.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var r=50-e/2;return o.render(this._pathTemplate,{radius:r,"2radius":2*r})},i.prototype._trailString=function(t){return this._pathString(t)},t.exports=i},function(t,e,r){t.exports={Line:r(11),Circle:r(3),SemiCircle:r(13),Path:r(2),Shape:r(1),utils:r(0)}},function(t,e,r){"use strict";r.r(e);r(6);var n=r(4),o=r.n(n),i=(r(14),r(18)),a=r.n(i);r(21);let s=(new a.a).search(!0);s||(s={}),s.duration?s.duration=parseInt(s.duration):s.duration=800,s.number||(s.number="?"),window.fitText(document.getElementById("container")),new o.a.Circle("#container",{strokeWidth:3,duration:s.duration,text:{value:s.number}}).animate(1,{duration:s.duration},function(){console.log("Animation has finished")})},function(t,e,r){var n=r(7);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(9)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,r){(t.exports=r(8)(!0)).push([t.i,"* {\n  box-sizing: border-box; }\n\nbody {\n  background: #333;\n  height: 100vh;\n  position: relative; }\n\n#container-wrap {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  transform: translateY(-50%);\n  height: 0;\n  padding-bottom: 100%;\n  width: 100%; }\n\n#container {\n  margin: 0 auto;\n  width: 100%;\n  height: 100%;\n  max-height: 1100px;\n  max-width: 1100px;\n  position: absolute !important;\n  top: 50%;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  transform: translateY(-50%); }\n  #container svg {\n    width: auto;\n    height: auto;\n    max-height: 100%;\n    max-width: 100%;\n    position: absolute; }\n\n.progressbar-text {\n  font-size: 5em;\n  font-family: 'Helvetica', 'Arial', sans-serif; }\n","",{version:3,sources:["/Users/willmcmillian/Sites/window-show/src/base.scss"],names:[],mappings:"AAAA;EACI,sBAAsB,EAAA;;AAG1B;EACI,gBAAgB;EAChB,aAAa;EACb,kBAAkB,EAAA;;AAGtB;EACI,kBAAkB;EAClB,QAAQ;EACR,OAAO;EACP,QAAQ;EACR,cAAc;EACd,2BAA2B;EAC3B,SAAS;EACT,oBAAoB;EACpB,WAAW,EAAA;;AAGf;EACI,cAAc;EACd,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;EACjB,6BAA6B;EAC7B,QAAQ;EACR,OAAO;EACP,QAAQ;EACR,SAAU;EACV,2BAA2B,EAAA;EAX/B;IAaQ,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,eAAe;IACf,kBAAkB,EAAA;;AAI1B;EACI,cAAc;EACd,6CAA6C,EAAA",file:"base.scss",sourcesContent:["* {\n    box-sizing: border-box;\n}\n\nbody {\n    background: #333;\n    height: 100vh;\n    position: relative;\n}\n\n#container-wrap {\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    transform: translateY(-50%);\n    height: 0;\n    padding-bottom: 100%;\n    width: 100%;\n}\n\n#container {\n    margin: 0 auto;\n    width: 100%;\n    height: 100%;\n    max-height: 1100px;\n    max-width: 1100px;\n    position: absolute !important;\n    top: 50%;\n    left: 0;\n    right: 0;\n    bottom : 0;\n    transform: translateY(-50%);\n    svg {\n        width: auto;\n        height: auto;\n        max-height: 100%;\n        max-width: 100%;\n        position: absolute;\n    }\n}\n\n.progressbar-text {\n    font-size: 5em;\n    font-family: 'Helvetica', 'Arial', sans-serif;\n}"]}])},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var o=(a=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[r].concat(i).concat([o]).join("\n")}var a;return[r].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(n[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];null!=a[0]&&n[a[0]]||(r&&!a[2]?a[2]=r:r&&(a[2]="("+a[2]+") and ("+r+")"),e.push(a))}},e}},function(t,e,r){var n,o,i={},a=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),s=function(t){var e={};return function(t,r){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,c=0,h=[],l=r(10);function p(t,e){for(var r=0;r<t.length;r++){var n=t[r],o=i[n.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](n.parts[a]);for(;a<n.parts.length;a++)o.parts.push(y(n.parts[a],e))}else{var s=[];for(a=0;a<n.parts.length;a++)s.push(y(n.parts[a],e));i[n.id]={id:n.id,refs:1,parts:s}}}}function f(t,e){for(var r=[],n={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};n[a]?n[a].parts.push(s):r.push(n[a]={id:a,parts:[s]})}return r}function d(t,e){var r=s(t.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=h[h.length-1];if("top"===t.insertAt)n?n.nextSibling?r.insertBefore(e,n.nextSibling):r.appendChild(e):r.insertBefore(e,r.firstChild),h.push(e);else if("bottom"===t.insertAt)r.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertAt.before,r);r.insertBefore(e,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function g(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return r.nc}();n&&(t.attrs.nonce=n)}return v(e,t.attrs),d(t,e),e}function v(t,e){Object.keys(e).forEach(function(r){t.setAttribute(r,e[r])})}function y(t,e){var r,n,o,i;if(e.transform&&t.css){if(!(i="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var a=c++;r=u||(u=g(e)),n=w.bind(null,r,a,!1),o=w.bind(null,r,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),d(t,e),e}(e),n=function(t,e,r){var n=r.css,o=r.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(n=l(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([n],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,r,e),o=function(){m(r),r.href&&URL.revokeObjectURL(r.href)}):(r=g(e),n=function(t,e){var r=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){m(r)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var r=f(t,e);return p(r,e),function(t){for(var n=[],o=0;o<r.length;o++){var a=r[o];(s=i[a.id]).refs--,n.push(s)}t&&p(f(t,e),e);for(o=0;o<n.length;o++){var s;if(0===(s=n[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var b,_=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function w(t,e,r,n){var o=r?"":n.css;if(t.styleSheet)t.styleSheet.cssText=_(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=e.protocol+"//"+e.host,n=r+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:n+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,r){var n=r(1),o=r(0),i=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",n.apply(this,arguments)};(i.prototype=new n).constructor=i,i.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},i.prototype._pathString=function(t){return o.render(this._pathTemplate,{center:t.strokeWidth/2})},i.prototype._trailString=function(t){return this._pathString(t)},t.exports=i},function(t,e,r){(function(){var e=this||Function("return this")(),r=function(){"use strict";var r,n,o,i,a,s,u="linear",c=1e3/60,h=Date.now?Date.now:function(){return+new Date},l="undefined"!=typeof SHIFTY_DEBUG_NOW?SHIFTY_DEBUG_NOW:h;function p(){}function f(t,e){var r;for(r in t)Object.hasOwnProperty.call(t,r)&&e(r)}function d(t,e){return f(e,function(r){t[r]=e[r]}),t}function m(t,e){f(e,function(r){void 0===t[r]&&(t[r]=e[r])})}function g(t,e,n,o,i,a,s){var u,c,h,l=t<a?0:(t-a)/i;for(u in e)e.hasOwnProperty(u)&&(h="function"==typeof(c=s[u])?c:r[c],e[u]=v(n[u],o[u],h,l));return e}function v(t,e,r,n){return t+(e-t)*r(n)}function y(t,e){var r=w.prototype.filter,n=t._filterArgs;f(r,function(o){void 0!==r[o][e]&&r[o][e].apply(t,n)})}function b(t,e,r,n,u,h,p,f,d,m,v){o=e+r+n,i=Math.min(v||l(),o),a=i>=o,s=n-(o-i),t.isPlaying()&&(a?(d(p,t._attachment,s),t.stop(!0)):(t._scheduleId=m(t._timeoutHandler,c),y(t,"beforeTween"),i<e+r?g(1,u,h,p,1,1,f):g(i,u,h,p,n,e+r,f),y(t,"afterTween"),d(u,t._attachment,s)))}function _(t,e){var r={},n=typeof e;return f(t,"string"===n||"function"===n?function(t){r[t]=e}:function(t){r[t]||(r[t]=e[t]||u)}),r}function w(t,e){this._currentState=t||{},this._configured=!1,this._scheduleFunction=n,void 0!==e&&this.setConfig(e)}return n="undefined"!=typeof window&&(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.mozCancelRequestAnimationFrame&&window.mozRequestAnimationFrame)||setTimeout,w.prototype.tween=function(t){return this._isTweening?this:(void 0===t&&this._configured||this.setConfig(t),this._timestamp=l(),this._start(this.get(),this._attachment),this.resume())},w.prototype.setConfig=function(t){t=t||{},this._configured=!0,this._attachment=t.attachment,this._pausedAtTime=null,this._scheduleId=null,this._delay=t.delay||0,this._start=t.start||p,this._step=t.step||p,this._finish=t.finish||p,this._duration=t.duration||500,this._currentState=d({},t.from||this.get()),this._originalState=this.get(),this._targetState=d({},t.to||this.get());var e=this;this._timeoutHandler=function(){b(e,e._timestamp,e._delay,e._duration,e._currentState,e._originalState,e._targetState,e._easing,e._step,e._scheduleFunction)};var r=this._currentState,n=this._targetState;return m(n,r),this._easing=_(r,t.easing||u),this._filterArgs=[r,this._originalState,n,this._easing],y(this,"tweenCreated"),this},w.prototype.get=function(){return d({},this._currentState)},w.prototype.set=function(t){this._currentState=t},w.prototype.pause=function(){return this._pausedAtTime=l(),this._isPaused=!0,this},w.prototype.resume=function(){return this._isPaused&&(this._timestamp+=l()-this._pausedAtTime),this._isPaused=!1,this._isTweening=!0,this._timeoutHandler(),this},w.prototype.seek=function(t){t=Math.max(t,0);var e=l();return this._timestamp+t===0?this:(this._timestamp=e-t,this.isPlaying()||(this._isTweening=!0,this._isPaused=!1,b(this,this._timestamp,this._delay,this._duration,this._currentState,this._originalState,this._targetState,this._easing,this._step,this._scheduleFunction,e),this.pause()),this)},w.prototype.stop=function(t){return this._isTweening=!1,this._isPaused=!1,this._timeoutHandler=p,(e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.oCancelAnimationFrame||e.msCancelAnimationFrame||e.mozCancelRequestAnimationFrame||e.clearTimeout)(this._scheduleId),t&&(y(this,"beforeTween"),g(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),y(this,"afterTween"),y(this,"afterTweenEnd"),this._finish.call(this,this._currentState,this._attachment)),this},w.prototype.isPlaying=function(){return this._isTweening&&!this._isPaused},w.prototype.setScheduleFunction=function(t){this._scheduleFunction=t},w.prototype.dispose=function(){var t;for(t in this)this.hasOwnProperty(t)&&delete this[t]},w.prototype.filter={},w.prototype.formula={linear:function(t){return t}},r=w.prototype.formula,d(w,{now:l,each:f,tweenProps:g,tweenProp:v,applyFilter:y,shallowCopy:d,defaults:m,composeEasingObject:_}),"function"==typeof SHIFTY_DEBUG_NOW&&(e.timeoutHandler=b),t.exports=w,w}();r.shallowCopy(r.prototype.formula,{easeInQuad:function(t){return Math.pow(t,2)},easeOutQuad:function(t){return-(Math.pow(t-1,2)-1)},easeInOutQuad:function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},easeInCubic:function(t){return Math.pow(t,3)},easeOutCubic:function(t){return Math.pow(t-1,3)+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},easeInQuart:function(t){return Math.pow(t,4)},easeOutQuart:function(t){return-(Math.pow(t-1,4)-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeInQuint:function(t){return Math.pow(t,5)},easeOutQuint:function(t){return Math.pow(t-1,5)+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-Math.pow(t-1,2))},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},elastic:function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},swingFromTo:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},swingFrom:function(t){var e=1.70158;return t*t*((e+1)*t-e)},swingTo:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},bounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},bouncePast:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},easeFromTo:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeFrom:function(t){return Math.pow(t,4)},easeTo:function(t){return Math.pow(t,.25)}}),function(){function t(t,e,r,n,o,i){var a=0,s=0,u=0,c=0,h=0,l=0;function p(t){return((a*t+s)*t+u)*t}function f(t){return t>=0?t:0-t}return a=1-(u=3*e)-(s=3*(n-e)-u),c=1-(l=3*r)-(h=3*(o-r)-l),function(t,e){return r=function(t,e){var r,n,o,i,c,h,l;for(o=t,h=0;h<8;h++){if(f(i=p(o)-t)<e)return o;if(f(c=(3*a*(l=o)+2*s)*l+u)<1e-6)break;o-=i/c}if(n=1,(o=t)<(r=0))return r;if(o>n)return n;for(;r<n;){if(f((i=p(o))-t)<e)return o;t>i?r=o:n=o,o=.5*(n-r)+r}return o}(t,e),((c*r+h)*r+l)*r;var r}(t,function(t){return 1/(200*t)}(i))}r.setBezierFunction=function(e,n,o,i,a){var s=function(e,r,n,o){return function(i){return t(i,e,r,n,o,1)}}(n,o,i,a);return s.displayName=e,s.x1=n,s.y1=o,s.x2=i,s.y2=a,r.prototype.formula[e]=s},r.unsetBezierFunction=function(t){delete r.prototype.formula[t]}}(),function(){var t=new r;t._filterArgs=[],r.interpolate=function(e,n,o,i,a){var s=r.shallowCopy({},e),u=a||0,c=r.composeEasingObject(e,i||"linear");t.set({});var h=t._filterArgs;h.length=0,h[0]=s,h[1]=e,h[2]=n,h[3]=c,r.applyFilter(t,"tweenCreated"),r.applyFilter(t,"beforeTween");var l=function(t,e,n,o,i,a){return r.tweenProps(o,e,t,n,1,a,i)}(e,s,n,o,c,u);return r.applyFilter(t,"afterTween"),l}}(),function(t){var e=/(\d|\-|\.)/,r=/([^\-0-9\.]+)/g,n=/[0-9.\-]+/g,o=new RegExp("rgb\\("+n.source+/,\s*/.source+n.source+/,\s*/.source+n.source+"\\)","g"),i=/^.*\(/,a=/#([0-9]|[a-f]){3,6}/gi,s="VAL";function u(t,e){var r,n=[],o=t.length;for(r=0;r<o;r++)n.push("_"+e+"_"+r);return n}function c(e){t.each(e,function(t){var r=e[t];"string"==typeof r&&r.match(a)&&(e[t]=f(a,r,h))})}function h(t){var e=function(t){3===(t=t.replace(/#/,"")).length&&(t=(t=t.split(""))[0]+t[0]+t[1]+t[1]+t[2]+t[2]);return l[0]=p(t.substr(0,2)),l[1]=p(t.substr(2,2)),l[2]=p(t.substr(4,2)),l}(t);return"rgb("+e[0]+","+e[1]+","+e[2]+")"}var l=[];function p(t){return parseInt(t,16)}function f(t,e,r){var n=e.match(t),o=e.replace(t,s);if(n)for(var i,a=n.length,u=0;u<a;u++)i=n.shift(),o=o.replace(s,r(i));return o}function d(t){for(var e=t.match(n),r=e.length,o=t.match(i)[0],a=0;a<r;a++)o+=parseInt(e[a],10)+",";return o=o.slice(0,-1)+")"}function m(e,r){t.each(r,function(t){for(var n=y(e[t]),o=n.length,i=0;i<o;i++)e[r[t].chunkNames[i]]=+n[i];delete e[t]})}function g(e,r){t.each(r,function(t){var n=e[t],i=function(t,e){v.length=0;for(var r=e.length,n=0;n<r;n++)v.push(t[e[n]]);return v}(function(t,e){for(var r,n={},o=e.length,i=0;i<o;i++)r=e[i],n[r]=t[r],delete t[r];return n}(e,r[t].chunkNames),r[t].chunkNames);n=function(t,e){for(var r=t,n=e.length,o=0;o<n;o++)r=r.replace(s,+e[o].toFixed(4));return r}(r[t].formatString,i),e[t]=f(o,n,d)})}var v=[];function y(t){return t.match(n)}t.prototype.filter.token={tweenCreated:function(n,o,i,a){var h,l;c(n),c(o),c(i),this._tokenData=(h=n,l={},t.each(h,function(t){var n,o,i=h[t];if("string"==typeof i){var a=y(i);l[t]={formatString:(n=i,o=n.match(r),o?(1===o.length||n.charAt(0).match(e))&&o.unshift(""):o=["",""],o.join(s)),chunkNames:u(a,t)}}}),l)},beforeTween:function(e,r,n,o){!function(e,r){t.each(r,function(t){var n,o=r[t].chunkNames,i=o.length,a=e[t];if("string"==typeof a){var s=a.split(" "),u=s[s.length-1];for(n=0;n<i;n++)e[o[n]]=s[n]||u}else for(n=0;n<i;n++)e[o[n]]=a;delete e[t]})}(o,this._tokenData),m(e,this._tokenData),m(r,this._tokenData),m(n,this._tokenData)},afterTween:function(e,r,n,o){g(e,this._tokenData),g(r,this._tokenData),g(n,this._tokenData),function(e,r){t.each(r,function(t){var n=r[t].chunkNames,o=n.length,i=e[n[0]];if("string"==typeof i){for(var a="",s=0;s<o;s++)a+=" "+e[n[s]],delete e[n[s]];e[t]=a.substr(1)}else e[t]=i})}(o,this._tokenData)}}}(r)}).call(null)},function(t,e,r){var n=r(1),o=r(3),i=r(0),a=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,n.apply(this,arguments)};(a.prototype=new n).constructor=a,a.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},a.prototype._initializeTextContainer=function(t,e,r){t.text.style&&(r.style.top="auto",r.style.bottom="0",t.text.alignToBottom?i.setStyle(r,"transform","translate(-50%, 0)"):i.setStyle(r,"transform","translate(-50%, 50%)"))},a.prototype._pathString=o.prototype._pathString,a.prototype._trailString=o.prototype._trailString,t.exports=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t};e.default=function(t){if(t){var e=function(t){return[].slice.call(t)},r={IDLE:0,DIRTY_CONTENT:1,DIRTY_LAYOUT:2,DIRTY:3},o=[],i=null,a="requestAnimationFrame"in t?function(){t.cancelAnimationFrame(i),i=t.requestAnimationFrame(function(){u(o.filter(function(t){return t.dirty}))})}:function(){},s=function(t){return function(){o.forEach(function(e){e.dirty=t}),a()}},u=function(t){t.filter(function(t){return!t.styleComputed}).forEach(function(t){t.styleComputed=p(t)}),t.filter(f).forEach(d);var e=t.filter(l);e.forEach(h),e.forEach(function(t){d(t),c(t)}),e.forEach(m)},c=function(t){return t.dirty=r.IDLE},h=function(t){t.availableWidth=t.element.parentNode.clientWidth,t.currentWidth=t.element.scrollWidth,t.previousFontSize=t.currentFontSize,t.currentFontSize=Math.min(Math.max(t.minSize,t.availableWidth/t.currentWidth*t.previousFontSize),t.maxSize),t.whiteSpace=t.multiLine&&t.currentFontSize===t.minSize?"normal":"nowrap"},l=function(t){return t.dirty!==r.DIRTY_LAYOUT||t.dirty===r.DIRTY_LAYOUT&&t.element.parentNode.clientWidth!==t.availableWidth},p=function(e){var r=t.getComputedStyle(e.element,null);e.currentFontSize=parseInt(r.getPropertyValue("font-size"),10),e.display=r.getPropertyValue("display"),e.whiteSpace=r.getPropertyValue("white-space")},f=function(t){var e=!1;return!t.preStyleTestCompleted&&(/inline-/.test(t.display)||(e=!0,t.display="inline-block"),"nowrap"!==t.whiteSpace&&(e=!0,t.whiteSpace="nowrap"),t.preStyleTestCompleted=!0,e)},d=function(t){t.originalStyle||(t.originalStyle=t.element.getAttribute("style")||""),t.element.style.cssText=t.originalStyle+";white-space:"+t.whiteSpace+";display:"+t.display+";font-size:"+t.currentFontSize+"px"},m=function(t){t.element.dispatchEvent(new CustomEvent("fit",{detail:{oldValue:t.previousFontSize,newValue:t.currentFontSize,scaleFactor:t.currentFontSize/t.previousFontSize}}))},g=function(t,e){return function(){t.dirty=e,a()}},v=function(t){t.newbie=!0,t.dirty=!0,o.push(t)},y=function(t){return function(){o=o.filter(function(e){return e.element!==t.element}),t.observeMutations&&t.observer.disconnect(),t.element.style.cssText=t.originalStyle}},b=function(t){t.observeMutations&&(t.observer=new MutationObserver(g(t,r.DIRTY_CONTENT)),t.observer.observe(t.element,t.observeMutations))},_={minSize:16,maxSize:512,multiLine:!0,observeMutations:"MutationObserver"in t&&{subtree:!0,childList:!0,characterData:!0}},w=null,A=function(){t.clearTimeout(w),w=t.setTimeout(s(r.DIRTY_LAYOUT),k.observeWindowDelay)},x=["resize","orientationchange"];return Object.defineProperty(k,"observeWindow",{set:function(e){var r=(e?"add":"remove")+"EventListener";x.forEach(function(e){t[r](e,A)})}}),k.observeWindow=!0,k.observeWindowDelay=100,k.fitAll=s(r.DIRTY),k}function S(t,e){var o=n({},_,e),i=t.map(function(t){var e=n({},o,{element:t});return v(e),b(e),{element:t,fit:g(e,r.DIRTY),unsubscribe:y(e)}});return a(),i}function k(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof t?S(e(document.querySelectorAll(t)),r):S([t],r)[0]}}("undefined"==typeof window?null:window)},function(t,e,r){(function(t,n){var o;/*! https://mths.be/punycode v1.4.0 by @mathias */!function(i){e&&e.nodeType,t&&t.nodeType;var a="object"==typeof n&&n;a.global!==a&&a.window!==a&&a.self;var s,u=2147483647,c=36,h=1,l=26,p=38,f=700,d=72,m=128,g="-",v=/^xn--/,y=/[^\x20-\x7E]/,b=/[\x2E\u3002\uFF0E\uFF61]/g,_={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},w=c-h,A=Math.floor,x=String.fromCharCode;function S(t){throw new RangeError(_[t])}function k(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function C(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+k((t=t.replace(b,".")).split("."),e).join(".")}function z(t){for(var e,r,n=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function I(t){return k(t,function(t){var e="";return t>65535&&(e+=x((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=x(t)}).join("")}function P(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function E(t,e,r){var n=0;for(t=r?A(t/f):t>>1,t+=A(t/e);t>w*l>>1;n+=c)t=A(t/w);return A(n+(w+1)*t/(t+p))}function O(t){var e,r,n,o,i,a,s,p,f,v,y,b=[],_=t.length,w=0,x=m,k=d;for((r=t.lastIndexOf(g))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&S("not-basic"),b.push(t.charCodeAt(n));for(o=r>0?r+1:0;o<_;){for(i=w,a=1,s=c;o>=_&&S("invalid-input"),((p=(y=t.charCodeAt(o++))-48<10?y-22:y-65<26?y-65:y-97<26?y-97:c)>=c||p>A((u-w)/a))&&S("overflow"),w+=p*a,!(p<(f=s<=k?h:s>=k+l?l:s-k));s+=c)a>A(u/(v=c-f))&&S("overflow"),a*=v;k=E(w-i,e=b.length+1,0==i),A(w/e)>u-x&&S("overflow"),x+=A(w/e),w%=e,b.splice(w++,0,x)}return I(b)}function T(t){var e,r,n,o,i,a,s,p,f,v,y,b,_,w,k,C=[];for(b=(t=z(t)).length,e=m,r=0,i=d,a=0;a<b;++a)(y=t[a])<128&&C.push(x(y));for(n=o=C.length,o&&C.push(g);n<b;){for(s=u,a=0;a<b;++a)(y=t[a])>=e&&y<s&&(s=y);for(s-e>A((u-r)/(_=n+1))&&S("overflow"),r+=(s-e)*_,e=s,a=0;a<b;++a)if((y=t[a])<e&&++r>u&&S("overflow"),y==e){for(p=r,f=c;!(p<(v=f<=i?h:f>=i+l?l:f-i));f+=c)k=p-v,w=c-v,C.push(x(P(v+k%w,0))),p=A(k/w);C.push(x(P(p,0))),i=E(r,_,n==o),r=0,++n}++r,++e}return C.join("")}s={version:"1.3.2",ucs2:{decode:z,encode:I},decode:O,encode:T,toASCII:function(t){return C(t,function(t){return y.test(t)?"xn--"+T(t):t})},toUnicode:function(t){return C(t,function(t){return v.test(t)?O(t.slice(4).toLowerCase()):t})}},void 0===(o=function(){return s}.call(e,r,e,t))||(t.exports=o)}()}).call(this,r(19)(t),r(20))},function(t,e,r){var n,o;
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
!function(i,a){"use strict";t.exports?t.exports=a():void 0===(o="function"==typeof(n=a)?n.call(e,r,e,t):n)||(t.exports=o)}(0,function(t){"use strict";var e=t&&t.IPv6;return{best:function(t){var e,r,n=t.toLowerCase().split(":"),o=n.length,i=8;for(""===n[0]&&""===n[1]&&""===n[2]?(n.shift(),n.shift()):""===n[0]&&""===n[1]?n.shift():""===n[o-1]&&""===n[o-2]&&n.pop(),-1!==n[(o=n.length)-1].indexOf(".")&&(i=7),e=0;e<o&&""!==n[e];e++);if(e<i)for(n.splice(e,1,"0000");n.length<i;)n.splice(e,0,"0000");for(var a=0;a<i;a++){r=n[a].split("");for(var s=0;s<3&&"0"===r[0]&&r.length>1;s++)r.splice(0,1);n[a]=r.join("")}var u=-1,c=0,h=0,l=-1,p=!1;for(a=0;a<i;a++)p?"0"===n[a]?h+=1:(p=!1,h>c&&(u=l,c=h)):"0"===n[a]&&(p=!0,l=a,h=1);h>c&&(u=l,c=h),c>1&&n.splice(u,c,""),o=n.length;var f="";for(""===n[0]&&(f=":"),a=0;a<o&&(f+=n[a],a!==o-1);a++)f+=":";return""===n[o-1]&&(f+=":"),f},noConflict:function(){return t.IPv6===this&&(t.IPv6=e),this}}})},function(t,e,r){var n,o;
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
!function(i,a){"use strict";t.exports?t.exports=a():void 0===(o="function"==typeof(n=a)?n.call(e,r,e,t):n)||(t.exports=o)}(0,function(t){"use strict";var e=t&&t.SecondLevelDomains,r={list:{ac:" com gov mil net org ",ae:" ac co gov mil name net org pro sch ",af:" com edu gov net org ",al:" com edu gov mil net org ",ao:" co ed gv it og pb ",ar:" com edu gob gov int mil net org tur ",at:" ac co gv or ",au:" asn com csiro edu gov id net org ",ba:" co com edu gov mil net org rs unbi unmo unsa untz unze ",bb:" biz co com edu gov info net org store tv ",bh:" biz cc com edu gov info net org ",bn:" com edu gov net org ",bo:" com edu gob gov int mil net org tv ",br:" adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",bs:" com edu gov net org ",bz:" du et om ov rg ",ca:" ab bc mb nb nf nl ns nt nu on pe qc sk yk ",ck:" biz co edu gen gov info net org ",cn:" ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",co:" com edu gov mil net nom org ",cr:" ac c co ed fi go or sa ",cy:" ac biz com ekloges gov ltd name net org parliament press pro tm ",do:" art com edu gob gov mil net org sld web ",dz:" art asso com edu gov net org pol ",ec:" com edu fin gov info med mil net org pro ",eg:" com edu eun gov mil name net org sci ",er:" com edu gov ind mil net org rochest w ",es:" com edu gob nom org ",et:" biz com edu gov info name net org ",fj:" ac biz com info mil name net org pro ",fk:" ac co gov net nom org ",fr:" asso com f gouv nom prd presse tm ",gg:" co net org ",gh:" com edu gov mil org ",gn:" ac com gov net org ",gr:" com edu gov mil net org ",gt:" com edu gob ind mil net org ",gu:" com edu gov net org ",hk:" com edu gov idv net org ",hu:" 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",id:" ac co go mil net or sch web ",il:" ac co gov idf k12 muni net org ",in:" ac co edu ernet firm gen gov i ind mil net nic org res ",iq:" com edu gov i mil net org ",ir:" ac co dnssec gov i id net org sch ",it:" edu gov ",je:" co net org ",jo:" com edu gov mil name net org sch ",jp:" ac ad co ed go gr lg ne or ",ke:" ac co go info me mobi ne or sc ",kh:" com edu gov mil net org per ",ki:" biz com de edu gov info mob net org tel ",km:" asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",kn:" edu gov net org ",kr:" ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",kw:" com edu gov net org ",ky:" com edu gov net org ",kz:" com edu gov mil net org ",lb:" com edu gov net org ",lk:" assn com edu gov grp hotel int ltd net ngo org sch soc web ",lr:" com edu gov net org ",lv:" asn com conf edu gov id mil net org ",ly:" com edu gov id med net org plc sch ",ma:" ac co gov m net org press ",mc:" asso tm ",me:" ac co edu gov its net org priv ",mg:" com edu gov mil nom org prd tm ",mk:" com edu gov inf name net org pro ",ml:" com edu gov net org presse ",mn:" edu gov org ",mo:" com edu gov net org ",mt:" com edu gov net org ",mv:" aero biz com coop edu gov info int mil museum name net org pro ",mw:" ac co com coop edu gov int museum net org ",mx:" com edu gob net org ",my:" com edu gov mil name net org sch ",nf:" arts com firm info net other per rec store web ",ng:" biz com edu gov mil mobi name net org sch ",ni:" ac co com edu gob mil net nom org ",np:" com edu gov mil net org ",nr:" biz com edu gov info net org ",om:" ac biz co com edu gov med mil museum net org pro sch ",pe:" com edu gob mil net nom org sld ",ph:" com edu gov i mil net ngo org ",pk:" biz com edu fam gob gok gon gop gos gov net org web ",pl:" art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",pr:" ac biz com edu est gov info isla name net org pro prof ",ps:" com edu gov net org plo sec ",pw:" belau co ed go ne or ",ro:" arts com firm info nom nt org rec store tm www ",rs:" ac co edu gov in org ",sb:" com edu gov net org ",sc:" com edu gov net org ",sh:" co com edu gov net nom org ",sl:" com edu gov net org ",st:" co com consulado edu embaixada gov mil net org principe saotome store ",sv:" com edu gob org red ",sz:" ac co org ",tr:" av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",tt:" aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",tw:" club com ebiz edu game gov idv mil net org ",mu:" ac co com gov net or org ",mz:" ac co edu gov org ",na:" co com ",nz:" ac co cri geek gen govt health iwi maori mil net org parliament school ",pa:" abo ac com edu gob ing med net nom org sld ",pt:" com edu gov int net nome org publ ",py:" com edu gov mil net org ",qa:" com edu gov mil net org ",re:" asso com nom ",ru:" ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",rw:" ac co com edu gouv gov int mil net ",sa:" com edu gov med net org pub sch ",sd:" com edu gov info med net org tv ",se:" a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",sg:" com edu gov idn net org per ",sn:" art com edu gouv org perso univ ",sy:" com edu gov mil net news org ",th:" ac co go in mi net or ",tj:" ac biz co com edu go gov info int mil name net nic org test web ",tn:" agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",tz:" ac co go ne or ",ua:" biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",ug:" ac co go ne or org sc ",uk:" ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",us:" dni fed isa kids nsn ",uy:" com edu gub mil net org ",ve:" co com edu gob info mil net org web ",vi:" co com k12 net org ",vn:" ac biz com edu gov health info int name net org pro ",ye:" co com gov ltd me net org plc ",yu:" ac co edu gov org ",za:" ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",zm:" ac co com edu gov net org sch ",com:"ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",net:"gb jp se uk ",org:"ae",de:"com "},has:function(t){var e=t.lastIndexOf(".");if(e<=0||e>=t.length-1)return!1;var n=t.lastIndexOf(".",e-1);if(n<=0||n>=e-1)return!1;var o=r.list[t.slice(e+1)];return!!o&&o.indexOf(" "+t.slice(n+1,e)+" ")>=0},is:function(t){var e=t.lastIndexOf(".");if(e<=0||e>=t.length-1)return!1;if(t.lastIndexOf(".",e-1)>=0)return!1;var n=r.list[t.slice(e+1)];return!!n&&n.indexOf(" "+t.slice(0,e)+" ")>=0},get:function(t){var e=t.lastIndexOf(".");if(e<=0||e>=t.length-1)return null;var n=t.lastIndexOf(".",e-1);if(n<=0||n>=e-1)return null;var o=r.list[t.slice(e+1)];return o?o.indexOf(" "+t.slice(n+1,e)+" ")<0?null:t.slice(n+1):null},noConflict:function(){return t.SecondLevelDomains===this&&(t.SecondLevelDomains=e),this}};return r})},function(t,e,r){var n,o,i;
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.1
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
!function(a,s){"use strict";t.exports?t.exports=s(r(15),r(16),r(17)):(o=[r(15),r(16),r(17)],void 0===(i="function"==typeof(n=s)?n.apply(e,o):n)||(t.exports=i))}(0,function(t,e,r,n){"use strict";var o=n&&n.URI;function i(t,e){var r=arguments.length>=1,n=arguments.length>=2;if(!(this instanceof i))return r?n?new i(t,e):new i(t):new i;if(void 0===t){if(r)throw new TypeError("undefined is not a valid argument for URI");t="undefined"!=typeof location?location.href+"":""}if(null===t&&r)throw new TypeError("null is not a valid argument for URI");return this.href(t),void 0!==e?this.absoluteTo(e):this}i.version="1.19.1";var a=i.prototype,s=Object.prototype.hasOwnProperty;function u(t){return t.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}function c(t){return void 0===t?"Undefined":String(Object.prototype.toString.call(t)).slice(8,-1)}function h(t){return"Array"===c(t)}function l(t,e){var r,n,o={};if("RegExp"===c(e))o=null;else if(h(e))for(r=0,n=e.length;r<n;r++)o[e[r]]=!0;else o[e]=!0;for(r=0,n=t.length;r<n;r++){(o&&void 0!==o[t[r]]||!o&&e.test(t[r]))&&(t.splice(r,1),n--,r--)}return t}function p(t,e){var r,n;if(h(e)){for(r=0,n=e.length;r<n;r++)if(!p(t,e[r]))return!1;return!0}var o=c(e);for(r=0,n=t.length;r<n;r++)if("RegExp"===o){if("string"==typeof t[r]&&t[r].match(e))return!0}else if(t[r]===e)return!0;return!1}function f(t,e){if(!h(t)||!h(e))return!1;if(t.length!==e.length)return!1;t.sort(),e.sort();for(var r=0,n=t.length;r<n;r++)if(t[r]!==e[r])return!1;return!0}function d(t){return t.replace(/^\/+|\/+$/g,"")}function m(t){return escape(t)}function g(t){return encodeURIComponent(t).replace(/[!'()*]/g,m).replace(/\*/g,"%2A")}i._parts=function(){return{protocol:null,username:null,password:null,hostname:null,urn:null,port:null,path:null,query:null,fragment:null,preventInvalidHostname:i.preventInvalidHostname,duplicateQueryParameters:i.duplicateQueryParameters,escapeQuerySpace:i.escapeQuerySpace}},i.preventInvalidHostname=!1,i.duplicateQueryParameters=!1,i.escapeQuerySpace=!0,i.protocol_expression=/^[a-z][a-z0-9.+-]*$/i,i.idn_expression=/[^a-z0-9\._-]/i,i.punycode_expression=/(xn--)/i,i.ip4_expression=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,i.ip6_expression=/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,i.find_uri_expression=/\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/gi,i.findUri={start:/\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,end:/[\s\r\n]|$/,trim:/[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,parens:/(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g},i.defaultPorts={http:"80",https:"443",ftp:"21",gopher:"70",ws:"80",wss:"443"},i.hostProtocols=["http","https"],i.invalid_hostname_characters=/[^a-zA-Z0-9\.\-:_]/,i.domAttributes={a:"href",blockquote:"cite",link:"href",base:"href",script:"src",form:"action",img:"src",area:"href",iframe:"src",embed:"src",source:"src",track:"src",input:"src",audio:"src",video:"src"},i.getDomAttribute=function(t){if(t&&t.nodeName){var e=t.nodeName.toLowerCase();if("input"!==e||"image"===t.type)return i.domAttributes[e]}},i.encode=g,i.decode=decodeURIComponent,i.iso8859=function(){i.encode=escape,i.decode=unescape},i.unicode=function(){i.encode=g,i.decode=decodeURIComponent},i.characters={pathname:{encode:{expression:/%(24|26|2B|2C|3B|3D|3A|40)/gi,map:{"%24":"$","%26":"&","%2B":"+","%2C":",","%3B":";","%3D":"=","%3A":":","%40":"@"}},decode:{expression:/[\/\?#]/g,map:{"/":"%2F","?":"%3F","#":"%23"}}},reserved:{encode:{expression:/%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/gi,map:{"%3A":":","%2F":"/","%3F":"?","%23":"#","%5B":"[","%5D":"]","%40":"@","%21":"!","%24":"$","%26":"&","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"="}}},urnpath:{encode:{expression:/%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/gi,map:{"%21":"!","%24":"$","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"=","%40":"@"}},decode:{expression:/[\/\?#:]/g,map:{"/":"%2F","?":"%3F","#":"%23",":":"%3A"}}}},i.encodeQuery=function(t,e){var r=i.encode(t+"");return void 0===e&&(e=i.escapeQuerySpace),e?r.replace(/%20/g,"+"):r},i.decodeQuery=function(t,e){t+="",void 0===e&&(e=i.escapeQuerySpace);try{return i.decode(e?t.replace(/\+/g,"%20"):t)}catch(e){return t}};var v,y={encode:"encode",decode:"decode"},b=function(t,e){return function(r){try{return i[e](r+"").replace(i.characters[t][e].expression,function(r){return i.characters[t][e].map[r]})}catch(t){return r}}};for(v in y)i[v+"PathSegment"]=b("pathname",y[v]),i[v+"UrnPathSegment"]=b("urnpath",y[v]);var _=function(t,e,r){return function(n){var o;o=r?function(t){return i[e](i[r](t))}:i[e];for(var a=(n+"").split(t),s=0,u=a.length;s<u;s++)a[s]=o(a[s]);return a.join(t)}};function w(t){return function(e,r){return void 0===e?this._parts[t]||"":(this._parts[t]=e||null,this.build(!r),this)}}function A(t,e){return function(r,n){return void 0===r?this._parts[t]||"":(null!==r&&(r+="").charAt(0)===e&&(r=r.substring(1)),this._parts[t]=r,this.build(!n),this)}}i.decodePath=_("/","decodePathSegment"),i.decodeUrnPath=_(":","decodeUrnPathSegment"),i.recodePath=_("/","encodePathSegment","decode"),i.recodeUrnPath=_(":","encodeUrnPathSegment","decode"),i.encodeReserved=b("reserved","encode"),i.parse=function(t,e){var r;return e||(e={preventInvalidHostname:i.preventInvalidHostname}),(r=t.indexOf("#"))>-1&&(e.fragment=t.substring(r+1)||null,t=t.substring(0,r)),(r=t.indexOf("?"))>-1&&(e.query=t.substring(r+1)||null,t=t.substring(0,r)),"//"===t.substring(0,2)?(e.protocol=null,t=t.substring(2),t=i.parseAuthority(t,e)):(r=t.indexOf(":"))>-1&&(e.protocol=t.substring(0,r)||null,e.protocol&&!e.protocol.match(i.protocol_expression)?e.protocol=void 0:"//"===t.substring(r+1,r+3)?(t=t.substring(r+3),t=i.parseAuthority(t,e)):(t=t.substring(r+1),e.urn=!0)),e.path=t,e},i.parseHost=function(t,e){t||(t="");var r,n,o=(t=t.replace(/\\/g,"/")).indexOf("/");if(-1===o&&(o=t.length),"["===t.charAt(0))r=t.indexOf("]"),e.hostname=t.substring(1,r)||null,e.port=t.substring(r+2,o)||null,"/"===e.port&&(e.port=null);else{var a=t.indexOf(":"),s=t.indexOf("/"),u=t.indexOf(":",a+1);-1!==u&&(-1===s||u<s)?(e.hostname=t.substring(0,o)||null,e.port=null):(n=t.substring(0,o).split(":"),e.hostname=n[0]||null,e.port=n[1]||null)}return e.hostname&&"/"!==t.substring(o).charAt(0)&&(o++,t="/"+t),e.preventInvalidHostname&&i.ensureValidHostname(e.hostname,e.protocol),e.port&&i.ensureValidPort(e.port),t.substring(o)||"/"},i.parseAuthority=function(t,e){return t=i.parseUserinfo(t,e),i.parseHost(t,e)},i.parseUserinfo=function(t,e){var r,n=t.indexOf("/"),o=t.lastIndexOf("@",n>-1?n:t.length-1);return o>-1&&(-1===n||o<n)?(r=t.substring(0,o).split(":"),e.username=r[0]?i.decode(r[0]):null,r.shift(),e.password=r[0]?i.decode(r.join(":")):null,t=t.substring(o+1)):(e.username=null,e.password=null),t},i.parseQuery=function(t,e){if(!t)return{};if(!(t=t.replace(/&+/g,"&").replace(/^\?*&*|&+$/g,"")))return{};for(var r,n,o,a={},u=t.split("&"),c=u.length,h=0;h<c;h++)r=u[h].split("="),n=i.decodeQuery(r.shift(),e),o=r.length?i.decodeQuery(r.join("="),e):null,s.call(a,n)?("string"!=typeof a[n]&&null!==a[n]||(a[n]=[a[n]]),a[n].push(o)):a[n]=o;return a},i.build=function(t){var e="";return t.protocol&&(e+=t.protocol+":"),t.urn||!e&&!t.hostname||(e+="//"),e+=i.buildAuthority(t)||"","string"==typeof t.path&&("/"!==t.path.charAt(0)&&"string"==typeof t.hostname&&(e+="/"),e+=t.path),"string"==typeof t.query&&t.query&&(e+="?"+t.query),"string"==typeof t.fragment&&t.fragment&&(e+="#"+t.fragment),e},i.buildHost=function(t){var e="";return t.hostname?(i.ip6_expression.test(t.hostname)?e+="["+t.hostname+"]":e+=t.hostname,t.port&&(e+=":"+t.port),e):""},i.buildAuthority=function(t){return i.buildUserinfo(t)+i.buildHost(t)},i.buildUserinfo=function(t){var e="";return t.username&&(e+=i.encode(t.username)),t.password&&(e+=":"+i.encode(t.password)),e&&(e+="@"),e},i.buildQuery=function(t,e,r){var n,o,a,u,c="";for(o in t)if(s.call(t,o)&&o)if(h(t[o]))for(n={},a=0,u=t[o].length;a<u;a++)void 0!==t[o][a]&&void 0===n[t[o][a]+""]&&(c+="&"+i.buildQueryParameter(o,t[o][a],r),!0!==e&&(n[t[o][a]+""]=!0));else void 0!==t[o]&&(c+="&"+i.buildQueryParameter(o,t[o],r));return c.substring(1)},i.buildQueryParameter=function(t,e,r){return i.encodeQuery(t,r)+(null!==e?"="+i.encodeQuery(e,r):"")},i.addQuery=function(t,e,r){if("object"==typeof e)for(var n in e)s.call(e,n)&&i.addQuery(t,n,e[n]);else{if("string"!=typeof e)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");if(void 0===t[e])return void(t[e]=r);"string"==typeof t[e]&&(t[e]=[t[e]]),h(r)||(r=[r]),t[e]=(t[e]||[]).concat(r)}},i.setQuery=function(t,e,r){if("object"==typeof e)for(var n in e)s.call(e,n)&&i.setQuery(t,n,e[n]);else{if("string"!=typeof e)throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");t[e]=void 0===r?null:r}},i.removeQuery=function(t,e,r){var n,o,a;if(h(e))for(n=0,o=e.length;n<o;n++)t[e[n]]=void 0;else if("RegExp"===c(e))for(a in t)e.test(a)&&(t[a]=void 0);else if("object"==typeof e)for(a in e)s.call(e,a)&&i.removeQuery(t,a,e[a]);else{if("string"!=typeof e)throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");void 0!==r?"RegExp"===c(r)?!h(t[e])&&r.test(t[e])?t[e]=void 0:t[e]=l(t[e],r):t[e]!==String(r)||h(r)&&1!==r.length?h(t[e])&&(t[e]=l(t[e],r)):t[e]=void 0:t[e]=void 0}},i.hasQuery=function(t,e,r,n){switch(c(e)){case"String":break;case"RegExp":for(var o in t)if(s.call(t,o)&&e.test(o)&&(void 0===r||i.hasQuery(t,o,r)))return!0;return!1;case"Object":for(var a in e)if(s.call(e,a)&&!i.hasQuery(t,a,e[a]))return!1;return!0;default:throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter")}switch(c(r)){case"Undefined":return e in t;case"Boolean":return r===Boolean(h(t[e])?t[e].length:t[e]);case"Function":return!!r(t[e],e,t);case"Array":return!!h(t[e])&&(n?p:f)(t[e],r);case"RegExp":return h(t[e])?!!n&&p(t[e],r):Boolean(t[e]&&t[e].match(r));case"Number":r=String(r);case"String":return h(t[e])?!!n&&p(t[e],r):t[e]===r;default:throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter")}},i.joinPaths=function(){for(var t=[],e=[],r=0,n=0;n<arguments.length;n++){var o=new i(arguments[n]);t.push(o);for(var a=o.segment(),s=0;s<a.length;s++)"string"==typeof a[s]&&e.push(a[s]),a[s]&&r++}if(!e.length||!r)return new i("");var u=new i("").segment(e);return""!==t[0].path()&&"/"!==t[0].path().slice(0,1)||u.path("/"+u.path()),u.normalize()},i.commonPath=function(t,e){var r,n=Math.min(t.length,e.length);for(r=0;r<n;r++)if(t.charAt(r)!==e.charAt(r)){r--;break}return r<1?t.charAt(0)===e.charAt(0)&&"/"===t.charAt(0)?"/":"":("/"===t.charAt(r)&&"/"===e.charAt(r)||(r=t.substring(0,r).lastIndexOf("/")),t.substring(0,r+1))},i.withinString=function(t,e,r){r||(r={});var n=r.start||i.findUri.start,o=r.end||i.findUri.end,a=r.trim||i.findUri.trim,s=r.parens||i.findUri.parens,u=/[a-z0-9-]=["']?$/i;for(n.lastIndex=0;;){var c=n.exec(t);if(!c)break;var h=c.index;if(r.ignoreHtml){var l=t.slice(Math.max(h-3,0),h);if(l&&u.test(l))continue}for(var p=h+t.slice(h).search(o),f=t.slice(h,p),d=-1;;){var m=s.exec(f);if(!m)break;var g=m.index+m[0].length;d=Math.max(d,g)}if(!((f=d>-1?f.slice(0,d)+f.slice(d).replace(a,""):f.replace(a,"")).length<=c[0].length||r.ignore&&r.ignore.test(f))){var v=e(f,h,p=h+f.length,t);void 0!==v?(v=String(v),t=t.slice(0,h)+v+t.slice(p),n.lastIndex=h+v.length):n.lastIndex=p}}return n.lastIndex=0,t},i.ensureValidHostname=function(e,r){var n=!!e,o=!1;if(!!r&&(o=p(i.hostProtocols,r)),o&&!n)throw new TypeError("Hostname cannot be empty, if protocol is "+r);if(e&&e.match(i.invalid_hostname_characters)){if(!t)throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');if(t.toASCII(e).match(i.invalid_hostname_characters))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-:_]')}},i.ensureValidPort=function(t){if(t){var e=Number(t);if(!(/^[0-9]+$/.test(e)&&e>0&&e<65536))throw new TypeError('Port "'+t+'" is not a valid port')}},i.noConflict=function(t){if(t){var e={URI:this.noConflict()};return n.URITemplate&&"function"==typeof n.URITemplate.noConflict&&(e.URITemplate=n.URITemplate.noConflict()),n.IPv6&&"function"==typeof n.IPv6.noConflict&&(e.IPv6=n.IPv6.noConflict()),n.SecondLevelDomains&&"function"==typeof n.SecondLevelDomains.noConflict&&(e.SecondLevelDomains=n.SecondLevelDomains.noConflict()),e}return n.URI===this&&(n.URI=o),this},a.build=function(t){return!0===t?this._deferred_build=!0:(void 0===t||this._deferred_build)&&(this._string=i.build(this._parts),this._deferred_build=!1),this},a.clone=function(){return new i(this)},a.valueOf=a.toString=function(){return this.build(!1)._string},a.protocol=w("protocol"),a.username=w("username"),a.password=w("password"),a.hostname=w("hostname"),a.port=w("port"),a.query=A("query","?"),a.fragment=A("fragment","#"),a.search=function(t,e){var r=this.query(t,e);return"string"==typeof r&&r.length?"?"+r:r},a.hash=function(t,e){var r=this.fragment(t,e);return"string"==typeof r&&r.length?"#"+r:r},a.pathname=function(t,e){if(void 0===t||!0===t){var r=this._parts.path||(this._parts.hostname?"/":"");return t?(this._parts.urn?i.decodeUrnPath:i.decodePath)(r):r}return this._parts.urn?this._parts.path=t?i.recodeUrnPath(t):"":this._parts.path=t?i.recodePath(t):"/",this.build(!e),this},a.path=a.pathname,a.href=function(t,e){var r;if(void 0===t)return this.toString();this._string="",this._parts=i._parts();var n=t instanceof i,o="object"==typeof t&&(t.hostname||t.path||t.pathname);t.nodeName&&(t=t[i.getDomAttribute(t)]||"",o=!1);if(!n&&o&&void 0!==t.pathname&&(t=t.toString()),"string"==typeof t||t instanceof String)this._parts=i.parse(String(t),this._parts);else{if(!n&&!o)throw new TypeError("invalid input");var a=n?t._parts:t;for(r in a)"query"!==r&&s.call(this._parts,r)&&(this._parts[r]=a[r]);a.query&&this.query(a.query,!1)}return this.build(!e),this},a.is=function(t){var e=!1,n=!1,o=!1,a=!1,s=!1,u=!1,c=!1,h=!this._parts.urn;switch(this._parts.hostname&&(h=!1,n=i.ip4_expression.test(this._parts.hostname),o=i.ip6_expression.test(this._parts.hostname),s=(a=!(e=n||o))&&r&&r.has(this._parts.hostname),u=a&&i.idn_expression.test(this._parts.hostname),c=a&&i.punycode_expression.test(this._parts.hostname)),t.toLowerCase()){case"relative":return h;case"absolute":return!h;case"domain":case"name":return a;case"sld":return s;case"ip":return e;case"ip4":case"ipv4":case"inet4":return n;case"ip6":case"ipv6":case"inet6":return o;case"idn":return u;case"url":return!this._parts.urn;case"urn":return!!this._parts.urn;case"punycode":return c}return null};var x=a.protocol,S=a.port,k=a.hostname;a.protocol=function(t,e){if(t&&!(t=t.replace(/:(\/\/)?$/,"")).match(i.protocol_expression))throw new TypeError('Protocol "'+t+"\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");return x.call(this,t,e)},a.scheme=a.protocol,a.port=function(t,e){return this._parts.urn?void 0===t?"":this:(void 0!==t&&(0===t&&(t=null),t&&(":"===(t+="").charAt(0)&&(t=t.substring(1)),i.ensureValidPort(t))),S.call(this,t,e))},a.hostname=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0!==t){var r={preventInvalidHostname:this._parts.preventInvalidHostname};if("/"!==i.parseHost(t,r))throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-]');t=r.hostname,this._parts.preventInvalidHostname&&i.ensureValidHostname(t,this._parts.protocol)}return k.call(this,t,e)},a.origin=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t){var r=this.protocol();return this.authority()?(r?r+"://":"")+this.authority():""}var n=i(t);return this.protocol(n.protocol()).authority(n.authority()).build(!e),this},a.host=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t)return this._parts.hostname?i.buildHost(this._parts):"";if("/"!==i.parseHost(t,this._parts))throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-]');return this.build(!e),this},a.authority=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t)return this._parts.hostname?i.buildAuthority(this._parts):"";if("/"!==i.parseAuthority(t,this._parts))throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-]');return this.build(!e),this},a.userinfo=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t){var r=i.buildUserinfo(this._parts);return r?r.substring(0,r.length-1):r}return"@"!==t[t.length-1]&&(t+="@"),i.parseUserinfo(t,this._parts),this.build(!e),this},a.resource=function(t,e){var r;return void 0===t?this.path()+this.search()+this.hash():(r=i.parse(t),this._parts.path=r.path,this._parts.query=r.query,this._parts.fragment=r.fragment,this.build(!e),this)},a.subdomain=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.length-this.domain().length-1;return this._parts.hostname.substring(0,r)||""}var n=this._parts.hostname.length-this.domain().length,o=this._parts.hostname.substring(0,n),a=new RegExp("^"+u(o));if(t&&"."!==t.charAt(t.length-1)&&(t+="."),-1!==t.indexOf(":"))throw new TypeError("Domains cannot contain colons");return t&&i.ensureValidHostname(t,this._parts.protocol),this._parts.hostname=this._parts.hostname.replace(a,t),this.build(!e),this},a.domain=function(t,e){if(this._parts.urn)return void 0===t?"":this;if("boolean"==typeof t&&(e=t,t=void 0),void 0===t){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.match(/\./g);if(r&&r.length<2)return this._parts.hostname;var n=this._parts.hostname.length-this.tld(e).length-1;return n=this._parts.hostname.lastIndexOf(".",n-1)+1,this._parts.hostname.substring(n)||""}if(!t)throw new TypeError("cannot set domain empty");if(-1!==t.indexOf(":"))throw new TypeError("Domains cannot contain colons");if(i.ensureValidHostname(t,this._parts.protocol),!this._parts.hostname||this.is("IP"))this._parts.hostname=t;else{var o=new RegExp(u(this.domain())+"$");this._parts.hostname=this._parts.hostname.replace(o,t)}return this.build(!e),this},a.tld=function(t,e){if(this._parts.urn)return void 0===t?"":this;if("boolean"==typeof t&&(e=t,t=void 0),void 0===t){if(!this._parts.hostname||this.is("IP"))return"";var n=this._parts.hostname.lastIndexOf("."),o=this._parts.hostname.substring(n+1);return!0!==e&&r&&r.list[o.toLowerCase()]&&r.get(this._parts.hostname)||o}var i;if(!t)throw new TypeError("cannot set TLD empty");if(t.match(/[^a-zA-Z0-9-]/)){if(!r||!r.is(t))throw new TypeError('TLD "'+t+'" contains characters other than [A-Z0-9]');i=new RegExp(u(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(i,t)}else{if(!this._parts.hostname||this.is("IP"))throw new ReferenceError("cannot set TLD on non-domain host");i=new RegExp(u(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(i,t)}return this.build(!e),this},a.directory=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t||!0===t){if(!this._parts.path&&!this._parts.hostname)return"";if("/"===this._parts.path)return"/";var r=this._parts.path.length-this.filename().length-1,n=this._parts.path.substring(0,r)||(this._parts.hostname?"/":"");return t?i.decodePath(n):n}var o=this._parts.path.length-this.filename().length,a=this._parts.path.substring(0,o),s=new RegExp("^"+u(a));return this.is("relative")||(t||(t="/"),"/"!==t.charAt(0)&&(t="/"+t)),t&&"/"!==t.charAt(t.length-1)&&(t+="/"),t=i.recodePath(t),this._parts.path=this._parts.path.replace(s,t),this.build(!e),this},a.filename=function(t,e){if(this._parts.urn)return void 0===t?"":this;if("string"!=typeof t){if(!this._parts.path||"/"===this._parts.path)return"";var r=this._parts.path.lastIndexOf("/"),n=this._parts.path.substring(r+1);return t?i.decodePathSegment(n):n}var o=!1;"/"===t.charAt(0)&&(t=t.substring(1)),t.match(/\.?\//)&&(o=!0);var a=new RegExp(u(this.filename())+"$");return t=i.recodePath(t),this._parts.path=this._parts.path.replace(a,t),o?this.normalizePath(e):this.build(!e),this},a.suffix=function(t,e){if(this._parts.urn)return void 0===t?"":this;if(void 0===t||!0===t){if(!this._parts.path||"/"===this._parts.path)return"";var r,n,o=this.filename(),a=o.lastIndexOf(".");return-1===a?"":(r=o.substring(a+1),n=/^[a-z0-9%]+$/i.test(r)?r:"",t?i.decodePathSegment(n):n)}"."===t.charAt(0)&&(t=t.substring(1));var s,c=this.suffix();if(c)s=t?new RegExp(u(c)+"$"):new RegExp(u("."+c)+"$");else{if(!t)return this;this._parts.path+="."+i.recodePath(t)}return s&&(t=i.recodePath(t),this._parts.path=this._parts.path.replace(s,t)),this.build(!e),this},a.segment=function(t,e,r){var n=this._parts.urn?":":"/",o=this.path(),i="/"===o.substring(0,1),a=o.split(n);if(void 0!==t&&"number"!=typeof t&&(r=e,e=t,t=void 0),void 0!==t&&"number"!=typeof t)throw new Error('Bad segment "'+t+'", must be 0-based integer');if(i&&a.shift(),t<0&&(t=Math.max(a.length+t,0)),void 0===e)return void 0===t?a:a[t];if(null===t||void 0===a[t])if(h(e)){a=[];for(var s=0,u=e.length;s<u;s++)(e[s].length||a.length&&a[a.length-1].length)&&(a.length&&!a[a.length-1].length&&a.pop(),a.push(d(e[s])))}else(e||"string"==typeof e)&&(e=d(e),""===a[a.length-1]?a[a.length-1]=e:a.push(e));else e?a[t]=d(e):a.splice(t,1);return i&&a.unshift(""),this.path(a.join(n),r)},a.segmentCoded=function(t,e,r){var n,o,a;if("number"!=typeof t&&(r=e,e=t,t=void 0),void 0===e){if(h(n=this.segment(t,e,r)))for(o=0,a=n.length;o<a;o++)n[o]=i.decode(n[o]);else n=void 0!==n?i.decode(n):void 0;return n}if(h(e))for(o=0,a=e.length;o<a;o++)e[o]=i.encode(e[o]);else e="string"==typeof e||e instanceof String?i.encode(e):e;return this.segment(t,e,r)};var C=a.query;return a.query=function(t,e){if(!0===t)return i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("function"==typeof t){var r=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace),n=t.call(this,r);return this._parts.query=i.buildQuery(n||r,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!e),this}return void 0!==t&&"string"!=typeof t?(this._parts.query=i.buildQuery(t,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!e),this):C.call(this,t,e)},a.setQuery=function(t,e,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("string"==typeof t||t instanceof String)n[t]=void 0!==e?e:null;else{if("object"!=typeof t)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");for(var o in t)s.call(t,o)&&(n[o]=t[o])}return this._parts.query=i.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof t&&(r=e),this.build(!r),this},a.addQuery=function(t,e,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.addQuery(n,t,void 0===e?null:e),this._parts.query=i.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof t&&(r=e),this.build(!r),this},a.removeQuery=function(t,e,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.removeQuery(n,t,e),this._parts.query=i.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof t&&(r=e),this.build(!r),this},a.hasQuery=function(t,e,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.hasQuery(n,t,e,r)},a.setSearch=a.setQuery,a.addSearch=a.addQuery,a.removeSearch=a.removeQuery,a.hasSearch=a.hasQuery,a.normalize=function(){return this._parts.urn?this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build():this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build()},a.normalizeProtocol=function(t){return"string"==typeof this._parts.protocol&&(this._parts.protocol=this._parts.protocol.toLowerCase(),this.build(!t)),this},a.normalizeHostname=function(r){return this._parts.hostname&&(this.is("IDN")&&t?this._parts.hostname=t.toASCII(this._parts.hostname):this.is("IPv6")&&e&&(this._parts.hostname=e.best(this._parts.hostname)),this._parts.hostname=this._parts.hostname.toLowerCase(),this.build(!r)),this},a.normalizePort=function(t){return"string"==typeof this._parts.protocol&&this._parts.port===i.defaultPorts[this._parts.protocol]&&(this._parts.port=null,this.build(!t)),this},a.normalizePath=function(t){var e,r=this._parts.path;if(!r)return this;if(this._parts.urn)return this._parts.path=i.recodeUrnPath(this._parts.path),this.build(!t),this;if("/"===this._parts.path)return this;var n,o,a="";for("/"!==(r=i.recodePath(r)).charAt(0)&&(e=!0,r="/"+r),"/.."!==r.slice(-3)&&"/."!==r.slice(-2)||(r+="/"),r=r.replace(/(\/(\.\/)+)|(\/\.$)/g,"/").replace(/\/{2,}/g,"/"),e&&(a=r.substring(1).match(/^(\.\.\/)+/)||"")&&(a=a[0]);-1!==(n=r.search(/\/\.\.(\/|$)/));)0!==n?(-1===(o=r.substring(0,n).lastIndexOf("/"))&&(o=n),r=r.substring(0,o)+r.substring(n+3)):r=r.substring(3);return e&&this.is("relative")&&(r=a+r.substring(1)),this._parts.path=r,this.build(!t),this},a.normalizePathname=a.normalizePath,a.normalizeQuery=function(t){return"string"==typeof this._parts.query&&(this._parts.query.length?this.query(i.parseQuery(this._parts.query,this._parts.escapeQuerySpace)):this._parts.query=null,this.build(!t)),this},a.normalizeFragment=function(t){return this._parts.fragment||(this._parts.fragment=null,this.build(!t)),this},a.normalizeSearch=a.normalizeQuery,a.normalizeHash=a.normalizeFragment,a.iso8859=function(){var t=i.encode,e=i.decode;i.encode=escape,i.decode=decodeURIComponent;try{this.normalize()}finally{i.encode=t,i.decode=e}return this},a.unicode=function(){var t=i.encode,e=i.decode;i.encode=g,i.decode=unescape;try{this.normalize()}finally{i.encode=t,i.decode=e}return this},a.readable=function(){var e=this.clone();e.username("").password("").normalize();var r="";if(e._parts.protocol&&(r+=e._parts.protocol+"://"),e._parts.hostname&&(e.is("punycode")&&t?(r+=t.toUnicode(e._parts.hostname),e._parts.port&&(r+=":"+e._parts.port)):r+=e.host()),e._parts.hostname&&e._parts.path&&"/"!==e._parts.path.charAt(0)&&(r+="/"),r+=e.path(!0),e._parts.query){for(var n="",o=0,a=e._parts.query.split("&"),s=a.length;o<s;o++){var u=(a[o]||"").split("=");n+="&"+i.decodeQuery(u[0],this._parts.escapeQuerySpace).replace(/&/g,"%26"),void 0!==u[1]&&(n+="="+i.decodeQuery(u[1],this._parts.escapeQuerySpace).replace(/&/g,"%26"))}r+="?"+n.substring(1)}return r+=i.decodeQuery(e.hash(),!0)},a.absoluteTo=function(t){var e,r,n,o=this.clone(),a=["protocol","username","password","hostname","port"];if(this._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(t instanceof i||(t=new i(t)),o._parts.protocol)return o;if(o._parts.protocol=t._parts.protocol,this._parts.hostname)return o;for(r=0;n=a[r];r++)o._parts[n]=t._parts[n];return o._parts.path?(".."===o._parts.path.substring(-2)&&(o._parts.path+="/"),"/"!==o.path().charAt(0)&&(e=(e=t.directory())||(0===t.path().indexOf("/")?"/":""),o._parts.path=(e?e+"/":"")+o._parts.path,o.normalizePath())):(o._parts.path=t._parts.path,o._parts.query||(o._parts.query=t._parts.query)),o.build(),o},a.relativeTo=function(t){var e,r,n,o,a,s=this.clone().normalize();if(s._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(t=new i(t).normalize(),e=s._parts,r=t._parts,o=s.path(),a=t.path(),"/"!==o.charAt(0))throw new Error("URI is already relative");if("/"!==a.charAt(0))throw new Error("Cannot calculate a URI relative to another relative URI");if(e.protocol===r.protocol&&(e.protocol=null),e.username!==r.username||e.password!==r.password)return s.build();if(null!==e.protocol||null!==e.username||null!==e.password)return s.build();if(e.hostname!==r.hostname||e.port!==r.port)return s.build();if(e.hostname=null,e.port=null,o===a)return e.path="",s.build();if(!(n=i.commonPath(o,a)))return s.build();var u=r.path.substring(n.length).replace(/[^\/]*$/,"").replace(/.*?\//g,"../");return e.path=u+e.path.substring(n.length)||"./",s.build()},a.equals=function(t){var e,r,n,o,a,u=this.clone(),c=new i(t),l={};if(u.normalize(),c.normalize(),u.toString()===c.toString())return!0;if(n=u.query(),o=c.query(),u.query(""),c.query(""),u.toString()!==c.toString())return!1;if(n.length!==o.length)return!1;for(a in e=i.parseQuery(n,this._parts.escapeQuerySpace),r=i.parseQuery(o,this._parts.escapeQuerySpace),e)if(s.call(e,a)){if(h(e[a])){if(!f(e[a],r[a]))return!1}else if(e[a]!==r[a])return!1;l[a]=!0}for(a in r)if(s.call(r,a)&&!l[a])return!1;return!0},a.preventInvalidHostname=function(t){return this._parts.preventInvalidHostname=!!t,this},a.duplicateQueryParameters=function(t){return this._parts.duplicateQueryParameters=!!t,this},a.escapeQuerySpace=function(t){return this._parts.escapeQuerySpace=!!t,this},i})},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){
/*!	
* FitText.js 1.0 jQuery free version
*
* Copyright 2011, Dave Rupert http://daverupert.com 
* Released under the WTFPL license 
* http://sam.zoy.org/wtfpl/
* Modified by Slawomir Kolodziej http://slawekk.info
*
* Date: Tue Aug 09 2011 10:45:54 GMT+0200 (CEST)
*/
var r;r=function(t,e,r){t.addEventListener?t.addEventListener(e,r,!1):t.attachEvent("on"+e,r)},window.fitText=function(t,e,n){var o=function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}({minFontSize:-1/0,maxFontSize:1/0},n),i=function(t){var n=e||1,i=function(){t.style.fontSize=Math.max(Math.min(t.clientWidth/(10*n),parseFloat(o.maxFontSize)),parseFloat(o.minFontSize))+"px"};i(),r(window,"resize",i),r(window,"orientationchange",i)};if(t.length)for(var a=0;a<t.length;a++)i(t[a]);else i(t);return t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzYmFyLmpzL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3NiYXIuanMvc3JjL3NoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9ncmVzc2Jhci5qcy9zcmMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3NiYXIuanMvc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3NiYXIuanMvc3JjL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS5zY3NzP2UzZTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhc2Uuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9ncmVzc2Jhci5qcy9zcmMvbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hpZnR5L2Rpc3Qvc2hpZnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9ncmVzc2Jhci5qcy9zcmMvc2VtaWNpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZml0dHkvZGlzdC9maXR0eS5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJpanMvc3JjL0lQdjYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9TZWNvbmRMZXZlbERvbWFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9VUkkuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9maXR0ZXh0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUFJFRklYRVMiLCJzcGxpdCIsIkZMT0FUX0NPTVBBUklTT05fRVBTSUxPTiIsInNldFN0eWxlIiwiZWxlbWVudCIsInN0eWxlIiwiZWxTdHlsZSIsImxlbmd0aCIsImNhcGl0YWxpemUiLCJ0ZXh0IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImlzT2JqZWN0Iiwib2JqIiwidG9TdHJpbmciLCJpc0FycmF5IiwiZm9yRWFjaE9iamVjdCIsImNhbGxiYWNrIiwiZXh0ZW5kIiwiZGVzdGluYXRpb24iLCJzb3VyY2UiLCJyZWN1cnNpdmUiLCJhdHRyTmFtZSIsImRlc3RWYWwiLCJzb3VyY2VWYWwiLCJyZW5kZXIiLCJ0ZW1wbGF0ZSIsInZhcnMiLCJyZW5kZXJlZCIsInZhbCIsInJlZ0V4cCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJzZXRTdHlsZXMiLCJzdHlsZXMiLCJzdHlsZVZhbHVlIiwic3R5bGVOYW1lIiwicHJlZml4IiwiaXNTdHJpbmciLCJTdHJpbmciLCJpc0Z1bmN0aW9uIiwiZmxvYXRFcXVhbHMiLCJhIiwiYiIsIk1hdGgiLCJhYnMiLCJyZW1vdmVDaGlsZHJlbiIsImVsIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiUGF0aCIsInV0aWxzIiwiU2hhcGUiLCJjb250YWluZXIiLCJvcHRzIiwidGhpcyIsIkVycm9yIiwiYXJndW1lbnRzIiwiX29wdHMiLCJjb2xvciIsInN0cm9rZVdpZHRoIiwidHJhaWxDb2xvciIsInRyYWlsV2lkdGgiLCJmaWxsIiwicG9zaXRpb24iLCJsZWZ0IiwidG9wIiwicGFkZGluZyIsIm1hcmdpbiIsInRyYW5zZm9ybSIsImF1dG9TdHlsZUNvbnRhaW5lciIsImFsaWduVG9Cb3R0b20iLCJjbGFzc05hbWUiLCJzdmdTdHlsZSIsImRpc3BsYXkiLCJ3aWR0aCIsIndhcm5pbmdzIiwidW5kZWZpbmVkIiwic3ZnVmlldyIsIl9jcmVhdGVTdmdWaWV3IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2NvbnRhaW5lciIsImFwcGVuZENoaWxkIiwic3ZnIiwiX3dhcm5Db250YWluZXJBc3BlY3RSYXRpbyIsInBhdGgiLCJ0cmFpbCIsIm5ld09wdHMiLCJhdHRhY2htZW50Iiwic2hhcGUiLCJfcHJvZ3Jlc3NQYXRoIiwic2V0VGV4dCIsImFuaW1hdGUiLCJwcm9ncmVzcyIsImNiIiwic3RvcCIsImRlc3Ryb3kiLCJwYXJlbnROb2RlIiwic2V0IiwibmV3VGV4dCIsIl9jcmVhdGVUZXh0Q29udGFpbmVyIiwiaW5uZXJIVE1MIiwiY3JlYXRlRWxlbWVudE5TIiwiX2luaXRpYWxpemVTdmciLCJ0cmFpbFBhdGgiLCJfY3JlYXRlVHJhaWwiLCJfY3JlYXRlUGF0aCIsInNldEF0dHJpYnV0ZSIsInBhdGhTdHJpbmciLCJfcGF0aFN0cmluZyIsIl9jcmVhdGVQYXRoRWxlbWVudCIsIl90cmFpbFN0cmluZyIsInRleHRDb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwidGV4dFN0eWxlIiwiX2luaXRpYWxpemVUZXh0Q29udGFpbmVyIiwiY29udGFpbmVyQXNwZWN0UmF0aW8iLCJjb21wdXRlZFN0eWxlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhcnNlRmxvYXQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiaGVpZ2h0IiwiY29uc29sZSIsIndhcm4iLCJpZCIsIlR3ZWVuYWJsZSIsIkVBU0lOR19BTElBU0VTIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsImR1cmF0aW9uIiwiZWFzaW5nIiwiZnJvbSIsInRvIiwic3RlcCIsIl90d2VlbmFibGUiLCJnZXRUb3RhbExlbmd0aCIsInN0cm9rZURhc2hhcnJheSIsIm9mZnNldCIsIl9nZXRDb21wdXRlZERhc2hPZmZzZXQiLCJ0b0ZpeGVkIiwic3Ryb2tlRGFzaG9mZnNldCIsIl9wcm9ncmVzc1RvT2Zmc2V0IiwiX2Vhc2luZyIsIl9jYWxjdWxhdGVUbyIsIl9zdG9wVHdlZW4iLCJwYXNzZWRPcHRzIiwiZGVmYXVsdE9wdHMiLCJzaGlmdHlFYXNpbmciLCJ2YWx1ZXMiLCJfcmVzb2x2ZUZyb21BbmRUbyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm5ld09mZnNldCIsInNlbGYiLCJ0d2VlbiIsInN0YXRlIiwicmVmZXJlbmNlIiwiZmluaXNoIiwiX2NhbGN1bGF0ZUZyb20iLCJpbnRlcnBvbGF0ZSIsIkNpcmNsZSIsIm9wdGlvbnMiLCJfcGF0aFRlbXBsYXRlIiwiYXBwbHkiLCJjb25zdHJ1Y3RvciIsIndpZHRoT2ZXaWRlciIsInJhZGl1cyIsIjJyYWRpdXMiLCJMaW5lIiwiU2VtaUNpcmNsZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJwcm9ncmVzc2Jhcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicHJvZ3Jlc3NiYXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwidXJpanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInVyaWpzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsInEiLCJVUkkiLCJzZWFyY2giLCJwYXJzZUludCIsIm51bWJlciIsImZpdFRleHQiLCJnZXRFbGVtZW50QnlJZCIsIlByb2dyZXNzQmFyIiwibG9nIiwiY29udGVudCIsImhtciIsImluc2VydEludG8iLCJsb2NhbHMiLCJwdXNoIiwidmVyc2lvbiIsInNvdXJjZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwiZmlsZSIsInNvdXJjZXNDb250ZW50IiwidXNlU291cmNlTWFwIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsImNvbmNhdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInRhcmdldCIsInBhcmVudCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsIm5vbmNlIiwibmMiLCJnZXROb25jZSIsImFkZEF0dHJzIiwia2V5cyIsImZvckVhY2giLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJkZWZhdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwidGVzdCIsImNlbnRlciIsInJvb3QiLCJGdW5jdGlvbiIsImZvcm11bGEiLCJERUZBVUxUX1NDSEVEVUxFX0ZVTkNUSU9OIiwidGltZW91dEhhbmRsZXJfZW5kVGltZSIsInRpbWVvdXRIYW5kbGVyX2N1cnJlbnRUaW1lIiwidGltZW91dEhhbmRsZXJfaXNFbmRlZCIsInRpbWVvdXRIYW5kbGVyX29mZnNldCIsIkRFRkFVTFRfRUFTSU5HIiwiVVBEQVRFX1RJTUUiLCJfbm93IiwiRGF0ZSIsIm5vdyIsIlNISUZUWV9ERUJVR19OT1ciLCJub29wIiwiZWFjaCIsInNoYWxsb3dDb3B5IiwidGFyZ2V0T2JqIiwic3JjT2JqIiwicHJvcCIsImRlZmF1bHRzIiwic3JjIiwidHdlZW5Qcm9wcyIsImZvclBvc2l0aW9uIiwiY3VycmVudFN0YXRlIiwib3JpZ2luYWxTdGF0ZSIsInRhcmdldFN0YXRlIiwidGltZXN0YW1wIiwiZWFzaW5nT2JqZWN0UHJvcCIsImVhc2luZ0ZuIiwibm9ybWFsaXplZFBvc2l0aW9uIiwidHdlZW5Qcm9wIiwic3RhcnQiLCJlbmQiLCJlYXNpbmdGdW5jIiwiYXBwbHlGaWx0ZXIiLCJ0d2VlbmFibGUiLCJmaWx0ZXJOYW1lIiwiZmlsdGVycyIsImFyZ3MiLCJfZmlsdGVyQXJncyIsInRpbWVvdXRIYW5kbGVyIiwiZGVsYXkiLCJzY2hlZHVsZSIsIm9wdF9jdXJyZW50VGltZU92ZXJyaWRlIiwibWluIiwiaXNQbGF5aW5nIiwiX2F0dGFjaG1lbnQiLCJfc2NoZWR1bGVJZCIsIl90aW1lb3V0SGFuZGxlciIsImNvbXBvc2VFYXNpbmdPYmplY3QiLCJmcm9tVHdlZW5QYXJhbXMiLCJjb21wb3NlZEVhc2luZyIsInR5cGVvZkVhc2luZyIsIm9wdF9pbml0aWFsU3RhdGUiLCJvcHRfY29uZmlnIiwiX2N1cnJlbnRTdGF0ZSIsIl9jb25maWd1cmVkIiwiX3NjaGVkdWxlRnVuY3Rpb24iLCJzZXRDb25maWciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiX2lzVHdlZW5pbmciLCJfdGltZXN0YW1wIiwiX3N0YXJ0IiwicmVzdW1lIiwiY29uZmlnIiwiX3BhdXNlZEF0VGltZSIsIl9kZWxheSIsIl9zdGVwIiwiX2ZpbmlzaCIsIl9kdXJhdGlvbiIsIl9vcmlnaW5hbFN0YXRlIiwiX3RhcmdldFN0YXRlIiwicGF1c2UiLCJfaXNQYXVzZWQiLCJzZWVrIiwibWlsbGlzZWNvbmQiLCJtYXgiLCJjdXJyZW50VGltZSIsImdvdG9FbmQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwib0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwibXNDYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsInNldFNjaGVkdWxlRnVuY3Rpb24iLCJzY2hlZHVsZUZ1bmN0aW9uIiwiZGlzcG9zZSIsImxpbmVhciIsInBvcyIsImVhc2VJblF1YWQiLCJwb3ciLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiUEkiLCJlYXNlT3V0U2luZSIsInNpbiIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsInNxcnQiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVsYXN0aWMiLCJzd2luZ0Zyb21UbyIsInN3aW5nRnJvbSIsInN3aW5nVG8iLCJib3VuY2UiLCJib3VuY2VQYXN0IiwiZWFzZUZyb21UbyIsImVhc2VGcm9tIiwiZWFzZVRvIiwiY3ViaWNCZXppZXJBdFRpbWUiLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJheCIsImJ4IiwiY3giLCJheSIsImJ5IiwiY3kiLCJzYW1wbGVDdXJ2ZVgiLCJmYWJzIiwieCIsImVwc2lsb24iLCJ0MCIsInQxIiwidDIiLCJ4MiIsImQyIiwic29sdmVDdXJ2ZVgiLCJzb2x2ZSIsInNvbHZlRXBzaWxvbiIsInNldEJlemllckZ1bmN0aW9uIiwieDEiLCJ5MSIsInkyIiwiY3ViaWNCZXppZXJUcmFuc2l0aW9uIiwiZ2V0Q3ViaWNCZXppZXJUcmFuc2l0aW9uIiwiZGlzcGxheU5hbWUiLCJ1bnNldEJlemllckZ1bmN0aW9uIiwibW9ja1R3ZWVuYWJsZSIsIm9wdF9kZWxheSIsImN1cnJlbnQiLCJlYXNpbmdPYmplY3QiLCJmaWx0ZXJBcmdzIiwiaW50ZXJwb2xhdGVkVmFsdWVzIiwiZ2V0SW50ZXJwb2xhdGVkVmFsdWVzIiwiUl9OVU1CRVJfQ09NUE9ORU5UIiwiUl9GT1JNQVRfQ0hVTktTIiwiUl9VTkZPUk1BVFRFRF9WQUxVRVMiLCJSX1JHQiIsIlJfUkdCX1BSRUZJWCIsIlJfSEVYIiwiVkFMVUVfUExBQ0VIT0xERVIiLCJnZXRGb3JtYXRDaHVua3NGcm9tIiwicmF3VmFsdWVzIiwiYWNjdW11bGF0b3IiLCJyYXdWYWx1ZXNMZW5ndGgiLCJzYW5pdGl6ZU9iamVjdEZvckhleFByb3BzIiwic3RhdGVPYmplY3QiLCJjdXJyZW50UHJvcCIsIm1hdGNoIiwiZmlsdGVyU3RyaW5nQ2h1bmtzIiwiY29udmVydEhleFRvUkdCIiwiaGV4U3RyaW5nIiwicmdiQXJyIiwiaGV4IiwiaGV4VG9SR0JBcnJheV9yZXR1cm5BcnJheSIsImhleFRvRGVjIiwic3Vic3RyIiwiaGV4VG9SR0JBcnJheSIsInBhdHRlcm4iLCJ1bmZpbHRlcmVkU3RyaW5nIiwicGF0dGVuTWF0Y2hlcyIsImZpbHRlcmVkU3RyaW5nIiwiY3VycmVudENodW5rIiwicGF0dGVuTWF0Y2hlc0xlbmd0aCIsInNoaWZ0Iiwic2FuaXRpemVSR0JDaHVuayIsInJnYkNodW5rIiwibnVtYmVycyIsIm51bWJlcnNMZW5ndGgiLCJzYW5pdGl6ZWRTdHJpbmciLCJleHBhbmRGb3JtYXR0ZWRQcm9wZXJ0aWVzIiwiZm9ybWF0TWFuaWZlc3RzIiwiZ2V0VmFsdWVzRnJvbSIsImNodW5rTmFtZXMiLCJjb2xsYXBzZUZvcm1hdHRlZFByb3BlcnRpZXMiLCJ2YWx1ZXNMaXN0IiwiZ2V0VmFsdWVzTGlzdF9hY2N1bXVsYXRvciIsImNodW5rTmFtZXNMZW5ndGgiLCJnZXRWYWx1ZXNMaXN0IiwiY3VycmVudENodW5rTmFtZSIsImV4dHJhY3RlZFZhbHVlcyIsImV4dHJhY3RQcm9wZXJ0eUNodW5rcyIsImZvcm1hdFN0cmluZyIsImZvcm1hdHRlZFZhbHVlU3RyaW5nIiwiZ2V0Rm9ybWF0dGVkVmFsdWVzIiwiZm9ybWF0dGVkU3RyaW5nIiwidG9rZW4iLCJ0d2VlbkNyZWF0ZWQiLCJmcm9tU3RhdGUiLCJ0b1N0YXRlIiwibWFuaWZlc3RBY2N1bXVsYXRvciIsIl90b2tlbkRhdGEiLCJjaHVua3MiLCJ1bnNoaWZ0IiwiYmVmb3JlVHdlZW4iLCJ0b2tlbkRhdGEiLCJjaHVua0xlbmd0aCIsImVhc2luZ0NodW5rcyIsImxhc3RFYXNpbmdDaHVuayIsImV4cGFuZEVhc2luZ09iamVjdCIsImFmdGVyVHdlZW4iLCJmaXJzdEVhc2luZyIsImNvbXBvc2VkRWFzaW5nU3RyaW5nIiwiY29sbGFwc2VFYXNpbmdPYmplY3QiLCJib3R0b20iLCJfZXh0ZW5kcyIsImFzc2lnbiIsInciLCJ0b0FycmF5IiwibmwiLCJEcmF3U3RhdGUiLCJJRExFIiwiRElSVFlfQ09OVEVOVCIsIkRJUlRZX0xBWU9VVCIsIkRJUlRZIiwiZml0dGllcyIsInJlZHJhd0ZyYW1lIiwicmVxdWVzdFJlZHJhdyIsInJlZHJhdyIsImYiLCJkaXJ0eSIsInJlZHJhd0FsbCIsInN0eWxlQ29tcHV0ZWQiLCJjb21wdXRlU3R5bGUiLCJzaG91bGRQcmVTdHlsZSIsImFwcGx5U3R5bGUiLCJmaXR0aWVzVG9SZWRyYXciLCJzaG91bGRSZWRyYXciLCJjYWxjdWxhdGVTdHlsZXMiLCJtYXJrQXNDbGVhbiIsImRpc3BhdGNoRml0RXZlbnQiLCJhdmFpbGFibGVXaWR0aCIsImNsaWVudFdpZHRoIiwiY3VycmVudFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJwcmV2aW91c0ZvbnRTaXplIiwiY3VycmVudEZvbnRTaXplIiwibWluU2l6ZSIsIm1heFNpemUiLCJ3aGl0ZVNwYWNlIiwibXVsdGlMaW5lIiwicHJlU3R5bGUiLCJwcmVTdHlsZVRlc3RDb21wbGV0ZWQiLCJvcmlnaW5hbFN0eWxlIiwiZ2V0QXR0cmlidXRlIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInNjYWxlRmFjdG9yIiwiZml0Iiwic3Vic2NyaWJlIiwibmV3YmllIiwidW5zdWJzY3JpYmUiLCJfIiwib2JzZXJ2ZU11dGF0aW9ucyIsIm9ic2VydmVyIiwiZGlzY29ubmVjdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGVmYXVsdE9wdGlvbnMiLCJzdWJ0cmVlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInJlc2l6ZURlYm91bmNlIiwib25XaW5kb3dSZXNpemVkIiwiZml0dHkiLCJvYnNlcnZlV2luZG93RGVsYXkiLCJldmVudHMiLCJlbmFibGVkIiwibWV0aG9kIiwib2JzZXJ2ZVdpbmRvdyIsImZpdEFsbCIsImZpdHR5Q3JlYXRlIiwiZWxlbWVudHMiLCJmaXR0eU9wdGlvbnMiLCJwdWJsaWNGaXR0aWVzIiwicXVlcnlTZWxlY3RvckFsbCIsImdsb2JhbCIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwibm9kZVR5cGUiLCJmcmVlR2xvYmFsIiwicHVueWNvZGUiLCJtYXhJbnQiLCJ0TWluIiwidE1heCIsInNrZXciLCJkYW1wIiwiaW5pdGlhbEJpYXMiLCJpbml0aWFsTiIsImRlbGltaXRlciIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiZXJyb3JzIiwib3ZlcmZsb3ciLCJub3QtYmFzaWMiLCJpbnZhbGlkLWlucHV0IiwiYmFzZU1pbnVzVE1pbiIsImZsb29yIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwiZnJvbUNoYXJDb2RlIiwiZXJyb3IiLCJSYW5nZUVycm9yIiwiYXJyYXkiLCJtYXBEb21haW4iLCJzdHJpbmciLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJvdXRwdXQiLCJjb3VudGVyIiwiY2hhckNvZGVBdCIsInVjczJlbmNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImZsYWciLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiayIsImRlY29kZSIsImlucHV0Iiwib3V0IiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImNvZGVQb2ludCIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImxhc3RJbmRleE9mIiwiZW5jb2RlIiwiaGFuZGxlZENQQ291bnQiLCJiYXNpY0xlbmd0aCIsImN1cnJlbnRWYWx1ZSIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInFNaW51c1QiLCJ1Y3MyIiwidG9BU0NJSSIsInRvVW5pY29kZSIsInRvTG93ZXJDYXNlIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiZmFjdG9yeSIsIl9JUHY2IiwiSVB2NiIsImJlc3QiLCJhZGRyZXNzIiwiX3NlZ21lbnRzIiwic2VnbWVudHMiLCJ0b3RhbCIsInBvcCIsIl9iZXN0IiwiX2N1cnJlbnQiLCJpbnplcm9lcyIsIm5vQ29uZmxpY3QiLCJfU2Vjb25kTGV2ZWxEb21haW5zIiwiU2Vjb25kTGV2ZWxEb21haW5zIiwiU0xEIiwiYWMiLCJhZSIsImFmIiwiYWwiLCJhbyIsImFyIiwiYXQiLCJhdSIsImJhIiwiYmIiLCJiaCIsImJuIiwiYm8iLCJiciIsImJzIiwiYnoiLCJjYSIsImNrIiwiY24iLCJjbyIsImNyIiwiZG8iLCJkeiIsImVjIiwiZWciLCJlciIsImVzIiwiZXQiLCJmaiIsImZrIiwiZnIiLCJnZyIsImdoIiwiZ24iLCJnciIsImd0IiwiZ3UiLCJoayIsImh1IiwiaWwiLCJpbiIsImlxIiwiaXIiLCJpdCIsImplIiwiam8iLCJqcCIsImtlIiwia2giLCJraSIsImttIiwia24iLCJrciIsImt3Iiwia3kiLCJreiIsImxiIiwibGsiLCJsciIsImx2IiwibHkiLCJtYSIsIm1jIiwibWUiLCJtZyIsIm1rIiwibWwiLCJtbiIsIm1vIiwibXQiLCJtdiIsIm13IiwibXgiLCJteSIsIm5mIiwibmciLCJuaSIsIm5wIiwibnIiLCJvbSIsInBlIiwicGgiLCJwayIsInBsIiwicHIiLCJwcyIsInB3Iiwicm8iLCJycyIsInNiIiwic2MiLCJzaCIsInNsIiwic3QiLCJzdiIsInN6IiwidHIiLCJ0dCIsInR3IiwibXUiLCJteiIsIm5hIiwibnoiLCJwYSIsInB0IiwicHkiLCJxYSIsInJlIiwicnUiLCJydyIsInNhIiwic2QiLCJzZSIsInNnIiwic24iLCJzeSIsInRoIiwidGoiLCJ0biIsInR6IiwidWEiLCJ1ZyIsInVrIiwidXMiLCJ1eSIsInZlIiwidmkiLCJ2biIsInllIiwieXUiLCJ6YSIsInptIiwiY29tIiwibmV0Iiwib3JnIiwiZGUiLCJoYXMiLCJkb21haW4iLCJ0bGRPZmZzZXQiLCJzbGRPZmZzZXQiLCJzbGRMaXN0IiwiaXMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX1VSSSIsInVybCIsIl91cmxTdXBwbGllZCIsIl9iYXNlU3VwcGxpZWQiLCJUeXBlRXJyb3IiLCJhYnNvbHV0ZVRvIiwiaGFzT3duIiwiZXNjYXBlUmVnRXgiLCJnZXRUeXBlIiwiZmlsdGVyQXJyYXlWYWx1ZXMiLCJkYXRhIiwibG9va3VwIiwiYXJyYXlDb250YWlucyIsIl90eXBlIiwiYXJyYXlzRXF1YWwiLCJvbmUiLCJ0d28iLCJzb3J0IiwidHJpbVNsYXNoZXMiLCJlc2NhcGVGb3JEdW1iRmlyZWZveDM2IiwiZXNjYXBlIiwic3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50IiwiX3BhcnRzIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImhvc3RuYW1lIiwidXJuIiwicG9ydCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJwcmV2ZW50SW52YWxpZEhvc3RuYW1lIiwiZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzIiwiZXNjYXBlUXVlcnlTcGFjZSIsInByb3RvY29sX2V4cHJlc3Npb24iLCJpZG5fZXhwcmVzc2lvbiIsInB1bnljb2RlX2V4cHJlc3Npb24iLCJpcDRfZXhwcmVzc2lvbiIsImlwNl9leHByZXNzaW9uIiwiZmluZF91cmlfZXhwcmVzc2lvbiIsImZpbmRVcmkiLCJwYXJlbnMiLCJkZWZhdWx0UG9ydHMiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJ3cyIsIndzcyIsImhvc3RQcm90b2NvbHMiLCJpbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMiLCJkb21BdHRyaWJ1dGVzIiwiYmxvY2txdW90ZSIsInNjcmlwdCIsImZvcm0iLCJpbWciLCJhcmVhIiwiaWZyYW1lIiwiZW1iZWQiLCJ0cmFjayIsImF1ZGlvIiwidmlkZW8iLCJnZXREb21BdHRyaWJ1dGUiLCJub2RlIiwibm9kZU5hbWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc284ODU5IiwidW5pY29kZSIsImNoYXJhY3RlcnMiLCJleHByZXNzaW9uIiwiJTI0IiwiJTI2IiwiJTJCIiwiJTJDIiwiJTNCIiwiJTNEIiwiJTNBIiwiJTQwIiwiLyIsIj8iLCIjIiwicmVzZXJ2ZWQiLCIlMkYiLCIlM0YiLCIlMjMiLCIlNUIiLCIlNUQiLCIlMjEiLCIlMjciLCIlMjgiLCIlMjkiLCIlMkEiLCJ1cm5wYXRoIiwiOiIsImVuY29kZVF1ZXJ5IiwiZXNjYXBlZCIsImRlY29kZVF1ZXJ5IiwiX3BhcnQiLCJnZW5lcmF0ZUFjY2Vzc29yIiwiX2dyb3VwIiwiZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24iLCJfc2VwIiwiX2NvZGluZ0Z1bmNOYW1lIiwiX2lubmVyQ29kaW5nRnVuY05hbWUiLCJhY3R1YWxDb2RpbmdGdW5jIiwiZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvciIsInYiLCJidWlsZCIsImdlbmVyYXRlUHJlZml4QWNjZXNzb3IiLCJfa2V5Iiwic3Vic3RyaW5nIiwiZGVjb2RlUGF0aCIsImRlY29kZVVyblBhdGgiLCJyZWNvZGVQYXRoIiwicmVjb2RlVXJuUGF0aCIsImVuY29kZVJlc2VydmVkIiwicGFyc2UiLCJwYXJzZUF1dGhvcml0eSIsInBhcnNlSG9zdCIsImJyYWNrZXRQb3MiLCJmaXJzdENvbG9uIiwiZmlyc3RTbGFzaCIsIm5leHRDb2xvbiIsImVuc3VyZVZhbGlkSG9zdG5hbWUiLCJlbnN1cmVWYWxpZFBvcnQiLCJwYXJzZVVzZXJpbmZvIiwicGFyc2VRdWVyeSIsIml0ZW1zIiwic3BsaXRzIiwiYnVpbGRBdXRob3JpdHkiLCJidWlsZEhvc3QiLCJidWlsZFVzZXJpbmZvIiwiYnVpbGRRdWVyeSIsInVuaXF1ZSIsImJ1aWxkUXVlcnlQYXJhbWV0ZXIiLCJhZGRRdWVyeSIsInNldFF1ZXJ5IiwicmVtb3ZlUXVlcnkiLCJoYXNRdWVyeSIsIndpdGhpbkFycmF5Iiwiam9pblBhdGhzIiwibm9uRW1wdHlTZWdtZW50cyIsInNlZ21lbnQiLCJ1cmkiLCJub3JtYWxpemUiLCJjb21tb25QYXRoIiwid2l0aGluU3RyaW5nIiwiX2VuZCIsIl90cmltIiwiX3BhcmVucyIsIl9hdHRyaWJ1dGVPcGVuIiwibGFzdEluZGV4IiwiZXhlYyIsImlnbm9yZUh0bWwiLCJhdHRyaWJ1dGVPcGVuIiwicGFyZW5zRW5kIiwicGFyZW5zTWF0Y2giLCJwYXJlbnNNYXRjaEVuZCIsImlnbm9yZSIsImhhc0hvc3RuYW1lIiwicmVqZWN0RW1wdHlIb3N0bmFtZSIsIk51bWJlciIsInJlbW92ZUFsbCIsInVuY29uZmxpY3RlZCIsIlVSSVRlbXBsYXRlIiwiZGVmZXJCdWlsZCIsIl9kZWZlcnJlZF9idWlsZCIsIl9zdHJpbmciLCJjbG9uZSIsInZhbHVlT2YiLCJoYXNoIiwicmVzIiwiX29iamVjdCIsIndoYXQiLCJpcCIsImlwNCIsImlwNiIsInNsZCIsImlkbiIsInJlbGF0aXZlIiwiX3Byb3RvY29sIiwiX3BvcnQiLCJfaG9zdG5hbWUiLCJzY2hlbWUiLCJvcmlnaW4iLCJhdXRob3JpdHkiLCJ1c2VyaW5mbyIsInJlc291cmNlIiwic3ViZG9tYWluIiwic3ViIiwidGxkIiwiUmVmZXJlbmNlRXJyb3IiLCJkaXJlY3RvcnkiLCJmaWxlbmFtZSIsImRlY29kZVBhdGhTZWdtZW50IiwibXV0YXRlZERpcmVjdG9yeSIsIm5vcm1hbGl6ZVBhdGgiLCJzdWZmaXgiLCJzZXBhcmF0b3IiLCJhYnNvbHV0ZSIsInNlZ21lbnRDb2RlZCIsInNldFNlYXJjaCIsImFkZFNlYXJjaCIsInJlbW92ZVNlYXJjaCIsImhhc1NlYXJjaCIsIm5vcm1hbGl6ZVByb3RvY29sIiwibm9ybWFsaXplUXVlcnkiLCJub3JtYWxpemVGcmFnbWVudCIsIm5vcm1hbGl6ZUhvc3RuYW1lIiwibm9ybWFsaXplUG9ydCIsIl93YXNfcmVsYXRpdmUiLCJfcGF0aCIsIl9wYXJlbnQiLCJfcG9zIiwiX2xlYWRpbmdQYXJlbnRzIiwibm9ybWFsaXplUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVhZGFibGUiLCJxcCIsImt2IiwiYmFzZWRpciIsInJlc29sdmVkIiwicHJvcGVydGllcyIsInJlbGF0aXZlVG8iLCJyZWxhdGl2ZVBhcnRzIiwiYmFzZVBhcnRzIiwiY29tbW9uIiwicmVsYXRpdmVQYXRoIiwiYmFzZVBhdGgiLCJwYXJlbnRzIiwiZXF1YWxzIiwib25lX21hcCIsInR3b19tYXAiLCJvbmVfcXVlcnkiLCJ0d29fcXVlcnkiLCJjaGVja2VkIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsImciLCJhZGRFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImtvbXByZXNzb3IiLCJzZXR0aW5ncyIsImV4dCIsIm1pbkZvbnRTaXplIiwibWF4Rm9udFNpemUiLCJjb21wcmVzc29yIiwicmVzaXplciIsImZvbnRTaXplIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVB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K0QsUUFBVSxTQUFVdkksRUFBSTBoQyxFQUFZdDZCLEdBRXpDLElBQUl1NkIsRUFUTyxTQUFTN2pDLEVBQUk4akMsR0FDeEIsSUFBSSxJQUFJcmxDLEtBQU9xbEMsRUFDVkEsRUFBSS9rQyxlQUFlTixLQUNwQnVCLEVBQUl2QixHQUFPcWxDLEVBQUlybEMsSUFDbkIsT0FBT3VCLEVBS1FLLENBQU8sQ0FDcEIwakMsYUFBZ0IsSUFDaEJDLFlBQWdCLEtBQ2hCMTZCLEdBRUV1YixFQUFNLFNBQVUzaUIsR0FDbEIsSUFBSStoQyxFQUFhTCxHQUFjLEVBRTNCTSxFQUFVLFdBQ1poaUMsRUFBRzNDLE1BQU00a0MsU0FBV3BpQyxLQUFLK1YsSUFBSS9WLEtBQUt5VCxJQUFJdFQsRUFBR3doQixhQUEwQixHQUFYdWdCLEdBQWdCcjlCLFdBQVdpOUIsRUFBU0csY0FBZXA5QixXQUFXaTlCLEVBQVNFLGNBQWdCLE1BSWpKRyxJQUtBVCxFQUFTLzhCLE9BQVEsU0FBVXc5QixHQUMzQlQsRUFBUy84QixPQUFRLG9CQUFxQnc5QixJQUd4QyxHQUFJaGlDLEVBQUd6QyxPQUNMLElBQUksSUFBSXZDLEVBQUUsRUFBR0EsRUFBRWdGLEVBQUd6QyxPQUFRdkMsSUFDeEIybkIsRUFBSTNpQixFQUFHaEYsU0FFVDJuQixFQUFJM2lCLEdBR04sT0FBT0EiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiLy8gVXRpbGl0eSBmdW5jdGlvbnNcblxudmFyIFBSRUZJWEVTID0gJ1dlYmtpdCBNb3ogTyBtcycuc3BsaXQoJyAnKTtcbnZhciBGTE9BVF9DT01QQVJJU09OX0VQU0lMT04gPSAwLjAwMTtcblxuLy8gQ29weSBhbGwgYXR0cmlidXRlcyBmcm9tIHNvdXJjZSBvYmplY3QgdG8gZGVzdGluYXRpb24gb2JqZWN0LlxuLy8gZGVzdGluYXRpb24gb2JqZWN0IGlzIG11dGF0ZWQuXG5mdW5jdGlvbiBleHRlbmQoZGVzdGluYXRpb24sIHNvdXJjZSwgcmVjdXJzaXZlKSB7XG4gICAgZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbiB8fCB7fTtcbiAgICBzb3VyY2UgPSBzb3VyY2UgfHwge307XG4gICAgcmVjdXJzaXZlID0gcmVjdXJzaXZlIHx8IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgZGVzdFZhbCA9IGRlc3RpbmF0aW9uW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIHZhciBzb3VyY2VWYWwgPSBzb3VyY2VbYXR0ck5hbWVdO1xuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSAmJiBpc09iamVjdChkZXN0VmFsKSAmJiBpc09iamVjdChzb3VyY2VWYWwpKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bYXR0ck5hbWVdID0gZXh0ZW5kKGRlc3RWYWwsIHNvdXJjZVZhbCwgcmVjdXJzaXZlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bYXR0ck5hbWVdID0gc291cmNlVmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xufVxuXG4vLyBSZW5kZXJzIHRlbXBsYXRlcyB3aXRoIGdpdmVuIHZhcmlhYmxlcy4gVmFyaWFibGVzIG11c3QgYmUgc3Vycm91bmRlZCB3aXRoXG4vLyBicmFjZXMgd2l0aG91dCBhbnkgc3BhY2VzLCBlLmcuIHt2YXJpYWJsZX1cbi8vIEFsbCBpbnN0YW5jZXMgb2YgdmFyaWFibGUgcGxhY2Vob2xkZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBnaXZlbiBjb250ZW50XG4vLyBFeGFtcGxlOlxuLy8gcmVuZGVyKCdIZWxsbywge21lc3NhZ2V9IScsIHttZXNzYWdlOiAnd29ybGQnfSlcbmZ1bmN0aW9uIHJlbmRlcih0ZW1wbGF0ZSwgdmFycykge1xuICAgIHZhciByZW5kZXJlZCA9IHRlbXBsYXRlO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHZhcnMpIHtcbiAgICAgICAgaWYgKHZhcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdmFyIHZhbCA9IHZhcnNba2V5XTtcbiAgICAgICAgICAgIHZhciByZWdFeHBTdHJpbmcgPSAnXFxcXHsnICsga2V5ICsgJ1xcXFx9JztcbiAgICAgICAgICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKHJlZ0V4cFN0cmluZywgJ2cnKTtcblxuICAgICAgICAgICAgcmVuZGVyZWQgPSByZW5kZXJlZC5yZXBsYWNlKHJlZ0V4cCwgdmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZW5kZXJlZDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUoZWxlbWVudCwgc3R5bGUsIHZhbHVlKSB7XG4gICAgdmFyIGVsU3R5bGUgPSBlbGVtZW50LnN0eWxlOyAgLy8gY2FjaGUgZm9yIHBlcmZvcm1hbmNlXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFBSRUZJWEVTLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSBQUkVGSVhFU1tpXTtcbiAgICAgICAgZWxTdHlsZVtwcmVmaXggKyBjYXBpdGFsaXplKHN0eWxlKV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBlbFN0eWxlW3N0eWxlXSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gICAgZm9yRWFjaE9iamVjdChzdHlsZXMsIGZ1bmN0aW9uKHN0eWxlVmFsdWUsIHN0eWxlTmFtZSkge1xuICAgICAgICAvLyBBbGxvdyBkaXNhYmxpbmcgc29tZSBpbmRpdmlkdWFsIHN0eWxlcyBieSBzZXR0aW5nIHRoZW1cbiAgICAgICAgLy8gdG8gbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgaWYgKHN0eWxlVmFsdWUgPT09IG51bGwgfHwgc3R5bGVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBzdHlsZSdzIHZhbHVlIGlzIHtwcmVmaXg6IHRydWUsIHZhbHVlOiAnNTAlJ30sXG4gICAgICAgIC8vIFNldCBhbHNvIGJyb3dzZXIgcHJlZml4ZWQgc3R5bGVzXG4gICAgICAgIGlmIChpc09iamVjdChzdHlsZVZhbHVlKSAmJiBzdHlsZVZhbHVlLnByZWZpeCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2V0U3R5bGUoZWxlbWVudCwgc3R5bGVOYW1lLCBzdHlsZVZhbHVlLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnNsaWNlKDEpO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycgfHwgb2JqIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIGBvYmpgIGlzIG9iamVjdCBhcyBpbiB7YTogMSwgYjogMn0sIG5vdCBpZiBpdCdzIGZ1bmN0aW9uIG9yXG4vLyBhcnJheVxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIHJldHVybiB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaE9iamVjdChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHZhbCwga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZmxvYXRFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiBNYXRoLmFicyhhIC0gYikgPCBGTE9BVF9DT01QQVJJU09OX0VQU0lMT047XG59XG5cbi8vIGh0dHBzOi8vY29kZXJ3YWxsLmNvbS9wL255Z2dody9kb24tdC11c2UtaW5uZXJodG1sLXRvLWVtcHR5LWRvbS1lbGVtZW50c1xuZnVuY3Rpb24gcmVtb3ZlQ2hpbGRyZW4oZWwpIHtcbiAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIHJlbmRlcjogcmVuZGVyLFxuICAgIHNldFN0eWxlOiBzZXRTdHlsZSxcbiAgICBzZXRTdHlsZXM6IHNldFN0eWxlcyxcbiAgICBjYXBpdGFsaXplOiBjYXBpdGFsaXplLFxuICAgIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICAgIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgICBmb3JFYWNoT2JqZWN0OiBmb3JFYWNoT2JqZWN0LFxuICAgIGZsb2F0RXF1YWxzOiBmbG9hdEVxdWFscyxcbiAgICByZW1vdmVDaGlsZHJlbjogcmVtb3ZlQ2hpbGRyZW5cbn07XG4iLCIvLyBCYXNlIG9iamVjdCBmb3IgZGlmZmVyZW50IHByb2dyZXNzIGJhciBzaGFwZXNcblxudmFyIFBhdGggPSByZXF1aXJlKCcuL3BhdGgnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIERFU1RST1lFRF9FUlJPUiA9ICdPYmplY3QgaXMgZGVzdHJveWVkJztcblxudmFyIFNoYXBlID0gZnVuY3Rpb24gU2hhcGUoY29udGFpbmVyLCBvcHRzKSB7XG4gICAgLy8gVGhyb3cgYSBiZXR0ZXIgZXJyb3IgaWYgcHJvZ3Jlc3MgYmFycyBhcmUgbm90IGluaXRpYWxpemVkIHdpdGggYG5ld2BcbiAgICAvLyBrZXl3b3JkXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNoYXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnN0cnVjdG9yIHdhcyBjYWxsZWQgd2l0aG91dCBuZXcga2V5d29yZCcpO1xuICAgIH1cblxuICAgIC8vIFByZXZlbnQgY2FsbGluZyBjb25zdHJ1Y3RvciB3aXRob3V0IHBhcmFtZXRlcnMgc28gaW5oZXJpdGFuY2VcbiAgICAvLyB3b3JrcyBjb3JyZWN0bHkuIFRvIHVuZGVyc3RhbmQsIHRoaXMgaXMgaG93IFNoYXBlIGlzIGluaGVyaXRlZDpcbiAgICAvL1xuICAgIC8vICAgTGluZS5wcm90b3R5cGUgPSBuZXcgU2hhcGUoKTtcbiAgICAvL1xuICAgIC8vIFdlIGp1c3Qgd2FudCB0byBzZXQgdGhlIHByb3RvdHlwZSBmb3IgTGluZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBwYXJhbWV0ZXJzIGZvciBwcm9ncmVzcyBiYXIgY3JlYXRpb25cbiAgICB0aGlzLl9vcHRzID0gdXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgY29sb3I6ICcjNTU1JyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDEuMCxcbiAgICAgICAgdHJhaWxDb2xvcjogbnVsbCxcbiAgICAgICAgdHJhaWxXaWR0aDogbnVsbCxcbiAgICAgICAgZmlsbDogbnVsbCxcbiAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybToge1xuICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdXRvU3R5bGVDb250YWluZXI6IHRydWUsXG4gICAgICAgICAgICBhbGlnblRvQm90dG9tOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdwcm9ncmVzc2Jhci10ZXh0J1xuICAgICAgICB9LFxuICAgICAgICBzdmdTdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICAgICAgfSxcbiAgICAgICAgd2FybmluZ3M6IGZhbHNlXG4gICAgfSwgb3B0cywgdHJ1ZSk7ICAvLyBVc2UgcmVjdXJzaXZlIGV4dGVuZFxuXG4gICAgLy8gSWYgdXNlciBzcGVjaWZpZXMgZS5nLiBzdmdTdHlsZSBvciB0ZXh0IHN0eWxlLCB0aGUgd2hvbGUgb2JqZWN0XG4gICAgLy8gc2hvdWxkIHJlcGxhY2UgdGhlIGRlZmF1bHRzIHRvIG1ha2Ugd29ya2luZyB3aXRoIHN0eWxlcyBlYXNpZXJcbiAgICBpZiAodXRpbHMuaXNPYmplY3Qob3B0cykgJiYgb3B0cy5zdmdTdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX29wdHMuc3ZnU3R5bGUgPSBvcHRzLnN2Z1N0eWxlO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3Qob3B0cykgJiYgdXRpbHMuaXNPYmplY3Qob3B0cy50ZXh0KSAmJiBvcHRzLnRleHQuc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9vcHRzLnRleHQuc3R5bGUgPSBvcHRzLnRleHQuc3R5bGU7XG4gICAgfVxuXG4gICAgdmFyIHN2Z1ZpZXcgPSB0aGlzLl9jcmVhdGVTdmdWaWV3KHRoaXMuX29wdHMpO1xuXG4gICAgdmFyIGVsZW1lbnQ7XG4gICAgaWYgKHV0aWxzLmlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gY29udGFpbmVyO1xuICAgIH1cblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRhaW5lciBkb2VzIG5vdCBleGlzdDogJyArIGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgdGhpcy5fY29udGFpbmVyID0gZWxlbWVudDtcbiAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnVmlldy5zdmcpO1xuICAgIGlmICh0aGlzLl9vcHRzLndhcm5pbmdzKSB7XG4gICAgICAgIHRoaXMuX3dhcm5Db250YWluZXJBc3BlY3RSYXRpbyh0aGlzLl9jb250YWluZXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9vcHRzLnN2Z1N0eWxlKSB7XG4gICAgICAgIHV0aWxzLnNldFN0eWxlcyhzdmdWaWV3LnN2ZywgdGhpcy5fb3B0cy5zdmdTdHlsZSk7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHB1YmxpYyBhdHRyaWJ1dGVzIGJlZm9yZSBQYXRoIGluaXRpYWxpemF0aW9uXG4gICAgdGhpcy5zdmcgPSBzdmdWaWV3LnN2ZztcbiAgICB0aGlzLnBhdGggPSBzdmdWaWV3LnBhdGg7XG4gICAgdGhpcy50cmFpbCA9IHN2Z1ZpZXcudHJhaWw7XG4gICAgdGhpcy50ZXh0ID0gbnVsbDtcblxuICAgIHZhciBuZXdPcHRzID0gdXRpbHMuZXh0ZW5kKHtcbiAgICAgICAgYXR0YWNobWVudDogdW5kZWZpbmVkLFxuICAgICAgICBzaGFwZTogdGhpc1xuICAgIH0sIHRoaXMuX29wdHMpO1xuICAgIHRoaXMuX3Byb2dyZXNzUGF0aCA9IG5ldyBQYXRoKHN2Z1ZpZXcucGF0aCwgbmV3T3B0cyk7XG5cbiAgICBpZiAodXRpbHMuaXNPYmplY3QodGhpcy5fb3B0cy50ZXh0KSAmJiB0aGlzLl9vcHRzLnRleHQudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXRUZXh0KHRoaXMuX29wdHMudGV4dC52YWx1ZSk7XG4gICAgfVxufTtcblxuU2hhcGUucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbiBhbmltYXRlKHByb2dyZXNzLCBvcHRzLCBjYikge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgdGhpcy5fcHJvZ3Jlc3NQYXRoLmFuaW1hdGUocHJvZ3Jlc3MsIG9wdHMsIGNiKTtcbn07XG5cblNoYXBlLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAodGhpcy5fcHJvZ3Jlc3NQYXRoID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihERVNUUk9ZRURfRVJST1IpO1xuICAgIH1cblxuICAgIC8vIERvbid0IGNyYXNoIGlmIHN0b3AgaXMgY2FsbGVkIGluc2lkZSBzdGVwIGZ1bmN0aW9uXG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9wcm9ncmVzc1BhdGguc3RvcCgpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgdGhpcy5zdG9wKCk7XG4gICAgdGhpcy5zdmcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnN2Zyk7XG4gICAgdGhpcy5zdmcgPSBudWxsO1xuICAgIHRoaXMucGF0aCA9IG51bGw7XG4gICAgdGhpcy50cmFpbCA9IG51bGw7XG4gICAgdGhpcy5fcHJvZ3Jlc3NQYXRoID0gbnVsbDtcblxuICAgIGlmICh0aGlzLnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy50ZXh0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50ZXh0KTtcbiAgICAgICAgdGhpcy50ZXh0ID0gbnVsbDtcbiAgICB9XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KHByb2dyZXNzKSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoREVTVFJPWUVEX0VSUk9SKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wcm9ncmVzc1BhdGguc2V0KHByb2dyZXNzKTtcbn07XG5cblNoYXBlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgIGlmICh0aGlzLl9wcm9ncmVzc1BhdGggPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKERFU1RST1lFRF9FUlJPUik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9wcm9ncmVzc1BhdGgudmFsdWUoKTtcbn07XG5cblNoYXBlLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gc2V0VGV4dChuZXdUZXh0KSB7XG4gICAgaWYgKHRoaXMuX3Byb2dyZXNzUGF0aCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoREVTVFJPWUVEX0VSUk9SKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgdGV4dCBub2RlXG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuX2NyZWF0ZVRleHRDb250YWluZXIodGhpcy5fb3B0cywgdGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHByZXZpb3VzIHRleHQgYW5kIGFkZCBuZXdcbiAgICBpZiAodXRpbHMuaXNPYmplY3QobmV3VGV4dCkpIHtcbiAgICAgICAgdXRpbHMucmVtb3ZlQ2hpbGRyZW4odGhpcy50ZXh0KTtcbiAgICAgICAgdGhpcy50ZXh0LmFwcGVuZENoaWxkKG5ld1RleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dC5pbm5lckhUTUwgPSBuZXdUZXh0O1xuICAgIH1cbn07XG5cblNoYXBlLnByb3RvdHlwZS5fY3JlYXRlU3ZnVmlldyA9IGZ1bmN0aW9uIF9jcmVhdGVTdmdWaWV3KG9wdHMpIHtcbiAgICB2YXIgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICB0aGlzLl9pbml0aWFsaXplU3ZnKHN2Zywgb3B0cyk7XG5cbiAgICB2YXIgdHJhaWxQYXRoID0gbnVsbDtcbiAgICAvLyBFYWNoIG9wdGlvbiBsaXN0ZWQgaW4gdGhlIGlmIGNvbmRpdGlvbiBhcmUgJ3RyaWdnZXJzJyBmb3IgY3JlYXRpbmdcbiAgICAvLyB0aGUgdHJhaWwgcGF0aFxuICAgIGlmIChvcHRzLnRyYWlsQ29sb3IgfHwgb3B0cy50cmFpbFdpZHRoKSB7XG4gICAgICAgIHRyYWlsUGF0aCA9IHRoaXMuX2NyZWF0ZVRyYWlsKG9wdHMpO1xuICAgICAgICBzdmcuYXBwZW5kQ2hpbGQodHJhaWxQYXRoKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aCA9IHRoaXMuX2NyZWF0ZVBhdGgob3B0cyk7XG4gICAgc3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3ZnOiBzdmcsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHRyYWlsOiB0cmFpbFBhdGhcbiAgICB9O1xufTtcblxuU2hhcGUucHJvdG90eXBlLl9pbml0aWFsaXplU3ZnID0gZnVuY3Rpb24gX2luaXRpYWxpemVTdmcoc3ZnLCBvcHRzKSB7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwIDEwMCcpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl9jcmVhdGVQYXRoID0gZnVuY3Rpb24gX2NyZWF0ZVBhdGgob3B0cykge1xuICAgIHZhciBwYXRoU3RyaW5nID0gdGhpcy5fcGF0aFN0cmluZyhvcHRzKTtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlUGF0aEVsZW1lbnQocGF0aFN0cmluZywgb3B0cyk7XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuX2NyZWF0ZVRyYWlsID0gZnVuY3Rpb24gX2NyZWF0ZVRyYWlsKG9wdHMpIHtcbiAgICAvLyBDcmVhdGUgcGF0aCBzdHJpbmcgd2l0aCBvcmlnaW5hbCBwYXNzZWQgb3B0aW9uc1xuICAgIHZhciBwYXRoU3RyaW5nID0gdGhpcy5fdHJhaWxTdHJpbmcob3B0cyk7XG5cbiAgICAvLyBQcmV2ZW50IG1vZGlmeWluZyBvcmlnaW5hbFxuICAgIHZhciBuZXdPcHRzID0gdXRpbHMuZXh0ZW5kKHt9LCBvcHRzKTtcblxuICAgIC8vIERlZmF1bHRzIGZvciBwYXJhbWV0ZXJzIHdoaWNoIG1vZGlmeSB0cmFpbCBwYXRoXG4gICAgaWYgKCFuZXdPcHRzLnRyYWlsQ29sb3IpIHtcbiAgICAgICAgbmV3T3B0cy50cmFpbENvbG9yID0gJyNlZWUnO1xuICAgIH1cbiAgICBpZiAoIW5ld09wdHMudHJhaWxXaWR0aCkge1xuICAgICAgICBuZXdPcHRzLnRyYWlsV2lkdGggPSBuZXdPcHRzLnN0cm9rZVdpZHRoO1xuICAgIH1cblxuICAgIG5ld09wdHMuY29sb3IgPSBuZXdPcHRzLnRyYWlsQ29sb3I7XG4gICAgbmV3T3B0cy5zdHJva2VXaWR0aCA9IG5ld09wdHMudHJhaWxXaWR0aDtcblxuICAgIC8vIFdoZW4gdHJhaWwgcGF0aCBpcyBzZXQsIGZpbGwgbXVzdCBiZSBzZXQgZm9yIGl0IGluc3RlYWQgb2YgdGhlXG4gICAgLy8gYWN0dWFsIHBhdGggdG8gcHJldmVudCB0cmFpbCBzdHJva2UgZnJvbSBjbGlwcGluZ1xuICAgIG5ld09wdHMuZmlsbCA9IG51bGw7XG5cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlUGF0aEVsZW1lbnQocGF0aFN0cmluZywgbmV3T3B0cyk7XG59O1xuXG5TaGFwZS5wcm90b3R5cGUuX2NyZWF0ZVBhdGhFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZVBhdGhFbGVtZW50KHBhdGhTdHJpbmcsIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgcGF0aFN0cmluZyk7XG4gICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIG9wdHMuY29sb3IpO1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBvcHRzLnN0cm9rZVdpZHRoKTtcblxuICAgIGlmIChvcHRzLmZpbGwpIHtcbiAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBvcHRzLmZpbGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMCcpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl9jcmVhdGVUZXh0Q29udGFpbmVyID0gZnVuY3Rpb24gX2NyZWF0ZVRleHRDb250YWluZXIob3B0cywgY29udGFpbmVyKSB7XG4gICAgdmFyIHRleHRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0ZXh0Q29udGFpbmVyLmNsYXNzTmFtZSA9IG9wdHMudGV4dC5jbGFzc05hbWU7XG5cbiAgICB2YXIgdGV4dFN0eWxlID0gb3B0cy50ZXh0LnN0eWxlO1xuICAgIGlmICh0ZXh0U3R5bGUpIHtcbiAgICAgICAgaWYgKG9wdHMudGV4dC5hdXRvU3R5bGVDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIH1cblxuICAgICAgICB1dGlscy5zZXRTdHlsZXModGV4dENvbnRhaW5lciwgdGV4dFN0eWxlKTtcbiAgICAgICAgLy8gRGVmYXVsdCB0ZXh0IGNvbG9yIHRvIHByb2dyZXNzIGJhcidzIGNvbG9yXG4gICAgICAgIGlmICghdGV4dFN0eWxlLmNvbG9yKSB7XG4gICAgICAgICAgICB0ZXh0Q29udGFpbmVyLnN0eWxlLmNvbG9yID0gb3B0cy5jb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXRpYWxpemVUZXh0Q29udGFpbmVyKG9wdHMsIGNvbnRhaW5lciwgdGV4dENvbnRhaW5lcik7XG4gICAgcmV0dXJuIHRleHRDb250YWluZXI7XG59O1xuXG4vLyBHaXZlIGN1c3RvbSBzaGFwZXMgcG9zc2liaWxpdHkgdG8gbW9kaWZ5IHRleHQgZWxlbWVudFxuU2hhcGUucHJvdG90eXBlLl9pbml0aWFsaXplVGV4dENvbnRhaW5lciA9IGZ1bmN0aW9uKG9wdHMsIGNvbnRhaW5lciwgZWxlbWVudCkge1xuICAgIC8vIEJ5IGRlZmF1bHQsIG5vLW9wXG4gICAgLy8gQ3VzdG9tIHNoYXBlcyBzaG91bGQgcmVzcGVjdCBBUEkgb3B0aW9ucywgc3VjaCBhcyB0ZXh0LnN0eWxlXG59O1xuXG5TaGFwZS5wcm90b3R5cGUuX3BhdGhTdHJpbmcgPSBmdW5jdGlvbiBfcGF0aFN0cmluZyhvcHRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhcicpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl90cmFpbFN0cmluZyA9IGZ1bmN0aW9uIF90cmFpbFN0cmluZyhvcHRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhcicpO1xufTtcblxuU2hhcGUucHJvdG90eXBlLl93YXJuQ29udGFpbmVyQXNwZWN0UmF0aW8gPSBmdW5jdGlvbiBfd2FybkNvbnRhaW5lckFzcGVjdFJhdGlvKGNvbnRhaW5lcikge1xuICAgIGlmICghdGhpcy5jb250YWluZXJBc3BlY3RSYXRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIsIG51bGwpO1xuICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpLCAxMCk7XG4gICAgdmFyIGhlaWdodCA9IHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSwgMTApO1xuICAgIGlmICghdXRpbHMuZmxvYXRFcXVhbHModGhpcy5jb250YWluZXJBc3BlY3RSYXRpbywgd2lkdGggLyBoZWlnaHQpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdJbmNvcnJlY3QgYXNwZWN0IHJhdGlvIG9mIGNvbnRhaW5lcicsXG4gICAgICAgICAgICAnIycgKyBjb250YWluZXIuaWQsXG4gICAgICAgICAgICAnZGV0ZWN0ZWQ6JyxcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSArICcod2lkdGgpJyxcbiAgICAgICAgICAgICcvJyxcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykgKyAnKGhlaWdodCknLFxuICAgICAgICAgICAgJz0nLFxuICAgICAgICAgICAgd2lkdGggLyBoZWlnaHRcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAnQXNwZWN0IHJhdGlvIG9mIHNob3VsZCBiZScsXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckFzcGVjdFJhdGlvXG4gICAgICAgICk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaGFwZTtcbiIsIi8vIExvd2VyIGxldmVsIEFQSSB0byBhbmltYXRlIGFueSBraW5kIG9mIHN2ZyBwYXRoXG5cbnZhciBUd2VlbmFibGUgPSByZXF1aXJlKCdzaGlmdHknKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEVBU0lOR19BTElBU0VTID0ge1xuICAgIGVhc2VJbjogJ2Vhc2VJbkN1YmljJyxcbiAgICBlYXNlT3V0OiAnZWFzZU91dEN1YmljJyxcbiAgICBlYXNlSW5PdXQ6ICdlYXNlSW5PdXRDdWJpYydcbn07XG5cbnZhciBQYXRoID0gZnVuY3Rpb24gUGF0aChwYXRoLCBvcHRzKSB7XG4gICAgLy8gVGhyb3cgYSBiZXR0ZXIgZXJyb3IgaWYgbm90IGluaXRpYWxpemVkIHdpdGggYG5ld2Aga2V5d29yZFxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnN0cnVjdG9yIHdhcyBjYWxsZWQgd2l0aG91dCBuZXcga2V5d29yZCcpO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgcGFyYW1ldGVycyBmb3IgYW5pbWF0aW9uXG4gICAgb3B0cyA9IHV0aWxzLmV4dGVuZCh7XG4gICAgICAgIGR1cmF0aW9uOiA4MDAsXG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGZyb206IHt9LFxuICAgICAgICB0bzoge30sXG4gICAgICAgIHN0ZXA6IGZ1bmN0aW9uKCkge31cbiAgICB9LCBvcHRzKTtcblxuICAgIHZhciBlbGVtZW50O1xuICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gcGF0aDtcbiAgICB9XG5cbiAgICAvLyBSZXZlYWwgLnBhdGggYXMgcHVibGljIGF0dHJpYnV0ZVxuICAgIHRoaXMucGF0aCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5fb3B0cyA9IG9wdHM7XG4gICAgdGhpcy5fdHdlZW5hYmxlID0gbnVsbDtcblxuICAgIC8vIFNldCB1cCB0aGUgc3RhcnRpbmcgcG9zaXRpb25zXG4gICAgdmFyIGxlbmd0aCA9IHRoaXMucGF0aC5nZXRUb3RhbExlbmd0aCgpO1xuICAgIHRoaXMucGF0aC5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBsZW5ndGggKyAnICcgKyBsZW5ndGg7XG4gICAgdGhpcy5zZXQoMCk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9nZXRDb21wdXRlZERhc2hPZmZzZXQoKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5wYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG5cbiAgICB2YXIgcHJvZ3Jlc3MgPSAxIC0gb2Zmc2V0IC8gbGVuZ3RoO1xuICAgIC8vIFJvdW5kIG51bWJlciB0byBwcmV2ZW50IHJldHVybmluZyB2ZXJ5IHNtYWxsIG51bWJlciBsaWtlIDFlLTMwLCB3aGljaFxuICAgIC8vIGlzIHByYWN0aWNhbGx5IDBcbiAgICByZXR1cm4gcGFyc2VGbG9hdChwcm9ncmVzcy50b0ZpeGVkKDYpLCAxMCk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQocHJvZ3Jlc3MpIHtcbiAgICB0aGlzLnN0b3AoKTtcblxuICAgIHRoaXMucGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gdGhpcy5fcHJvZ3Jlc3NUb09mZnNldChwcm9ncmVzcyk7XG5cbiAgICB2YXIgc3RlcCA9IHRoaXMuX29wdHMuc3RlcDtcbiAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihzdGVwKSkge1xuICAgICAgICB2YXIgZWFzaW5nID0gdGhpcy5fZWFzaW5nKHRoaXMuX29wdHMuZWFzaW5nKTtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuX2NhbGN1bGF0ZVRvKHByb2dyZXNzLCBlYXNpbmcpO1xuICAgICAgICB2YXIgcmVmZXJlbmNlID0gdGhpcy5fb3B0cy5zaGFwZSB8fCB0aGlzO1xuICAgICAgICBzdGVwKHZhbHVlcywgcmVmZXJlbmNlLCB0aGlzLl9vcHRzLmF0dGFjaG1lbnQpO1xuICAgIH1cbn07XG5cblBhdGgucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHRoaXMuX3N0b3BUd2VlbigpO1xuICAgIHRoaXMucGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gdGhpcy5fZ2V0Q29tcHV0ZWREYXNoT2Zmc2V0KCk7XG59O1xuXG4vLyBNZXRob2QgaW50cm9kdWNlZCBoZXJlOlxuLy8gaHR0cDovL2pha2VhcmNoaWJhbGQuY29tLzIwMTMvYW5pbWF0ZWQtbGluZS1kcmF3aW5nLXN2Zy9cblBhdGgucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbiBhbmltYXRlKHByb2dyZXNzLCBvcHRzLCBjYikge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ob3B0cykpIHtcbiAgICAgICAgY2IgPSBvcHRzO1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHBhc3NlZE9wdHMgPSB1dGlscy5leHRlbmQoe30sIG9wdHMpO1xuXG4gICAgLy8gQ29weSBkZWZhdWx0IG9wdHMgdG8gbmV3IG9iamVjdCBzbyBkZWZhdWx0cyBhcmUgbm90IG1vZGlmaWVkXG4gICAgdmFyIGRlZmF1bHRPcHRzID0gdXRpbHMuZXh0ZW5kKHt9LCB0aGlzLl9vcHRzKTtcbiAgICBvcHRzID0gdXRpbHMuZXh0ZW5kKGRlZmF1bHRPcHRzLCBvcHRzKTtcblxuICAgIHZhciBzaGlmdHlFYXNpbmcgPSB0aGlzLl9lYXNpbmcob3B0cy5lYXNpbmcpO1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLl9yZXNvbHZlRnJvbUFuZFRvKHByb2dyZXNzLCBzaGlmdHlFYXNpbmcsIHBhc3NlZE9wdHMpO1xuXG4gICAgdGhpcy5zdG9wKCk7XG5cbiAgICAvLyBUcmlnZ2VyIGEgbGF5b3V0IHNvIHN0eWxlcyBhcmUgY2FsY3VsYXRlZCAmIHRoZSBicm93c2VyXG4gICAgLy8gcGlja3MgdXAgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIGJlZm9yZSBhbmltYXRpbmdcbiAgICB0aGlzLnBhdGguZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fZ2V0Q29tcHV0ZWREYXNoT2Zmc2V0KCk7XG4gICAgdmFyIG5ld09mZnNldCA9IHRoaXMuX3Byb2dyZXNzVG9PZmZzZXQocHJvZ3Jlc3MpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX3R3ZWVuYWJsZSA9IG5ldyBUd2VlbmFibGUoKTtcbiAgICB0aGlzLl90d2VlbmFibGUudHdlZW4oe1xuICAgICAgICBmcm9tOiB1dGlscy5leHRlbmQoeyBvZmZzZXQ6IG9mZnNldCB9LCB2YWx1ZXMuZnJvbSksXG4gICAgICAgIHRvOiB1dGlscy5leHRlbmQoeyBvZmZzZXQ6IG5ld09mZnNldCB9LCB2YWx1ZXMudG8pLFxuICAgICAgICBkdXJhdGlvbjogb3B0cy5kdXJhdGlvbixcbiAgICAgICAgZWFzaW5nOiBzaGlmdHlFYXNpbmcsXG4gICAgICAgIHN0ZXA6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgICAgICBzZWxmLnBhdGguc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IHN0YXRlLm9mZnNldDtcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2UgPSBvcHRzLnNoYXBlIHx8IHNlbGY7XG4gICAgICAgICAgICBvcHRzLnN0ZXAoc3RhdGUsIHJlZmVyZW5jZSwgb3B0cy5hdHRhY2htZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluaXNoOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oY2IpKSB7XG4gICAgICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuUGF0aC5wcm90b3R5cGUuX2dldENvbXB1dGVkRGFzaE9mZnNldCA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZERhc2hPZmZzZXQoKSB7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnBhdGgsIG51bGwpO1xuICAgIHJldHVybiBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKSwgMTApO1xufTtcblxuUGF0aC5wcm90b3R5cGUuX3Byb2dyZXNzVG9PZmZzZXQgPSBmdW5jdGlvbiBfcHJvZ3Jlc3NUb09mZnNldChwcm9ncmVzcykge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLnBhdGguZ2V0VG90YWxMZW5ndGgoKTtcbiAgICByZXR1cm4gbGVuZ3RoIC0gcHJvZ3Jlc3MgKiBsZW5ndGg7XG59O1xuXG4vLyBSZXNvbHZlcyBmcm9tIGFuZCB0byB2YWx1ZXMgZm9yIGFuaW1hdGlvbi5cblBhdGgucHJvdG90eXBlLl9yZXNvbHZlRnJvbUFuZFRvID0gZnVuY3Rpb24gX3Jlc29sdmVGcm9tQW5kVG8ocHJvZ3Jlc3MsIGVhc2luZywgb3B0cykge1xuICAgIGlmIChvcHRzLmZyb20gJiYgb3B0cy50bykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbTogb3B0cy5mcm9tLFxuICAgICAgICAgICAgdG86IG9wdHMudG9cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmcm9tOiB0aGlzLl9jYWxjdWxhdGVGcm9tKGVhc2luZyksXG4gICAgICAgIHRvOiB0aGlzLl9jYWxjdWxhdGVUbyhwcm9ncmVzcywgZWFzaW5nKVxuICAgIH07XG59O1xuXG4vLyBDYWxjdWxhdGUgYGZyb21gIHZhbHVlcyBmcm9tIG9wdGlvbnMgcGFzc2VkIGF0IGluaXRpYWxpemF0aW9uXG5QYXRoLnByb3RvdHlwZS5fY2FsY3VsYXRlRnJvbSA9IGZ1bmN0aW9uIF9jYWxjdWxhdGVGcm9tKGVhc2luZykge1xuICAgIHJldHVybiBUd2VlbmFibGUuaW50ZXJwb2xhdGUodGhpcy5fb3B0cy5mcm9tLCB0aGlzLl9vcHRzLnRvLCB0aGlzLnZhbHVlKCksIGVhc2luZyk7XG59O1xuXG4vLyBDYWxjdWxhdGUgYHRvYCB2YWx1ZXMgZnJvbSBvcHRpb25zIHBhc3NlZCBhdCBpbml0aWFsaXphdGlvblxuUGF0aC5wcm90b3R5cGUuX2NhbGN1bGF0ZVRvID0gZnVuY3Rpb24gX2NhbGN1bGF0ZVRvKHByb2dyZXNzLCBlYXNpbmcpIHtcbiAgICByZXR1cm4gVHdlZW5hYmxlLmludGVycG9sYXRlKHRoaXMuX29wdHMuZnJvbSwgdGhpcy5fb3B0cy50bywgcHJvZ3Jlc3MsIGVhc2luZyk7XG59O1xuXG5QYXRoLnByb3RvdHlwZS5fc3RvcFR3ZWVuID0gZnVuY3Rpb24gX3N0b3BUd2VlbigpIHtcbiAgICBpZiAodGhpcy5fdHdlZW5hYmxlICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuYWJsZS5zdG9wKCk7XG4gICAgICAgIHRoaXMuX3R3ZWVuYWJsZSA9IG51bGw7XG4gICAgfVxufTtcblxuUGF0aC5wcm90b3R5cGUuX2Vhc2luZyA9IGZ1bmN0aW9uIF9lYXNpbmcoZWFzaW5nKSB7XG4gICAgaWYgKEVBU0lOR19BTElBU0VTLmhhc093blByb3BlcnR5KGVhc2luZykpIHtcbiAgICAgICAgcmV0dXJuIEVBU0lOR19BTElBU0VTW2Vhc2luZ107XG4gICAgfVxuXG4gICAgcmV0dXJuIGVhc2luZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGF0aDtcbiIsIi8vIENpcmNsZSBzaGFwZWQgcHJvZ3Jlc3MgYmFyXG5cbnZhciBTaGFwZSA9IHJlcXVpcmUoJy4vc2hhcGUnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIENpcmNsZSA9IGZ1bmN0aW9uIENpcmNsZShjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAvLyBVc2UgdHdvIGFyY3MgdG8gZm9ybSBhIGNpcmNsZVxuICAgIC8vIFNlZSB0aGlzIGFuc3dlciBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMDQ3NzMzNC8xNDQ2MDkyXG4gICAgdGhpcy5fcGF0aFRlbXBsYXRlID1cbiAgICAgICAgJ00gNTAsNTAgbSAwLC17cmFkaXVzfScgK1xuICAgICAgICAnIGEge3JhZGl1c30se3JhZGl1c30gMCAxIDEgMCx7MnJhZGl1c30nICtcbiAgICAgICAgJyBhIHtyYWRpdXN9LHtyYWRpdXN9IDAgMSAxIDAsLXsycmFkaXVzfSc7XG5cbiAgICB0aGlzLmNvbnRhaW5lckFzcGVjdFJhdGlvID0gMTtcblxuICAgIFNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG5DaXJjbGUucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5DaXJjbGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2lyY2xlO1xuXG5DaXJjbGUucHJvdG90eXBlLl9wYXRoU3RyaW5nID0gZnVuY3Rpb24gX3BhdGhTdHJpbmcob3B0cykge1xuICAgIHZhciB3aWR0aE9mV2lkZXIgPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgIGlmIChvcHRzLnRyYWlsV2lkdGggJiYgb3B0cy50cmFpbFdpZHRoID4gb3B0cy5zdHJva2VXaWR0aCkge1xuICAgICAgICB3aWR0aE9mV2lkZXIgPSBvcHRzLnRyYWlsV2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIHIgPSA1MCAtIHdpZHRoT2ZXaWRlciAvIDI7XG5cbiAgICByZXR1cm4gdXRpbHMucmVuZGVyKHRoaXMuX3BhdGhUZW1wbGF0ZSwge1xuICAgICAgICByYWRpdXM6IHIsXG4gICAgICAgICcycmFkaXVzJzogciAqIDJcbiAgICB9KTtcbn07XG5cbkNpcmNsZS5wcm90b3R5cGUuX3RyYWlsU3RyaW5nID0gZnVuY3Rpb24gX3RyYWlsU3RyaW5nKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0aFN0cmluZyhvcHRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lyY2xlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy8gSGlnaGVyIGxldmVsIEFQSSwgZGlmZmVyZW50IHNoYXBlZCBwcm9ncmVzcyBiYXJzXG4gICAgTGluZTogcmVxdWlyZSgnLi9saW5lJyksXG4gICAgQ2lyY2xlOiByZXF1aXJlKCcuL2NpcmNsZScpLFxuICAgIFNlbWlDaXJjbGU6IHJlcXVpcmUoJy4vc2VtaWNpcmNsZScpLFxuXG4gICAgLy8gTG93ZXIgbGV2ZWwgQVBJIHRvIHVzZSBhbnkgU1ZHIHBhdGhcbiAgICBQYXRoOiByZXF1aXJlKCcuL3BhdGgnKSxcblxuICAgIC8vIEJhc2UtY2xhc3MgZm9yIGNyZWF0aW5nIG5ldyBjdXN0b20gc2hhcGVzXG4gICAgLy8gdG8gYmUgaW4gbGluZSB3aXRoIHRoZSBBUEkgb2YgYnVpbHQtaW4gc2hhcGVzXG4gICAgLy8gVW5kb2N1bWVudGVkLlxuICAgIFNoYXBlOiByZXF1aXJlKCcuL3NoYXBlJyksXG5cbiAgICAvLyBJbnRlcm5hbCB1dGlscywgdW5kb2N1bWVudGVkLlxuICAgIHV0aWxzOiByZXF1aXJlKCcuL3V0aWxzJylcbn07XG4iLCJpbXBvcnQgJy4vYmFzZS5zY3NzJztcbmltcG9ydCBQcm9ncmVzc0JhciBmcm9tICdwcm9ncmVzc2Jhci5qcyc7XG5pbXBvcnQgZml0dHkgZnJvbSAnZml0dHknO1xuaW1wb3J0IFVSSSBmcm9tICd1cmlqcyc7XG5pbXBvcnQgJy4vZml0dGV4dC5qcyc7XG5cbmxldCB1cmwgPSBuZXcgVVJJKCk7XG5sZXQgcSA9IHVybC5zZWFyY2godHJ1ZSk7XG5pZighcSkge1xuICAgIHEgPSB7fTtcbn1cbmlmKCFxLmR1cmF0aW9uKSB7XG4gICAgcS5kdXJhdGlvbiA9IDgwMDtcbn1cbmVsc2Uge1xuICAgIHEuZHVyYXRpb24gPSBwYXJzZUludChxLmR1cmF0aW9uKTtcbn1cbmlmKCFxLm51bWJlcikge1xuICAgIHEubnVtYmVyID0gJz8nXG59XG5cbndpbmRvdy5maXRUZXh0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKSk7XG5cbnZhciBwcm9ncmVzc0JhciA9IG5ldyBQcm9ncmVzc0Jhci5DaXJjbGUoJyNjb250YWluZXInLCB7XG4gICAgc3Ryb2tlV2lkdGg6IDMsXG4gICAgZHVyYXRpb246IHEuZHVyYXRpb24sXG4gICAgdGV4dDoge1xuICAgICAgICB2YWx1ZTogcS5udW1iZXJcbiAgICB9XG59KTtcblxucHJvZ3Jlc3NCYXIuYW5pbWF0ZSgxLCB7XG4gICAgZHVyYXRpb246IHEuZHVyYXRpb25cbn0sIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKCdBbmltYXRpb24gaGFzIGZpbmlzaGVkJyk7XG59KTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0xIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTQtMiEuL2Jhc2Uuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNC0xIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzPz9yZWYtLTQtMiEuL2Jhc2Uuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTQtMSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz8/cmVmLS00LTIhLi9iYXNlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKSh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XFxuXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbiNjb250YWluZXItd3JhcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbiAgaGVpZ2h0OiAwO1xcbiAgcGFkZGluZy1ib3R0b206IDEwMCU7XFxuICB3aWR0aDogMTAwJTsgfVxcblxcbiNjb250YWluZXIge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1heC1oZWlnaHQ6IDExMDBweDtcXG4gIG1heC13aWR0aDogMTEwMHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgfVxcbiAgI2NvbnRhaW5lciBzdmcge1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcblxcbi5wcm9ncmVzc2Jhci10ZXh0IHtcXG4gIGZvbnQtc2l6ZTogNWVtO1xcbiAgZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmOyB9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL1VzZXJzL3dpbGxtY21pbGxpYW4vU2l0ZXMvd2luZG93LXNob3cvc3JjL2Jhc2Uuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNJLHNCQUFzQixFQUFBOztBQUcxQjtFQUNJLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2Isa0JBQWtCLEVBQUE7O0FBR3RCO0VBQ0ksa0JBQWtCO0VBQ2xCLFFBQVE7RUFDUixPQUFPO0VBQ1AsUUFBUTtFQUNSLGNBQWM7RUFDZCwyQkFBMkI7RUFDM0IsU0FBUztFQUNULG9CQUFvQjtFQUNwQixXQUFXLEVBQUE7O0FBR2Y7RUFDSSxjQUFjO0VBQ2QsV0FBVztFQUNYLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLDZCQUE2QjtFQUM3QixRQUFRO0VBQ1IsT0FBTztFQUNQLFFBQVE7RUFDUixTQUFVO0VBQ1YsMkJBQTJCLEVBQUE7RUFYL0I7SUFhUSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Ysa0JBQWtCLEVBQUE7O0FBSTFCO0VBQ0ksY0FBYztFQUNkLDZDQUE2QyxFQUFBXCIsXCJmaWxlXCI6XCJiYXNlLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHkge1xcbiAgICBiYWNrZ3JvdW5kOiAjMzMzO1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbiNjb250YWluZXItd3JhcCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbiAgICBoZWlnaHQ6IDA7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuI2NvbnRhaW5lciB7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBtYXgtaGVpZ2h0OiAxMTAwcHg7XFxuICAgIG1heC13aWR0aDogMTEwMHB4O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b20gOiAwO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIHN2ZyB7XFxuICAgICAgICB3aWR0aDogYXV0bztcXG4gICAgICAgIGhlaWdodDogYXV0bztcXG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XFxuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIH1cXG59XFxuXFxuLnByb2dyZXNzYmFyLXRleHQge1xcbiAgICBmb250LXNpemU6IDVlbTtcXG4gICAgZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmO1xcbn1cIl19XSk7XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiAnQG1lZGlhICcgKyBpdGVtWzJdICsgJ3snICsgY29udGVudCArICd9JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSAnKCcgKyBpdGVtWzJdICsgJykgYW5kICgnICsgbWVkaWFRdWVyeSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJztcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcbiAgcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvLyBMaW5lIHNoYXBlZCBwcm9ncmVzcyBiYXJcblxudmFyIFNoYXBlID0gcmVxdWlyZSgnLi9zaGFwZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgTGluZSA9IGZ1bmN0aW9uIExpbmUoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fcGF0aFRlbXBsYXRlID0gJ00gMCx7Y2VudGVyfSBMIDEwMCx7Y2VudGVyfSc7XG4gICAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbkxpbmUucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5MaW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmU7XG5cbkxpbmUucHJvdG90eXBlLl9pbml0aWFsaXplU3ZnID0gZnVuY3Rpb24gX2luaXRpYWxpemVTdmcoc3ZnLCBvcHRzKSB7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwICcgKyBvcHRzLnN0cm9rZVdpZHRoKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ25vbmUnKTtcbn07XG5cbkxpbmUucHJvdG90eXBlLl9wYXRoU3RyaW5nID0gZnVuY3Rpb24gX3BhdGhTdHJpbmcob3B0cykge1xuICAgIHJldHVybiB1dGlscy5yZW5kZXIodGhpcy5fcGF0aFRlbXBsYXRlLCB7XG4gICAgICAgIGNlbnRlcjogb3B0cy5zdHJva2VXaWR0aCAvIDJcbiAgICB9KTtcbn07XG5cbkxpbmUucHJvdG90eXBlLl90cmFpbFN0cmluZyA9IGZ1bmN0aW9uIF90cmFpbFN0cmluZyhvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGhTdHJpbmcob3B0cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmU7XG4iLCIvKiBzaGlmdHkgLSB2MS41LjMgLSAyMDE2LTExLTI5IC0gaHR0cDovL2plcmVteWNrYWhuLmdpdGh1Yi5pby9zaGlmdHkgKi9cbjsoZnVuY3Rpb24gKCkge1xuICB2YXIgcm9vdCA9IHRoaXMgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBTaGlmdHkgQ29yZVxuICogQnkgSmVyZW15IEthaG4gLSBqZXJlbXlja2FobkBnbWFpbC5jb21cbiAqL1xuXG52YXIgVHdlZW5hYmxlID0gKGZ1bmN0aW9uICgpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQWxpYXNlcyB0aGF0IGdldCBkZWZpbmVkIGxhdGVyIGluIHRoaXMgZnVuY3Rpb25cbiAgdmFyIGZvcm11bGE7XG5cbiAgLy8gQ09OU1RBTlRTXG4gIHZhciBERUZBVUxUX1NDSEVEVUxFX0ZVTkNUSU9OO1xuICB2YXIgREVGQVVMVF9FQVNJTkcgPSAnbGluZWFyJztcbiAgdmFyIERFRkFVTFRfRFVSQVRJT04gPSA1MDA7XG4gIHZhciBVUERBVEVfVElNRSA9IDEwMDAgLyA2MDtcblxuICB2YXIgX25vdyA9IERhdGUubm93XG4gICAgICAgPyBEYXRlLm5vd1xuICAgICAgIDogZnVuY3Rpb24gKCkge3JldHVybiArbmV3IERhdGUoKTt9O1xuXG4gIHZhciBub3cgPSB0eXBlb2YgU0hJRlRZX0RFQlVHX05PVyAhPT0gJ3VuZGVmaW5lZCcgPyBTSElGVFlfREVCVUdfTk9XIDogX25vdztcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSBzaGltIGJ5IFBhdWwgSXJpc2ggKG1vZGlmaWVkIGZvciBTaGlmdHkpXG4gICAgLy8gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cbiAgICBERUZBVUxUX1NDSEVEVUxFX0ZVTkNUSU9OID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICB8fCB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgIHx8ICh3aW5kb3cubW96Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgJiYgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICAgICB8fCBzZXRUaW1lb3V0O1xuICB9IGVsc2Uge1xuICAgIERFRkFVTFRfU0NIRURVTEVfRlVOQ1RJT04gPSBzZXRUaW1lb3V0O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9vcCAoKSB7XG4gICAgLy8gTk9PUCFcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5keSBzaG9ydGN1dCBmb3IgZG9pbmcgYSBmb3ItaW4gbG9vcC4gVGhpcyBpcyBub3QgYSBcIm5vcm1hbFwiIGVhY2hcbiAgICogZnVuY3Rpb24sIGl0IGlzIG9wdGltaXplZCBmb3IgU2hpZnR5LiAgVGhlIGl0ZXJhdG9yIGZ1bmN0aW9uIG9ubHkgcmVjZWl2ZXNcbiAgICogdGhlIHByb3BlcnR5IG5hbWUsIG5vdCB0aGUgdmFsdWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtGdW5jdGlvbihzdHJpbmcpfSBmblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFjaCAob2JqLCBmbikge1xuICAgIHZhciBrZXk7XG4gICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBzaGFsbG93IGNvcHkgb2YgT2JqZWN0IHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRPYmplY3QgVGhlIG9iamVjdCB0byBjb3B5IGludG9cbiAgICogQHBhcmFtIHtPYmplY3R9IHNyY09iamVjdCBUaGUgb2JqZWN0IHRvIGNvcHkgZnJvbVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgcmVmZXJlbmNlIHRvIHRoZSBhdWdtZW50ZWQgYHRhcmdldE9iamAgT2JqZWN0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBzaGFsbG93Q29weSAodGFyZ2V0T2JqLCBzcmNPYmopIHtcbiAgICBlYWNoKHNyY09iaiwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHRhcmdldE9ialtwcm9wXSA9IHNyY09ialtwcm9wXTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0YXJnZXRPYmo7XG4gIH1cblxuICAvKipcbiAgICogQ29waWVzIGVhY2ggcHJvcGVydHkgZnJvbSBzcmMgb250byB0YXJnZXQsIGJ1dCBvbmx5IGlmIHRoZSBwcm9wZXJ0eSB0b1xuICAgKiBjb3B5IHRvIHRhcmdldCBpcyB1bmRlZmluZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgTWlzc2luZyBwcm9wZXJ0aWVzIGluIHRoaXMgT2JqZWN0IGFyZSBmaWxsZWQgaW5cbiAgICogQHBhcmFtIHtPYmplY3R9IHNyY1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdHMgKHRhcmdldCwgc3JjKSB7XG4gICAgZWFjaChzcmMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gc3JjW3Byb3BdO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGludGVycG9sYXRlZCB0d2VlbiB2YWx1ZXMgb2YgYW4gT2JqZWN0IGZvciBhIGdpdmVuXG4gICAqIHRpbWVzdGFtcC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGZvclBvc2l0aW9uIFRoZSBwb3NpdGlvbiB0byBjb21wdXRlIHRoZSBzdGF0ZSBmb3IuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjdXJyZW50U3RhdGUgQ3VycmVudCBzdGF0ZSBwcm9wZXJ0aWVzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3JpZ2luYWxTdGF0ZTogVGhlIG9yaWdpbmFsIHN0YXRlIHByb3BlcnRpZXMgdGhlIE9iamVjdCBpc1xuICAgKiB0d2VlbmluZyBmcm9tLlxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0U3RhdGU6IFRoZSBkZXN0aW5hdGlvbiBzdGF0ZSBwcm9wZXJ0aWVzIHRoZSBPYmplY3RcbiAgICogaXMgdHdlZW5pbmcgdG8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbjogVGhlIGxlbmd0aCBvZiB0aGUgdHdlZW4gaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wOiBUaGUgVU5JWCBlcG9jaCB0aW1lIGF0IHdoaWNoIHRoZSB0d2VlbiBiZWdhbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVhc2luZzogVGhpcyBPYmplY3QncyBrZXlzIG11c3QgY29ycmVzcG9uZCB0byB0aGUga2V5cyBpblxuICAgKiB0YXJnZXRTdGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHR3ZWVuUHJvcHMgKGZvclBvc2l0aW9uLCBjdXJyZW50U3RhdGUsIG9yaWdpbmFsU3RhdGUsIHRhcmdldFN0YXRlLFxuICAgIGR1cmF0aW9uLCB0aW1lc3RhbXAsIGVhc2luZykge1xuICAgIHZhciBub3JtYWxpemVkUG9zaXRpb24gPVxuICAgICAgICBmb3JQb3NpdGlvbiA8IHRpbWVzdGFtcCA/IDAgOiAoZm9yUG9zaXRpb24gLSB0aW1lc3RhbXApIC8gZHVyYXRpb247XG5cblxuICAgIHZhciBwcm9wO1xuICAgIHZhciBlYXNpbmdPYmplY3RQcm9wO1xuICAgIHZhciBlYXNpbmdGbjtcbiAgICBmb3IgKHByb3AgaW4gY3VycmVudFN0YXRlKSB7XG4gICAgICBpZiAoY3VycmVudFN0YXRlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIGVhc2luZ09iamVjdFByb3AgPSBlYXNpbmdbcHJvcF07XG4gICAgICAgIGVhc2luZ0ZuID0gdHlwZW9mIGVhc2luZ09iamVjdFByb3AgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICA/IGVhc2luZ09iamVjdFByb3BcbiAgICAgICAgICA6IGZvcm11bGFbZWFzaW5nT2JqZWN0UHJvcF07XG5cbiAgICAgICAgY3VycmVudFN0YXRlW3Byb3BdID0gdHdlZW5Qcm9wKFxuICAgICAgICAgIG9yaWdpbmFsU3RhdGVbcHJvcF0sXG4gICAgICAgICAgdGFyZ2V0U3RhdGVbcHJvcF0sXG4gICAgICAgICAgZWFzaW5nRm4sXG4gICAgICAgICAgbm9ybWFsaXplZFBvc2l0aW9uXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUd2VlbnMgYSBzaW5nbGUgcHJvcGVydHkuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgdmFsdWUgdGhhdCB0aGUgdHdlZW4gc3RhcnRlZCBmcm9tLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSB2YWx1ZSB0aGF0IHRoZSB0d2VlbiBzaG91bGQgZW5kIGF0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYXNpbmdGdW5jIFRoZSBlYXNpbmcgY3VydmUgdG8gYXBwbHkgdG8gdGhlIHR3ZWVuLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gVGhlIG5vcm1hbGl6ZWQgcG9zaXRpb24gKGJldHdlZW4gMC4wIGFuZCAxLjApIHRvXG4gICAqIGNhbGN1bGF0ZSB0aGUgbWlkcG9pbnQgb2YgJ3N0YXJ0JyBhbmQgJ2VuZCcgYWdhaW5zdC5cbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgdHdlZW5lZCB2YWx1ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHR3ZWVuUHJvcCAoc3RhcnQsIGVuZCwgZWFzaW5nRnVuYywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogZWFzaW5nRnVuYyhwb3NpdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBhIGZpbHRlciB0byBUd2VlbmFibGUgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7VHdlZW5hYmxlfSB0d2VlbmFibGUgVGhlIGBUd2VlbmFibGVgIGluc3RhbmNlIHRvIGNhbGwgdGhlIGZpbHRlclxuICAgKiB1cG9uLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZmlsdGVyTmFtZSBUaGUgbmFtZSBvZiB0aGUgZmlsdGVyIHRvIGFwcGx5LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHlGaWx0ZXIgKHR3ZWVuYWJsZSwgZmlsdGVyTmFtZSkge1xuICAgIHZhciBmaWx0ZXJzID0gVHdlZW5hYmxlLnByb3RvdHlwZS5maWx0ZXI7XG4gICAgdmFyIGFyZ3MgPSB0d2VlbmFibGUuX2ZpbHRlckFyZ3M7XG5cbiAgICBlYWNoKGZpbHRlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGZpbHRlcnNbbmFtZV1bZmlsdGVyTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZpbHRlcnNbbmFtZV1bZmlsdGVyTmFtZV0uYXBwbHkodHdlZW5hYmxlLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciB0aW1lb3V0SGFuZGxlcl9lbmRUaW1lO1xuICB2YXIgdGltZW91dEhhbmRsZXJfY3VycmVudFRpbWU7XG4gIHZhciB0aW1lb3V0SGFuZGxlcl9pc0VuZGVkO1xuICB2YXIgdGltZW91dEhhbmRsZXJfb2Zmc2V0O1xuICAvKipcbiAgICogSGFuZGxlcyB0aGUgdXBkYXRlIGxvZ2ljIGZvciBvbmUgc3RlcCBvZiBhIHR3ZWVuLlxuICAgKiBAcGFyYW0ge1R3ZWVuYWJsZX0gdHdlZW5hYmxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY3VycmVudFN0YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcmlnaW5hbFN0YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRTdGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZWFzaW5nXG4gICAqIEBwYXJhbSB7RnVuY3Rpb24oT2JqZWN0LCAqLCBudW1iZXIpfSBzdGVwXG4gICAqIEBwYXJhbSB7RnVuY3Rpb24oRnVuY3Rpb24sbnVtYmVyKX19IHNjaGVkdWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2N1cnJlbnRUaW1lT3ZlcnJpZGUgTmVlZGVkIGZvciBhY2N1cmF0ZSB0aW1lc3RhbXAgaW5cbiAgICogVHdlZW5hYmxlI3NlZWsuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiB0aW1lb3V0SGFuZGxlciAodHdlZW5hYmxlLCB0aW1lc3RhbXAsIGRlbGF5LCBkdXJhdGlvbiwgY3VycmVudFN0YXRlLFxuICAgIG9yaWdpbmFsU3RhdGUsIHRhcmdldFN0YXRlLCBlYXNpbmcsIHN0ZXAsIHNjaGVkdWxlLFxuICAgIG9wdF9jdXJyZW50VGltZU92ZXJyaWRlKSB7XG5cbiAgICB0aW1lb3V0SGFuZGxlcl9lbmRUaW1lID0gdGltZXN0YW1wICsgZGVsYXkgKyBkdXJhdGlvbjtcblxuICAgIHRpbWVvdXRIYW5kbGVyX2N1cnJlbnRUaW1lID1cbiAgICBNYXRoLm1pbihvcHRfY3VycmVudFRpbWVPdmVycmlkZSB8fCBub3coKSwgdGltZW91dEhhbmRsZXJfZW5kVGltZSk7XG5cbiAgICB0aW1lb3V0SGFuZGxlcl9pc0VuZGVkID1cbiAgICAgIHRpbWVvdXRIYW5kbGVyX2N1cnJlbnRUaW1lID49IHRpbWVvdXRIYW5kbGVyX2VuZFRpbWU7XG5cbiAgICB0aW1lb3V0SGFuZGxlcl9vZmZzZXQgPSBkdXJhdGlvbiAtIChcbiAgICAgIHRpbWVvdXRIYW5kbGVyX2VuZFRpbWUgLSB0aW1lb3V0SGFuZGxlcl9jdXJyZW50VGltZSk7XG5cbiAgICBpZiAodHdlZW5hYmxlLmlzUGxheWluZygpKSB7XG4gICAgICBpZiAodGltZW91dEhhbmRsZXJfaXNFbmRlZCkge1xuICAgICAgICBzdGVwKHRhcmdldFN0YXRlLCB0d2VlbmFibGUuX2F0dGFjaG1lbnQsIHRpbWVvdXRIYW5kbGVyX29mZnNldCk7XG4gICAgICAgIHR3ZWVuYWJsZS5zdG9wKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHdlZW5hYmxlLl9zY2hlZHVsZUlkID1cbiAgICAgICAgICBzY2hlZHVsZSh0d2VlbmFibGUuX3RpbWVvdXRIYW5kbGVyLCBVUERBVEVfVElNRSk7XG5cbiAgICAgICAgYXBwbHlGaWx0ZXIodHdlZW5hYmxlLCAnYmVmb3JlVHdlZW4nKTtcblxuICAgICAgICAvLyBJZiB0aGUgYW5pbWF0aW9uIGhhcyBub3QgeWV0IHJlYWNoZWQgdGhlIHN0YXJ0IHBvaW50IChlLmcuLCB0aGVyZSB3YXNcbiAgICAgICAgLy8gZGVsYXkgdGhhdCBoYXMgbm90IHlldCBjb21wbGV0ZWQpLCBqdXN0IGludGVycG9sYXRlIHRoZSBzdGFydGluZ1xuICAgICAgICAvLyBwb3NpdGlvbiBvZiB0aGUgdHdlZW4uXG4gICAgICAgIGlmICh0aW1lb3V0SGFuZGxlcl9jdXJyZW50VGltZSA8ICh0aW1lc3RhbXAgKyBkZWxheSkpIHtcbiAgICAgICAgICB0d2VlblByb3BzKDEsIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSwgdGFyZ2V0U3RhdGUsIDEsIDEsIGVhc2luZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHdlZW5Qcm9wcyh0aW1lb3V0SGFuZGxlcl9jdXJyZW50VGltZSwgY3VycmVudFN0YXRlLCBvcmlnaW5hbFN0YXRlLFxuICAgICAgICAgICAgdGFyZ2V0U3RhdGUsIGR1cmF0aW9uLCB0aW1lc3RhbXAgKyBkZWxheSwgZWFzaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5RmlsdGVyKHR3ZWVuYWJsZSwgJ2FmdGVyVHdlZW4nKTtcblxuICAgICAgICBzdGVwKGN1cnJlbnRTdGF0ZSwgdHdlZW5hYmxlLl9hdHRhY2htZW50LCB0aW1lb3V0SGFuZGxlcl9vZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1c2FibGUgZWFzaW5nIE9iamVjdCBmcm9tIGEgc3RyaW5nLCBhIGZ1bmN0aW9uIG9yIGFub3RoZXIgZWFzaW5nXG4gICAqIE9iamVjdC4gIElmIGBlYXNpbmdgIGlzIGFuIE9iamVjdCwgdGhlbiB0aGlzIGZ1bmN0aW9uIGNsb25lcyBpdCBhbmQgZmlsbHNcbiAgICogaW4gdGhlIG1pc3NpbmcgcHJvcGVydGllcyB3aXRoIGBcImxpbmVhclwiYC5cbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZ3xGdW5jdGlvbj59IGZyb21Ud2VlblBhcmFtc1xuICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd8RnVuY3Rpb259IGVhc2luZ1xuICAgKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZ3xGdW5jdGlvbj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjb21wb3NlRWFzaW5nT2JqZWN0IChmcm9tVHdlZW5QYXJhbXMsIGVhc2luZykge1xuICAgIHZhciBjb21wb3NlZEVhc2luZyA9IHt9O1xuICAgIHZhciB0eXBlb2ZFYXNpbmcgPSB0eXBlb2YgZWFzaW5nO1xuXG4gICAgaWYgKHR5cGVvZkVhc2luZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mRWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlYWNoKGZyb21Ud2VlblBhcmFtcywgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgY29tcG9zZWRFYXNpbmdbcHJvcF0gPSBlYXNpbmc7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWFjaChmcm9tVHdlZW5QYXJhbXMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIGlmICghY29tcG9zZWRFYXNpbmdbcHJvcF0pIHtcbiAgICAgICAgICBjb21wb3NlZEVhc2luZ1twcm9wXSA9IGVhc2luZ1twcm9wXSB8fCBERUZBVUxUX0VBU0lORztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvc2VkRWFzaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFR3ZWVuYWJsZSBjb25zdHJ1Y3Rvci5cbiAgICogQGNsYXNzIFR3ZWVuYWJsZVxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9pbml0aWFsU3RhdGUgVGhlIHZhbHVlcyB0aGF0IHRoZSBpbml0aWFsIHR3ZWVuIHNob3VsZFxuICAgKiBzdGFydCBhdCBpZiBhIGBmcm9tYCBvYmplY3QgaXMgbm90IHByb3ZpZGVkIHRvIGB7eyNjcm9zc0xpbmtcbiAgICogXCJUd2VlbmFibGUvdHdlZW46bWV0aG9kXCJ9fXt7L2Nyb3NzTGlua319YCBvciBge3sjY3Jvc3NMaW5rXG4gICAqIFwiVHdlZW5hYmxlL3NldENvbmZpZzptZXRob2RcIn19e3svY3Jvc3NMaW5rfX1gLlxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9jb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3QgdG8gYmUgcGFzc2VkIHRvXG4gICAqIGB7eyNjcm9zc0xpbmsgXCJUd2VlbmFibGUvc2V0Q29uZmlnOm1ldGhvZFwifX17ey9jcm9zc0xpbmt9fWAuXG4gICAqIEBtb2R1bGUgVHdlZW5hYmxlXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZnVuY3Rpb24gVHdlZW5hYmxlIChvcHRfaW5pdGlhbFN0YXRlLCBvcHRfY29uZmlnKSB7XG4gICAgdGhpcy5fY3VycmVudFN0YXRlID0gb3B0X2luaXRpYWxTdGF0ZSB8fCB7fTtcbiAgICB0aGlzLl9jb25maWd1cmVkID0gZmFsc2U7XG4gICAgdGhpcy5fc2NoZWR1bGVGdW5jdGlvbiA9IERFRkFVTFRfU0NIRURVTEVfRlVOQ1RJT047XG5cbiAgICAvLyBUbyBwcmV2ZW50IHVubmVjZXNzYXJ5IGNhbGxzIHRvIHNldENvbmZpZyBkbyBub3Qgc2V0IGRlZmF1bHRcbiAgICAvLyBjb25maWd1cmF0aW9uIGhlcmUuICBPbmx5IHNldCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gaW1tZWRpYXRlbHkgYmVmb3JlXG4gICAgLy8gdHdlZW5pbmcgaWYgbm9uZSBoYXMgYmVlbiBzZXQuXG4gICAgaWYgKHR5cGVvZiBvcHRfY29uZmlnICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5zZXRDb25maWcob3B0X2NvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBhbmQgc3RhcnQgYSB0d2Vlbi5cbiAgICogQG1ldGhvZCB0d2VlblxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9jb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3QgdG8gYmUgcGFzc2VkIHRvXG4gICAqIGB7eyNjcm9zc0xpbmsgXCJUd2VlbmFibGUvc2V0Q29uZmlnOm1ldGhvZFwifX17ey9jcm9zc0xpbmt9fWAuXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIFR3ZWVuYWJsZS5wcm90b3R5cGUudHdlZW4gPSBmdW5jdGlvbiAob3B0X2NvbmZpZykge1xuICAgIGlmICh0aGlzLl9pc1R3ZWVuaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBPbmx5IHNldCBkZWZhdWx0IGNvbmZpZyBpZiBubyBjb25maWd1cmF0aW9uIGhhcyBiZWVuIHNldCBwcmV2aW91c2x5IGFuZFxuICAgIC8vIG5vbmUgaXMgcHJvdmlkZWQgbm93LlxuICAgIGlmIChvcHRfY29uZmlnICE9PSB1bmRlZmluZWQgfHwgIXRoaXMuX2NvbmZpZ3VyZWQpIHtcbiAgICAgIHRoaXMuc2V0Q29uZmlnKG9wdF9jb25maWcpO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVzdGFtcCA9IG5vdygpO1xuICAgIHRoaXMuX3N0YXJ0KHRoaXMuZ2V0KCksIHRoaXMuX2F0dGFjaG1lbnQpO1xuICAgIHJldHVybiB0aGlzLnJlc3VtZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgYSB0d2VlbiB0aGF0IHdpbGwgc3RhcnQgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAbWV0aG9kIHNldENvbmZpZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBmb2xsb3dpbmcgdmFsdWVzIGFyZSB2YWxpZDpcbiAgICogLSBfX2Zyb21fXyAoX09iamVjdD1fKTogU3RhcnRpbmcgcG9zaXRpb24uICBJZiBvbWl0dGVkLCBge3sjY3Jvc3NMaW5rXG4gICAqICAgXCJUd2VlbmFibGUvZ2V0Om1ldGhvZFwifX1nZXQoKXt7L2Nyb3NzTGlua319YCBpcyB1c2VkLlxuICAgKiAtIF9fdG9fXyAoX09iamVjdD1fKTogRW5kaW5nIHBvc2l0aW9uLlxuICAgKiAtIF9fZHVyYXRpb25fXyAoX251bWJlcj1fKTogSG93IG1hbnkgbWlsbGlzZWNvbmRzIHRvIGFuaW1hdGUgZm9yLlxuICAgKiAtIF9fZGVsYXlfXyAoX2RlbGF5PV8pOiBIb3cgbWFueSBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgc3RhcnRpbmcgdGhlXG4gICAqICAgdHdlZW4uXG4gICAqIC0gX19zdGFydF9fIChfRnVuY3Rpb24oT2JqZWN0LCAqKV8pOiBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIHR3ZWVuXG4gICAqICAgYmVnaW5zLiAgUmVjZWl2ZXMgdGhlIHN0YXRlIG9mIHRoZSB0d2VlbiBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIGFuZFxuICAgKiAgIGBhdHRhY2htZW50YCBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlci5cbiAgICogLSBfX3N0ZXBfXyAoX0Z1bmN0aW9uKE9iamVjdCwgKiwgbnVtYmVyKV8pOiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIGV2ZXJ5XG4gICAqICAgdGljay4gIFJlY2VpdmVzIGB7eyNjcm9zc0xpbmtcbiAgICogICBcIlR3ZWVuYWJsZS9nZXQ6bWV0aG9kXCJ9fWdldCgpe3svY3Jvc3NMaW5rfX1gIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsXG4gICAqICAgYGF0dGFjaG1lbnRgIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyLCBhbmQgdGhlIHRpbWUgZWxhcHNlZCBzaW5jZSB0aGVcbiAgICogICBzdGFydCBvZiB0aGUgdHdlZW4gYXMgdGhlIHRoaXJkLiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBjYWxsZWQgb24gdGhlXG4gICAqICAgZmluYWwgc3RlcCBvZiB0aGUgYW5pbWF0aW9uLCBidXQgYGZpbmlzaGAgaXMuXG4gICAqIC0gX19maW5pc2hfXyAoX0Z1bmN0aW9uKE9iamVjdCwgKilfKTogRnVuY3Rpb24gdG8gZXhlY3V0ZSB1cG9uIHR3ZWVuXG4gICAqICAgY29tcGxldGlvbi4gIFJlY2VpdmVzIHRoZSBzdGF0ZSBvZiB0aGUgdHdlZW4gYXMgdGhlIGZpcnN0IHBhcmFtZXRlciBhbmRcbiAgICogICBgYXR0YWNobWVudGAgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIuXG4gICAqIC0gX19lYXNpbmdfXyAoX09iamVjdC48c3RyaW5nfEZ1bmN0aW9uPnxzdHJpbmd8RnVuY3Rpb249Xyk6IEVhc2luZyBjdXJ2ZVxuICAgKiAgIG5hbWUocykgb3IgZnVuY3Rpb24ocykgdG8gdXNlIGZvciB0aGUgdHdlZW4uXG4gICAqIC0gX19hdHRhY2htZW50X18gKF8qXyk6IENhY2hlZCB2YWx1ZSB0aGF0IGlzIHBhc3NlZCB0byB0aGVcbiAgICogICBgc3RlcGAvYHN0YXJ0YC9gZmluaXNoYCBtZXRob2RzLlxuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBUd2VlbmFibGUucHJvdG90eXBlLnNldENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29uZmlndXJlZCA9IHRydWU7XG5cbiAgICAvLyBBdHRhY2ggc29tZXRoaW5nIHRvIHRoaXMgVHdlZW5hYmxlIGluc3RhbmNlIChlLmcuOiBhIERPTSBlbGVtZW50LCBhblxuICAgIC8vIG9iamVjdCwgYSBzdHJpbmcsIGV0Yy4pO1xuICAgIHRoaXMuX2F0dGFjaG1lbnQgPSBjb25maWcuYXR0YWNobWVudDtcblxuICAgIC8vIEluaXQgdGhlIGludGVybmFsIHN0YXRlXG4gICAgdGhpcy5fcGF1c2VkQXRUaW1lID0gbnVsbDtcbiAgICB0aGlzLl9zY2hlZHVsZUlkID0gbnVsbDtcbiAgICB0aGlzLl9kZWxheSA9IGNvbmZpZy5kZWxheSB8fCAwO1xuICAgIHRoaXMuX3N0YXJ0ID0gY29uZmlnLnN0YXJ0IHx8IG5vb3A7XG4gICAgdGhpcy5fc3RlcCA9IGNvbmZpZy5zdGVwIHx8IG5vb3A7XG4gICAgdGhpcy5fZmluaXNoID0gY29uZmlnLmZpbmlzaCB8fCBub29wO1xuICAgIHRoaXMuX2R1cmF0aW9uID0gY29uZmlnLmR1cmF0aW9uIHx8IERFRkFVTFRfRFVSQVRJT047XG4gICAgdGhpcy5fY3VycmVudFN0YXRlID0gc2hhbGxvd0NvcHkoe30sIGNvbmZpZy5mcm9tIHx8IHRoaXMuZ2V0KCkpO1xuICAgIHRoaXMuX29yaWdpbmFsU3RhdGUgPSB0aGlzLmdldCgpO1xuICAgIHRoaXMuX3RhcmdldFN0YXRlID0gc2hhbGxvd0NvcHkoe30sIGNvbmZpZy50byB8fCB0aGlzLmdldCgpKTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl90aW1lb3V0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRpbWVvdXRIYW5kbGVyKHNlbGYsXG4gICAgICAgIHNlbGYuX3RpbWVzdGFtcCxcbiAgICAgICAgc2VsZi5fZGVsYXksXG4gICAgICAgIHNlbGYuX2R1cmF0aW9uLFxuICAgICAgICBzZWxmLl9jdXJyZW50U3RhdGUsXG4gICAgICAgIHNlbGYuX29yaWdpbmFsU3RhdGUsXG4gICAgICAgIHNlbGYuX3RhcmdldFN0YXRlLFxuICAgICAgICBzZWxmLl9lYXNpbmcsXG4gICAgICAgIHNlbGYuX3N0ZXAsXG4gICAgICAgIHNlbGYuX3NjaGVkdWxlRnVuY3Rpb25cbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEFsaWFzZXMgdXNlZCBiZWxvd1xuICAgIHZhciBjdXJyZW50U3RhdGUgPSB0aGlzLl9jdXJyZW50U3RhdGU7XG4gICAgdmFyIHRhcmdldFN0YXRlID0gdGhpcy5fdGFyZ2V0U3RhdGU7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGVyZSBpcyBhbHdheXMgc29tZXRoaW5nIHRvIHR3ZWVuIHRvLlxuICAgIGRlZmF1bHRzKHRhcmdldFN0YXRlLCBjdXJyZW50U3RhdGUpO1xuXG4gICAgdGhpcy5fZWFzaW5nID0gY29tcG9zZUVhc2luZ09iamVjdChcbiAgICAgIGN1cnJlbnRTdGF0ZSwgY29uZmlnLmVhc2luZyB8fCBERUZBVUxUX0VBU0lORyk7XG5cbiAgICB0aGlzLl9maWx0ZXJBcmdzID1cbiAgICAgIFtjdXJyZW50U3RhdGUsIHRoaXMuX29yaWdpbmFsU3RhdGUsIHRhcmdldFN0YXRlLCB0aGlzLl9lYXNpbmddO1xuXG4gICAgYXBwbHlGaWx0ZXIodGhpcywgJ3R3ZWVuQ3JlYXRlZCcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGdldFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjdXJyZW50IHN0YXRlLlxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNoYWxsb3dDb3B5KHt9LCB0aGlzLl9jdXJyZW50U3RhdGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHNldFxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUuXG4gICAqL1xuICBUd2VlbmFibGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSA9IHN0YXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQYXVzZSBhIHR3ZWVuLiAgUGF1c2VkIHR3ZWVucyBjYW4gYmUgcmVzdW1lZCBmcm9tIHRoZSBwb2ludCBhdCB3aGljaCB0aGV5XG4gICAqIHdlcmUgcGF1c2VkLiAgVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSBge3sjY3Jvc3NMaW5rXG4gICAqIFwiVHdlZW5hYmxlL3N0b3A6bWV0aG9kXCJ9fXt7L2Nyb3NzTGlua319YCwgYXMgdGhhdCBtZXRob2RcbiAgICogY2F1c2VzIGEgdHdlZW4gdG8gc3RhcnQgb3ZlciB3aGVuIGl0IGlzIHJlc3VtZWQuXG4gICAqIEBtZXRob2QgcGF1c2VcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wYXVzZWRBdFRpbWUgPSBub3coKTtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc3VtZSBhIHBhdXNlZCB0d2Vlbi5cbiAgICogQG1ldGhvZCByZXN1bWVcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl90aW1lc3RhbXAgKz0gbm93KCkgLSB0aGlzLl9wYXVzZWRBdFRpbWU7XG4gICAgfVxuXG4gICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1R3ZWVuaW5nID0gdHJ1ZTtcblxuICAgIHRoaXMuX3RpbWVvdXRIYW5kbGVyKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogTW92ZSB0aGUgc3RhdGUgb2YgdGhlIGFuaW1hdGlvbiB0byBhIHNwZWNpZmljIHBvaW50IGluIHRoZSB0d2VlbidzXG4gICAqIHRpbWVsaW5lLiAgSWYgdGhlIGFuaW1hdGlvbiBpcyBub3QgcnVubmluZywgdGhpcyB3aWxsIGNhdXNlIHRoZSBgc3RlcGBcbiAgICogaGFuZGxlcnMgdG8gYmUgY2FsbGVkLlxuICAgKiBAbWV0aG9kIHNlZWtcbiAgICogQHBhcmFtIHttaWxsaXNlY29uZH0gbWlsbGlzZWNvbmQgVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBhbmltYXRpb24gdG8gc2Vla1xuICAgKiB0by4gIFRoaXMgbXVzdCBub3QgYmUgbGVzcyB0aGFuIGAwYC5cbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5zZWVrID0gZnVuY3Rpb24gKG1pbGxpc2Vjb25kKSB7XG4gICAgbWlsbGlzZWNvbmQgPSBNYXRoLm1heChtaWxsaXNlY29uZCwgMCk7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbm93KCk7XG5cbiAgICBpZiAoKHRoaXMuX3RpbWVzdGFtcCArIG1pbGxpc2Vjb25kKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5fdGltZXN0YW1wID0gY3VycmVudFRpbWUgLSBtaWxsaXNlY29uZDtcblxuICAgIGlmICghdGhpcy5pc1BsYXlpbmcoKSkge1xuICAgICAgdGhpcy5faXNUd2VlbmluZyA9IHRydWU7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuXG4gICAgICAvLyBJZiB0aGUgYW5pbWF0aW9uIGlzIG5vdCBydW5uaW5nLCBjYWxsIHRpbWVvdXRIYW5kbGVyIHRvIG1ha2Ugc3VyZSB0aGF0XG4gICAgICAvLyBhbnkgc3RlcCBoYW5kbGVycyBhcmUgcnVuLlxuICAgICAgdGltZW91dEhhbmRsZXIodGhpcyxcbiAgICAgICAgdGhpcy5fdGltZXN0YW1wLFxuICAgICAgICB0aGlzLl9kZWxheSxcbiAgICAgICAgdGhpcy5fZHVyYXRpb24sXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSxcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxTdGF0ZSxcbiAgICAgICAgdGhpcy5fdGFyZ2V0U3RhdGUsXG4gICAgICAgIHRoaXMuX2Vhc2luZyxcbiAgICAgICAgdGhpcy5fc3RlcCxcbiAgICAgICAgdGhpcy5fc2NoZWR1bGVGdW5jdGlvbixcbiAgICAgICAgY3VycmVudFRpbWVcbiAgICAgICk7XG5cbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogU3RvcHMgYW5kIGNhbmNlbHMgYSB0d2Vlbi5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gZ290b0VuZCBJZiBgZmFsc2VgIG9yIG9taXR0ZWQsIHRoZSB0d2VlbiBqdXN0IHN0b3BzIGF0XG4gICAqIGl0cyBjdXJyZW50IHN0YXRlLCBhbmQgdGhlIGBmaW5pc2hgIGhhbmRsZXIgaXMgbm90IGludm9rZWQuICBJZiBgdHJ1ZWAsXG4gICAqIHRoZSB0d2VlbmVkIG9iamVjdCdzIHZhbHVlcyBhcmUgaW5zdGFudGx5IHNldCB0byB0aGUgdGFyZ2V0IHZhbHVlcywgYW5kXG4gICAqIGBmaW5pc2hgIGlzIGludm9rZWQuXG4gICAqIEBtZXRob2Qgc3RvcFxuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBUd2VlbmFibGUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoZ290b0VuZCkge1xuICAgIHRoaXMuX2lzVHdlZW5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3RpbWVvdXRIYW5kbGVyID0gbm9vcDtcblxuICAgIChyb290LmNhbmNlbEFuaW1hdGlvbkZyYW1lICAgICAgICAgICAgfHxcbiAgICByb290LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lICAgICB8fFxuICAgIHJvb3Qub0NhbmNlbEFuaW1hdGlvbkZyYW1lICAgICAgICAgIHx8XG4gICAgcm9vdC5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lICAgICAgICAgfHxcbiAgICByb290Lm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHJvb3QuY2xlYXJUaW1lb3V0KSh0aGlzLl9zY2hlZHVsZUlkKTtcblxuICAgIGlmIChnb3RvRW5kKSB7XG4gICAgICBhcHBseUZpbHRlcih0aGlzLCAnYmVmb3JlVHdlZW4nKTtcbiAgICAgIHR3ZWVuUHJvcHMoXG4gICAgICAgIDEsXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSxcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxTdGF0ZSxcbiAgICAgICAgdGhpcy5fdGFyZ2V0U3RhdGUsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMuX2Vhc2luZ1xuICAgICAgKTtcbiAgICAgIGFwcGx5RmlsdGVyKHRoaXMsICdhZnRlclR3ZWVuJyk7XG4gICAgICBhcHBseUZpbHRlcih0aGlzLCAnYWZ0ZXJUd2VlbkVuZCcpO1xuICAgICAgdGhpcy5fZmluaXNoLmNhbGwodGhpcywgdGhpcy5fY3VycmVudFN0YXRlLCB0aGlzLl9hdHRhY2htZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG1ldGhvZCBpc1BsYXlpbmdcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgYSB0d2VlbiBpcyBydW5uaW5nLlxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5pc1BsYXlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVHdlZW5pbmcgJiYgIXRoaXMuX2lzUGF1c2VkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgYSBjdXN0b20gc2NoZWR1bGUgZnVuY3Rpb24uXG4gICAqXG4gICAqIElmIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIG5vdCBzZXQsXG4gICAqIFtgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXG4gICAqIGlzIHVzZWQgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2VcbiAgICogW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy5zZXRUaW1lb3V0KVxuICAgKiBpcyB1c2VkLlxuICAgKiBAbWV0aG9kIHNldFNjaGVkdWxlRnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbihGdW5jdGlvbixudW1iZXIpfSBzY2hlZHVsZUZ1bmN0aW9uIFRoZSBmdW5jdGlvbiB0byBiZVxuICAgKiB1c2VkIHRvIHNjaGVkdWxlIHRoZSBuZXh0IGZyYW1lIHRvIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5zZXRTY2hlZHVsZUZ1bmN0aW9uID0gZnVuY3Rpb24gKHNjaGVkdWxlRnVuY3Rpb24pIHtcbiAgICB0aGlzLl9zY2hlZHVsZUZ1bmN0aW9uID0gc2NoZWR1bGVGdW5jdGlvbjtcbiAgfTtcblxuICAvKipcbiAgICogYGRlbGV0ZWAgYWxsIFwib3duXCIgcHJvcGVydGllcy4gIENhbGwgdGhpcyB3aGVuIHRoZSBgVHdlZW5hYmxlYCBpbnN0YW5jZVxuICAgKiBpcyBubyBsb25nZXIgbmVlZGVkIHRvIGZyZWUgbWVtb3J5LlxuICAgKiBAbWV0aG9kIGRpc3Bvc2VcbiAgICovXG4gIFR3ZWVuYWJsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcDtcbiAgICBmb3IgKHByb3AgaW4gdGhpcykge1xuICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIGFyZSB1c2VkIGZvciB0cmFuc2Zvcm1pbmcgdGhlIHByb3BlcnRpZXMgb2YgYSB0d2VlbiBhdCB2YXJpb3VzXG4gICAqIHBvaW50cyBpbiBhIFR3ZWVuYWJsZSdzIGxpZmUgY3ljbGUuICBTZWUgdGhlIFJFQURNRSBmb3IgbW9yZSBpbmZvIG9uIHRoaXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBUd2VlbmFibGUucHJvdG90eXBlLmZpbHRlciA9IHt9O1xuXG4gIC8qKlxuICAgKiBUaGlzIG9iamVjdCBjb250YWlucyBhbGwgb2YgdGhlIHR3ZWVucyBhdmFpbGFibGUgdG8gU2hpZnR5LiAgSXQgaXNcbiAgICogZXh0ZW5zaWJsZSAtIHNpbXBseSBhdHRhY2ggcHJvcGVydGllcyB0byB0aGUgYFR3ZWVuYWJsZS5wcm90b3R5cGUuZm9ybXVsYWBcbiAgICogT2JqZWN0IGZvbGxvd2luZyB0aGUgc2FtZSBmb3JtYXQgYXMgYGxpbmVhcmAuXG4gICAqXG4gICAqIGBwb3NgIHNob3VsZCBiZSBhIG5vcm1hbGl6ZWQgYG51bWJlcmAgKGJldHdlZW4gMCBhbmQgMSkuXG4gICAqIEBwcm9wZXJ0eSBmb3JtdWxhXG4gICAqIEB0eXBlIHtPYmplY3QoZnVuY3Rpb24pfVxuICAgKi9cbiAgVHdlZW5hYmxlLnByb3RvdHlwZS5mb3JtdWxhID0ge1xuICAgIGxpbmVhcjogZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gIH07XG5cbiAgZm9ybXVsYSA9IFR3ZWVuYWJsZS5wcm90b3R5cGUuZm9ybXVsYTtcblxuICBzaGFsbG93Q29weShUd2VlbmFibGUsIHtcbiAgICAnbm93Jzogbm93XG4gICAgLCdlYWNoJzogZWFjaFxuICAgICwndHdlZW5Qcm9wcyc6IHR3ZWVuUHJvcHNcbiAgICAsJ3R3ZWVuUHJvcCc6IHR3ZWVuUHJvcFxuICAgICwnYXBwbHlGaWx0ZXInOiBhcHBseUZpbHRlclxuICAgICwnc2hhbGxvd0NvcHknOiBzaGFsbG93Q29weVxuICAgICwnZGVmYXVsdHMnOiBkZWZhdWx0c1xuICAgICwnY29tcG9zZUVhc2luZ09iamVjdCc6IGNvbXBvc2VFYXNpbmdPYmplY3RcbiAgfSk7XG5cbiAgLy8gYHJvb3RgIGlzIHByb3ZpZGVkIGluIHRoZSBpbnRyby9vdXRybyBmaWxlcy5cblxuICAvLyBBIGhvb2sgdXNlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICBpZiAodHlwZW9mIFNISUZUWV9ERUJVR19OT1cgPT09ICdmdW5jdGlvbicpIHtcbiAgICByb290LnRpbWVvdXRIYW5kbGVyID0gdGltZW91dEhhbmRsZXI7XG4gIH1cblxuICAvLyBCb290c3RyYXAgVHdlZW5hYmxlIGFwcHJvcHJpYXRlbHkgZm9yIHRoZSBlbnZpcm9ubWVudC5cbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBUd2VlbmFibGU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtyZXR1cm4gVHdlZW5hYmxlO30pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiByb290LlR3ZWVuYWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBCcm93c2VyOiBNYWtlIGBUd2VlbmFibGVgIGdsb2JhbGx5IGFjY2Vzc2libGUuXG4gICAgcm9vdC5Ud2VlbmFibGUgPSBUd2VlbmFibGU7XG4gIH1cblxuICByZXR1cm4gVHdlZW5hYmxlO1xuXG59ICgpKTtcblxuLyohXG4gKiBBbGwgZXF1YXRpb25zIGFyZSBhZGFwdGVkIGZyb20gVGhvbWFzIEZ1Y2hzJ1xuICogW1NjcmlwdHkyXShodHRwczovL2dpdGh1Yi5jb20vbWFkcm9iYnkvc2NyaXB0eTIvYmxvYi9tYXN0ZXIvc3JjL2VmZmVjdHMvdHJhbnNpdGlvbnMvcGVubmVyLmpzKS5cbiAqXG4gKiBCYXNlZCBvbiBFYXNpbmcgRXF1YXRpb25zIChjKSAyMDAzIFtSb2JlcnRcbiAqIFBlbm5lcl0oaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tLyksIGFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgd29yayBpc1xuICogW3N1YmplY3QgdG8gdGVybXNdKGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmdfdGVybXNfb2ZfdXNlLmh0bWwpLlxuICovXG5cbi8qIVxuICogIFRFUk1TIE9GIFVTRSAtIEVBU0lORyBFUVVBVElPTlNcbiAqICBPcGVuIHNvdXJjZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UuXG4gKiAgRWFzaW5nIEVxdWF0aW9ucyAoYykgMjAwMyBSb2JlcnQgUGVubmVyLCBhbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbjsoZnVuY3Rpb24gKCkge1xuXG4gIFR3ZWVuYWJsZS5zaGFsbG93Q29weShUd2VlbmFibGUucHJvdG90eXBlLmZvcm11bGEsIHtcbiAgICBlYXNlSW5RdWFkOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3cocG9zLCAyKTtcbiAgICB9LFxuXG4gICAgZWFzZU91dFF1YWQ6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAtKE1hdGgucG93KChwb3MgLSAxKSwgMikgLSAxKTtcbiAgICB9LFxuXG4gICAgZWFzZUluT3V0UXVhZDogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKChwb3MgLz0gMC41KSA8IDEpIHtyZXR1cm4gMC41ICogTWF0aC5wb3cocG9zLDIpO31cbiAgICAgIHJldHVybiAtMC41ICogKChwb3MgLT0gMikgKiBwb3MgLSAyKTtcbiAgICB9LFxuXG4gICAgZWFzZUluQ3ViaWM6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyhwb3MsIDMpO1xuICAgIH0sXG5cbiAgICBlYXNlT3V0Q3ViaWM6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAoTWF0aC5wb3coKHBvcyAtIDEpLCAzKSArIDEpO1xuICAgIH0sXG5cbiAgICBlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKChwb3MgLz0gMC41KSA8IDEpIHtyZXR1cm4gMC41ICogTWF0aC5wb3cocG9zLDMpO31cbiAgICAgIHJldHVybiAwLjUgKiAoTWF0aC5wb3coKHBvcyAtIDIpLDMpICsgMik7XG4gICAgfSxcblxuICAgIGVhc2VJblF1YXJ0OiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3cocG9zLCA0KTtcbiAgICB9LFxuXG4gICAgZWFzZU91dFF1YXJ0OiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICByZXR1cm4gLShNYXRoLnBvdygocG9zIC0gMSksIDQpIC0gMSk7XG4gICAgfSxcblxuICAgIGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICBpZiAoKHBvcyAvPSAwLjUpIDwgMSkge3JldHVybiAwLjUgKiBNYXRoLnBvdyhwb3MsNCk7fVxuICAgICAgcmV0dXJuIC0wLjUgKiAoKHBvcyAtPSAyKSAqIE1hdGgucG93KHBvcywzKSAtIDIpO1xuICAgIH0sXG5cbiAgICBlYXNlSW5RdWludDogZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHBvcywgNSk7XG4gICAgfSxcblxuICAgIGVhc2VPdXRRdWludDogZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIChNYXRoLnBvdygocG9zIC0gMSksIDUpICsgMSk7XG4gICAgfSxcblxuICAgIGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICBpZiAoKHBvcyAvPSAwLjUpIDwgMSkge3JldHVybiAwLjUgKiBNYXRoLnBvdyhwb3MsNSk7fVxuICAgICAgcmV0dXJuIDAuNSAqIChNYXRoLnBvdygocG9zIC0gMiksNSkgKyAyKTtcbiAgICB9LFxuXG4gICAgZWFzZUluU2luZTogZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIC1NYXRoLmNvcyhwb3MgKiAoTWF0aC5QSSAvIDIpKSArIDE7XG4gICAgfSxcblxuICAgIGVhc2VPdXRTaW5lOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICByZXR1cm4gTWF0aC5zaW4ocG9zICogKE1hdGguUEkgLyAyKSk7XG4gICAgfSxcblxuICAgIGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAoLTAuNSAqIChNYXRoLmNvcyhNYXRoLlBJICogcG9zKSAtIDEpKTtcbiAgICB9LFxuXG4gICAgZWFzZUluRXhwbzogZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIChwb3MgPT09IDApID8gMCA6IE1hdGgucG93KDIsIDEwICogKHBvcyAtIDEpKTtcbiAgICB9LFxuXG4gICAgZWFzZU91dEV4cG86IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAocG9zID09PSAxKSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogcG9zKSArIDE7XG4gICAgfSxcblxuICAgIGVhc2VJbk91dEV4cG86IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIGlmIChwb3MgPT09IDApIHtyZXR1cm4gMDt9XG4gICAgICBpZiAocG9zID09PSAxKSB7cmV0dXJuIDE7fVxuICAgICAgaWYgKChwb3MgLz0gMC41KSA8IDEpIHtyZXR1cm4gMC41ICogTWF0aC5wb3coMiwxMCAqIChwb3MgLSAxKSk7fVxuICAgICAgcmV0dXJuIDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogLS1wb3MpICsgMik7XG4gICAgfSxcblxuICAgIGVhc2VJbkNpcmM6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAtKE1hdGguc3FydCgxIC0gKHBvcyAqIHBvcykpIC0gMSk7XG4gICAgfSxcblxuICAgIGVhc2VPdXRDaXJjOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSBNYXRoLnBvdygocG9zIC0gMSksIDIpKTtcbiAgICB9LFxuXG4gICAgZWFzZUluT3V0Q2lyYzogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKChwb3MgLz0gMC41KSA8IDEpIHtyZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHBvcyAqIHBvcykgLSAxKTt9XG4gICAgICByZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKHBvcyAtPSAyKSAqIHBvcykgKyAxKTtcbiAgICB9LFxuXG4gICAgZWFzZU91dEJvdW5jZTogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKChwb3MpIDwgKDEgLyAyLjc1KSkge1xuICAgICAgICByZXR1cm4gKDcuNTYyNSAqIHBvcyAqIHBvcyk7XG4gICAgICB9IGVsc2UgaWYgKHBvcyA8ICgyIC8gMi43NSkpIHtcbiAgICAgICAgcmV0dXJuICg3LjU2MjUgKiAocG9zIC09ICgxLjUgLyAyLjc1KSkgKiBwb3MgKyAwLjc1KTtcbiAgICAgIH0gZWxzZSBpZiAocG9zIDwgKDIuNSAvIDIuNzUpKSB7XG4gICAgICAgIHJldHVybiAoNy41NjI1ICogKHBvcyAtPSAoMi4yNSAvIDIuNzUpKSAqIHBvcyArIDAuOTM3NSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKDcuNTYyNSAqIChwb3MgLT0gKDIuNjI1IC8gMi43NSkpICogcG9zICsgMC45ODQzNzUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBlYXNlSW5CYWNrOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICByZXR1cm4gKHBvcykgKiBwb3MgKiAoKHMgKyAxKSAqIHBvcyAtIHMpO1xuICAgIH0sXG5cbiAgICBlYXNlT3V0QmFjazogZnVuY3Rpb24gKHBvcykge1xuICAgICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgICAgcmV0dXJuIChwb3MgPSBwb3MgLSAxKSAqIHBvcyAqICgocyArIDEpICogcG9zICsgcykgKyAxO1xuICAgIH0sXG5cbiAgICBlYXNlSW5PdXRCYWNrOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICBpZiAoKHBvcyAvPSAwLjUpIDwgMSkge1xuICAgICAgICByZXR1cm4gMC41ICogKHBvcyAqIHBvcyAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHBvcyAtIHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwLjUgKiAoKHBvcyAtPSAyKSAqIHBvcyAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHBvcyArIHMpICsgMik7XG4gICAgfSxcblxuICAgIGVsYXN0aWM6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIC8vIGpzaGludCBtYXhsZW46OTBcbiAgICAgIHJldHVybiAtMSAqIE1hdGgucG93KDQsLTggKiBwb3MpICogTWF0aC5zaW4oKHBvcyAqIDYgLSAxKSAqICgyICogTWF0aC5QSSkgLyAyKSArIDE7XG4gICAgfSxcblxuICAgIHN3aW5nRnJvbVRvOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICByZXR1cm4gKChwb3MgLz0gMC41KSA8IDEpID9cbiAgICAgICAgICAwLjUgKiAocG9zICogcG9zICogKCgocyAqPSAoMS41MjUpKSArIDEpICogcG9zIC0gcykpIDpcbiAgICAgICAgICAwLjUgKiAoKHBvcyAtPSAyKSAqIHBvcyAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHBvcyArIHMpICsgMik7XG4gICAgfSxcblxuICAgIHN3aW5nRnJvbTogZnVuY3Rpb24gKHBvcykge1xuICAgICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgICAgcmV0dXJuIHBvcyAqIHBvcyAqICgocyArIDEpICogcG9zIC0gcyk7XG4gICAgfSxcblxuICAgIHN3aW5nVG86IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHZhciBzID0gMS43MDE1ODtcbiAgICAgIHJldHVybiAocG9zIC09IDEpICogcG9zICogKChzICsgMSkgKiBwb3MgKyBzKSArIDE7XG4gICAgfSxcblxuICAgIGJvdW5jZTogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKHBvcyA8ICgxIC8gMi43NSkpIHtcbiAgICAgICAgcmV0dXJuICg3LjU2MjUgKiBwb3MgKiBwb3MpO1xuICAgICAgfSBlbHNlIGlmIChwb3MgPCAoMiAvIDIuNzUpKSB7XG4gICAgICAgIHJldHVybiAoNy41NjI1ICogKHBvcyAtPSAoMS41IC8gMi43NSkpICogcG9zICsgMC43NSk7XG4gICAgICB9IGVsc2UgaWYgKHBvcyA8ICgyLjUgLyAyLjc1KSkge1xuICAgICAgICByZXR1cm4gKDcuNTYyNSAqIChwb3MgLT0gKDIuMjUgLyAyLjc1KSkgKiBwb3MgKyAwLjkzNzUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICg3LjU2MjUgKiAocG9zIC09ICgyLjYyNSAvIDIuNzUpKSAqIHBvcyArIDAuOTg0Mzc1KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYm91bmNlUGFzdDogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKHBvcyA8ICgxIC8gMi43NSkpIHtcbiAgICAgICAgcmV0dXJuICg3LjU2MjUgKiBwb3MgKiBwb3MpO1xuICAgICAgfSBlbHNlIGlmIChwb3MgPCAoMiAvIDIuNzUpKSB7XG4gICAgICAgIHJldHVybiAyIC0gKDcuNTYyNSAqIChwb3MgLT0gKDEuNSAvIDIuNzUpKSAqIHBvcyArIDAuNzUpO1xuICAgICAgfSBlbHNlIGlmIChwb3MgPCAoMi41IC8gMi43NSkpIHtcbiAgICAgICAgcmV0dXJuIDIgLSAoNy41NjI1ICogKHBvcyAtPSAoMi4yNSAvIDIuNzUpKSAqIHBvcyArIDAuOTM3NSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMiAtICg3LjU2MjUgKiAocG9zIC09ICgyLjYyNSAvIDIuNzUpKSAqIHBvcyArIDAuOTg0Mzc1KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZWFzZUZyb21UbzogZnVuY3Rpb24gKHBvcykge1xuICAgICAgaWYgKChwb3MgLz0gMC41KSA8IDEpIHtyZXR1cm4gMC41ICogTWF0aC5wb3cocG9zLDQpO31cbiAgICAgIHJldHVybiAtMC41ICogKChwb3MgLT0gMikgKiBNYXRoLnBvdyhwb3MsMykgLSAyKTtcbiAgICB9LFxuXG4gICAgZWFzZUZyb206IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyhwb3MsNCk7XG4gICAgfSxcblxuICAgIGVhc2VUbzogZnVuY3Rpb24gKHBvcykge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHBvcywwLjI1KTtcbiAgICB9XG4gIH0pO1xuXG59KCkpO1xuXG4vLyBqc2hpbnQgbWF4bGVuOjEwMFxuLyoqXG4gKiBUaGUgQmV6aWVyIG1hZ2ljIGluIHRoaXMgZmlsZSBpcyBhZGFwdGVkL2NvcGllZCBhbG1vc3Qgd2hvbGVzYWxlIGZyb21cbiAqIFtTY3JpcHR5Ml0oaHR0cHM6Ly9naXRodWIuY29tL21hZHJvYmJ5L3NjcmlwdHkyL2Jsb2IvbWFzdGVyL3NyYy9lZmZlY3RzL3RyYW5zaXRpb25zL2N1YmljLWJlemllci5qcyksXG4gKiB3aGljaCB3YXMgYWRhcHRlZCBmcm9tIEFwcGxlIGNvZGUgKHdoaWNoIHByb2JhYmx5IGNhbWUgZnJvbVxuICogW2hlcmVdKGh0dHA6Ly9vcGVuc291cmNlLmFwcGxlLmNvbS9zb3VyY2UvV2ViQ29yZS9XZWJDb3JlLTk1NS42Ni9wbGF0Zm9ybS9ncmFwaGljcy9Vbml0QmV6aWVyLmgpKS5cbiAqIFNwZWNpYWwgdGhhbmtzIHRvIEFwcGxlIGFuZCBUaG9tYXMgRnVjaHMgZm9yIG11Y2ggb2YgdGhpcyBjb2RlLlxuICovXG5cbi8qKlxuICogIENvcHlyaWdodCAoYykgMjAwNiBBcHBsZSBDb21wdXRlciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAgMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiAgYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIocykgbm9yIHRoZSBuYW1lcyBvZiBhbnlcbiAqICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICogIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiAgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4gKiAgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiAgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqICBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuICogIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiAgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbjsoZnVuY3Rpb24gKCkge1xuICAvLyBwb3J0IG9mIHdlYmtpdCBjdWJpYyBiZXppZXIgaGFuZGxpbmcgYnkgaHR0cDovL3d3dy5uZXR6Z2VzdGEuZGUvZGV2L1xuICBmdW5jdGlvbiBjdWJpY0JlemllckF0VGltZSh0LHAxeCxwMXkscDJ4LHAyeSxkdXJhdGlvbikge1xuICAgIHZhciBheCA9IDAsYnggPSAwLGN4ID0gMCxheSA9IDAsYnkgPSAwLGN5ID0gMDtcbiAgICBmdW5jdGlvbiBzYW1wbGVDdXJ2ZVgodCkge1xuICAgICAgcmV0dXJuICgoYXggKiB0ICsgYngpICogdCArIGN4KSAqIHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNhbXBsZUN1cnZlWSh0KSB7XG4gICAgICByZXR1cm4gKChheSAqIHQgKyBieSkgKiB0ICsgY3kpICogdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2FtcGxlQ3VydmVEZXJpdmF0aXZlWCh0KSB7XG4gICAgICByZXR1cm4gKDMuMCAqIGF4ICogdCArIDIuMCAqIGJ4KSAqIHQgKyBjeDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29sdmVFcHNpbG9uKGR1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gMS4wIC8gKDIwMC4wICogZHVyYXRpb24pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzb2x2ZSh4LGVwc2lsb24pIHtcbiAgICAgIHJldHVybiBzYW1wbGVDdXJ2ZVkoc29sdmVDdXJ2ZVgoeCwgZXBzaWxvbikpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmYWJzKG4pIHtcbiAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMCAtIG47XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNvbHZlQ3VydmVYKHgsIGVwc2lsb24pIHtcbiAgICAgIHZhciB0MCx0MSx0Mix4MixkMixpO1xuICAgICAgZm9yICh0MiA9IHgsIGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgICAgIHgyID0gc2FtcGxlQ3VydmVYKHQyKSAtIHg7XG4gICAgICAgIGlmIChmYWJzKHgyKSA8IGVwc2lsb24pIHtcbiAgICAgICAgICByZXR1cm4gdDI7XG4gICAgICAgIH1cbiAgICAgICAgZDIgPSBzYW1wbGVDdXJ2ZURlcml2YXRpdmVYKHQyKTtcbiAgICAgICAgaWYgKGZhYnMoZDIpIDwgMWUtNikge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHQyID0gdDIgLSB4MiAvIGQyO1xuICAgICAgfVxuICAgICAgdDAgPSAwLjA7XG4gICAgICB0MSA9IDEuMDtcbiAgICAgIHQyID0geDtcbiAgICAgIGlmICh0MiA8IHQwKSB7XG4gICAgICAgIHJldHVybiB0MDtcbiAgICAgIH1cbiAgICAgIGlmICh0MiA+IHQxKSB7XG4gICAgICAgIHJldHVybiB0MTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICh0MCA8IHQxKSB7XG4gICAgICAgIHgyID0gc2FtcGxlQ3VydmVYKHQyKTtcbiAgICAgICAgaWYgKGZhYnMoeDIgLSB4KSA8IGVwc2lsb24pIHtcbiAgICAgICAgICByZXR1cm4gdDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPiB4Mikge1xuICAgICAgICAgIHQwID0gdDI7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICB0MSA9IHQyO1xuICAgICAgICB9XG4gICAgICAgIHQyID0gKHQxIC0gdDApICogMC41ICsgdDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdDI7IC8vIEZhaWx1cmUuXG4gICAgfVxuICAgIGN4ID0gMy4wICogcDF4O1xuICAgIGJ4ID0gMy4wICogKHAyeCAtIHAxeCkgLSBjeDtcbiAgICBheCA9IDEuMCAtIGN4IC0gYng7XG4gICAgY3kgPSAzLjAgKiBwMXk7XG4gICAgYnkgPSAzLjAgKiAocDJ5IC0gcDF5KSAtIGN5O1xuICAgIGF5ID0gMS4wIC0gY3kgLSBieTtcbiAgICByZXR1cm4gc29sdmUodCwgc29sdmVFcHNpbG9uKGR1cmF0aW9uKSk7XG4gIH1cbiAgLyoqXG4gICAqICBnZXRDdWJpY0JlemllclRyYW5zaXRpb24oeDEsIHkxLCB4MiwgeTIpIC0+IEZ1bmN0aW9uXG4gICAqXG4gICAqICBHZW5lcmF0ZXMgYSB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvbiB0aGF0IGlzIGNvbXBhdGlibGVcbiAgICogIHdpdGggV2ViS2l0J3MgQ1NTIHRyYW5zaXRpb25zIGAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uYFxuICAgKiAgQ1NTIHByb3BlcnR5LlxuICAgKlxuICAgKiAgVGhlIFczQyBoYXMgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBDU1MzIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uczpcbiAgICogIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdHJhbnNpdGlvbnMvI3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uX3RhZ1xuICAgKlxuICAgKiAgQHBhcmFtIHtudW1iZXJ9IHgxXG4gICAqICBAcGFyYW0ge251bWJlcn0geTFcbiAgICogIEBwYXJhbSB7bnVtYmVyfSB4MlxuICAgKiAgQHBhcmFtIHtudW1iZXJ9IHkyXG4gICAqICBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICogIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBnZXRDdWJpY0JlemllclRyYW5zaXRpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiBjdWJpY0JlemllckF0VGltZShwb3MseDEseTEseDIseTIsMSk7XG4gICAgfTtcbiAgfVxuICAvLyBFbmQgcG9ydGVkIGNvZGVcblxuICAvKipcbiAgICogQ3JlYXRlIGEgQmV6aWVyIGVhc2luZyBmdW5jdGlvbiBhbmQgYXR0YWNoIGl0IHRvIGB7eyNjcm9zc0xpbmtcbiAgICogXCJUd2VlbmFibGUvZm9ybXVsYTpwcm9wZXJ0eVwifX1Ud2VlbmFibGUjZm9ybXVsYXt7L2Nyb3NzTGlua319YC4gIFRoaXNcbiAgICogZnVuY3Rpb24gZ2l2ZXMgeW91IHRvdGFsIGNvbnRyb2wgb3ZlciB0aGUgZWFzaW5nIGN1cnZlLiAgTWF0dGhldyBMZWluJ3NcbiAgICogW0NlYXNlcl0oaHR0cDovL21hdHRoZXdsZWluLmNvbS9jZWFzZXIvKSBpcyBhIHVzZWZ1bCB0b29sIGZvciB2aXN1YWxpemluZ1xuICAgKiB0aGUgY3VydmVzIHlvdSBjYW4gbWFrZSB3aXRoIHRoaXMgZnVuY3Rpb24uXG4gICAqIEBtZXRob2Qgc2V0QmV6aWVyRnVuY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGVhc2luZyBjdXJ2ZS4gIE92ZXJ3cml0ZXMgdGhlIG9sZFxuICAgKiBlYXNpbmcgZnVuY3Rpb24gb24gYHt7I2Nyb3NzTGlua1xuICAgKiBcIlR3ZWVuYWJsZS9mb3JtdWxhOnByb3BlcnR5XCJ9fVR3ZWVuYWJsZSNmb3JtdWxhe3svY3Jvc3NMaW5rfX1gIGlmIGl0XG4gICAqIGV4aXN0cy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHgxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5MVxuICAgKiBAcGFyYW0ge251bWJlcn0geDJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkyXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgZWFzaW5nIGZ1bmN0aW9uIHRoYXQgd2FzIGF0dGFjaGVkIHRvXG4gICAqIFR3ZWVuYWJsZS5wcm90b3R5cGUuZm9ybXVsYS5cbiAgICovXG4gIFR3ZWVuYWJsZS5zZXRCZXppZXJGdW5jdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIHZhciBjdWJpY0JlemllclRyYW5zaXRpb24gPSBnZXRDdWJpY0JlemllclRyYW5zaXRpb24oeDEsIHkxLCB4MiwgeTIpO1xuICAgIGN1YmljQmV6aWVyVHJhbnNpdGlvbi5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gICAgY3ViaWNCZXppZXJUcmFuc2l0aW9uLngxID0geDE7XG4gICAgY3ViaWNCZXppZXJUcmFuc2l0aW9uLnkxID0geTE7XG4gICAgY3ViaWNCZXppZXJUcmFuc2l0aW9uLngyID0geDI7XG4gICAgY3ViaWNCZXppZXJUcmFuc2l0aW9uLnkyID0geTI7XG5cbiAgICByZXR1cm4gVHdlZW5hYmxlLnByb3RvdHlwZS5mb3JtdWxhW25hbWVdID0gY3ViaWNCZXppZXJUcmFuc2l0aW9uO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIGBkZWxldGVgIGFuIGVhc2luZyBmdW5jdGlvbiBmcm9tIGB7eyNjcm9zc0xpbmtcbiAgICogXCJUd2VlbmFibGUvZm9ybXVsYTpwcm9wZXJ0eVwifX1Ud2VlbmFibGUjZm9ybXVsYXt7L2Nyb3NzTGlua319YC4gIEJlXG4gICAqIGNhcmVmdWwgd2l0aCB0aGlzIG1ldGhvZCwgYXMgaXQgYGRlbGV0ZWBzIHdoYXRldmVyIGVhc2luZyBmb3JtdWxhIG1hdGNoZXNcbiAgICogYG5hbWVgICh3aGljaCBtZWFucyB5b3UgY2FuIGRlbGV0ZSBzdGFuZGFyZCBTaGlmdHkgZWFzaW5nIGZ1bmN0aW9ucykuXG4gICAqIEBtZXRob2QgdW5zZXRCZXppZXJGdW5jdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZWFzaW5nIGZ1bmN0aW9uIHRvIGRlbGV0ZS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAqL1xuICBUd2VlbmFibGUudW5zZXRCZXppZXJGdW5jdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgZGVsZXRlIFR3ZWVuYWJsZS5wcm90b3R5cGUuZm9ybXVsYVtuYW1lXTtcbiAgfTtcblxufSkoKTtcblxuOyhmdW5jdGlvbiAoKSB7XG5cbiAgZnVuY3Rpb24gZ2V0SW50ZXJwb2xhdGVkVmFsdWVzIChcbiAgICBmcm9tLCBjdXJyZW50LCB0YXJnZXRTdGF0ZSwgcG9zaXRpb24sIGVhc2luZywgZGVsYXkpIHtcbiAgICByZXR1cm4gVHdlZW5hYmxlLnR3ZWVuUHJvcHMoXG4gICAgICBwb3NpdGlvbiwgY3VycmVudCwgZnJvbSwgdGFyZ2V0U3RhdGUsIDEsIGRlbGF5LCBlYXNpbmcpO1xuICB9XG5cbiAgLy8gRmFrZSBhIFR3ZWVuYWJsZSBhbmQgcGF0Y2ggc29tZSBpbnRlcm5hbHMuICBUaGlzIGFwcHJvYWNoIGFsbG93cyB1cyB0b1xuICAvLyBza2lwIHVuZWNjZXNzYXJ5IHByb2Nlc3NpbmcgYW5kIG9iamVjdCByZWNyZWF0aW9uLCBjdXR0aW5nIGRvd24gb24gZ2FyYmFnZVxuICAvLyBjb2xsZWN0aW9uIHBhdXNlcy5cbiAgdmFyIG1vY2tUd2VlbmFibGUgPSBuZXcgVHdlZW5hYmxlKCk7XG4gIG1vY2tUd2VlbmFibGUuX2ZpbHRlckFyZ3MgPSBbXTtcblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgbWlkcG9pbnQgb2YgdHdvIE9iamVjdHMuICBUaGlzIG1ldGhvZCBlZmZlY3RpdmVseSBjYWxjdWxhdGVzIGFcbiAgICogc3BlY2lmaWMgZnJhbWUgb2YgYW5pbWF0aW9uIHRoYXQgYHt7I2Nyb3NzTGlua1xuICAgKiBcIlR3ZWVuYWJsZS90d2VlbjptZXRob2RcIn19e3svY3Jvc3NMaW5rfX1gIGRvZXMgbWFueSB0aW1lcyBvdmVyIHRoZSBjb3Vyc2VcbiAgICogb2YgYSBmdWxsIHR3ZWVuLlxuICAgKlxuICAgKiAgICAgdmFyIGludGVycG9sYXRlZFZhbHVlcyA9IFR3ZWVuYWJsZS5pbnRlcnBvbGF0ZSh7XG4gICAqICAgICAgIHdpZHRoOiAnMTAwcHgnLFxuICAgKiAgICAgICBvcGFjaXR5OiAwLFxuICAgKiAgICAgICBjb2xvcjogJyNmZmYnXG4gICAqICAgICB9LCB7XG4gICAqICAgICAgIHdpZHRoOiAnMjAwcHgnLFxuICAgKiAgICAgICBvcGFjaXR5OiAxLFxuICAgKiAgICAgICBjb2xvcjogJyMwMDAnXG4gICAqICAgICB9LCAwLjUpO1xuICAgKlxuICAgKiAgICAgY29uc29sZS5sb2coaW50ZXJwb2xhdGVkVmFsdWVzKTtcbiAgICogICAgIC8vIHtvcGFjaXR5OiAwLjUsIHdpZHRoOiBcIjE1MHB4XCIsIGNvbG9yOiBcInJnYigxMjcsMTI3LDEyNylcIn1cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWV0aG9kIGludGVycG9sYXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmcm9tIFRoZSBzdGFydGluZyB2YWx1ZXMgdG8gdHdlZW4gZnJvbS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFN0YXRlIFRoZSBlbmRpbmcgdmFsdWVzIHRvIHR3ZWVuIHRvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gVGhlIG5vcm1hbGl6ZWQgcG9zaXRpb24gdmFsdWUgKGJldHdlZW4gYDAuMGAgYW5kXG4gICAqIGAxLjBgKSB0byBpbnRlcnBvbGF0ZSB0aGUgdmFsdWVzIGJldHdlZW4gYGZyb21gIGFuZCBgdG9gIGZvci4gIGBmcm9tYFxuICAgKiByZXByZXNlbnRzIGAwYCBhbmQgYHRvYCByZXByZXNlbnRzIGAxYC5cbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZ3xGdW5jdGlvbj58c3RyaW5nfEZ1bmN0aW9ufSBlYXNpbmcgVGhlIGVhc2luZ1xuICAgKiBjdXJ2ZShzKSB0byBjYWxjdWxhdGUgdGhlIG1pZHBvaW50IGFnYWluc3QuICBZb3UgY2FuIHJlZmVyZW5jZSBhbnkgZWFzaW5nXG4gICAqIGZ1bmN0aW9uIGF0dGFjaGVkIHRvIGBUd2VlbmFibGUucHJvdG90eXBlLmZvcm11bGFgLCBvciBwcm92aWRlIHRoZSBlYXNpbmdcbiAgICogZnVuY3Rpb24ocykgZGlyZWN0bHkuICBJZiBvbWl0dGVkLCB0aGlzIGRlZmF1bHRzIHRvIFwibGluZWFyXCIuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2RlbGF5IE9wdGlvbmFsIGRlbGF5IHRvIHBhZCB0aGUgYmVnaW5uaW5nIG9mIHRoZVxuICAgKiBpbnRlcnBvbGF0ZWQgdHdlZW4gd2l0aC4gIFRoaXMgaW5jcmVhc2VzIHRoZSByYW5nZSBvZiBgcG9zaXRpb25gIGZyb20gKGAwYFxuICAgKiB0aHJvdWdoIGAxYCkgdG8gKGAwYCB0aHJvdWdoIGAxICsgb3B0X2RlbGF5YCkuICBTbywgYSBkZWxheSBvZiBgMC41YCB3b3VsZFxuICAgKiBpbmNyZWFzZSBhbGwgdmFsaWQgdmFsdWVzIG9mIGBwb3NpdGlvbmAgdG8gbnVtYmVycyBiZXR3ZWVuIGAwYCBhbmQgYDEuNWAuXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICovXG4gIFR3ZWVuYWJsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIChcbiAgICBmcm9tLCB0YXJnZXRTdGF0ZSwgcG9zaXRpb24sIGVhc2luZywgb3B0X2RlbGF5KSB7XG5cbiAgICB2YXIgY3VycmVudCA9IFR3ZWVuYWJsZS5zaGFsbG93Q29weSh7fSwgZnJvbSk7XG4gICAgdmFyIGRlbGF5ID0gb3B0X2RlbGF5IHx8IDA7XG4gICAgdmFyIGVhc2luZ09iamVjdCA9IFR3ZWVuYWJsZS5jb21wb3NlRWFzaW5nT2JqZWN0KFxuICAgICAgZnJvbSwgZWFzaW5nIHx8ICdsaW5lYXInKTtcblxuICAgIG1vY2tUd2VlbmFibGUuc2V0KHt9KTtcblxuICAgIC8vIEFsaWFzIGFuZCByZXVzZSB0aGUgX2ZpbHRlckFyZ3MgYXJyYXkgaW5zdGVhZCBvZiByZWNyZWF0aW5nIGl0LlxuICAgIHZhciBmaWx0ZXJBcmdzID0gbW9ja1R3ZWVuYWJsZS5fZmlsdGVyQXJncztcbiAgICBmaWx0ZXJBcmdzLmxlbmd0aCA9IDA7XG4gICAgZmlsdGVyQXJnc1swXSA9IGN1cnJlbnQ7XG4gICAgZmlsdGVyQXJnc1sxXSA9IGZyb207XG4gICAgZmlsdGVyQXJnc1syXSA9IHRhcmdldFN0YXRlO1xuICAgIGZpbHRlckFyZ3NbM10gPSBlYXNpbmdPYmplY3Q7XG5cbiAgICAvLyBBbnkgZGVmaW5lZCB2YWx1ZSB0cmFuc2Zvcm1hdGlvbiBtdXN0IGJlIGFwcGxpZWRcbiAgICBUd2VlbmFibGUuYXBwbHlGaWx0ZXIobW9ja1R3ZWVuYWJsZSwgJ3R3ZWVuQ3JlYXRlZCcpO1xuICAgIFR3ZWVuYWJsZS5hcHBseUZpbHRlcihtb2NrVHdlZW5hYmxlLCAnYmVmb3JlVHdlZW4nKTtcblxuICAgIHZhciBpbnRlcnBvbGF0ZWRWYWx1ZXMgPSBnZXRJbnRlcnBvbGF0ZWRWYWx1ZXMoXG4gICAgICBmcm9tLCBjdXJyZW50LCB0YXJnZXRTdGF0ZSwgcG9zaXRpb24sIGVhc2luZ09iamVjdCwgZGVsYXkpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHZhbHVlcyBiYWNrIGludG8gdGhlaXIgb3JpZ2luYWwgZm9ybWF0XG4gICAgVHdlZW5hYmxlLmFwcGx5RmlsdGVyKG1vY2tUd2VlbmFibGUsICdhZnRlclR3ZWVuJyk7XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGVkVmFsdWVzO1xuICB9O1xuXG59KCkpO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGFkZHMgc3RyaW5nIGludGVycG9sYXRpb24gc3VwcG9ydCB0byBTaGlmdHkuXG4gKlxuICogVGhlIFRva2VuIGV4dGVuc2lvbiBhbGxvd3MgU2hpZnR5IHRvIHR3ZWVuIG51bWJlcnMgaW5zaWRlIG9mIHN0cmluZ3MuICBBbW9uZ1xuICogb3RoZXIgdGhpbmdzLCB0aGlzIGFsbG93cyB5b3UgdG8gYW5pbWF0ZSBDU1MgcHJvcGVydGllcy4gIEZvciBleGFtcGxlLCB5b3VcbiAqIGNhbiBkbyB0aGlzOlxuICpcbiAqICAgICB2YXIgdHdlZW5hYmxlID0gbmV3IFR3ZWVuYWJsZSgpO1xuICogICAgIHR3ZWVuYWJsZS50d2Vlbih7XG4gKiAgICAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoNDVweCknIH0sXG4gKiAgICAgICB0bzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDkweHApJyB9XG4gKiAgICAgfSk7XG4gKlxuICogYHRyYW5zbGF0ZVgoNDUpYCB3aWxsIGJlIHR3ZWVuZWQgdG8gYHRyYW5zbGF0ZVgoOTApYC4gIFRvIGRlbW9uc3RyYXRlOlxuICpcbiAqICAgICB2YXIgdHdlZW5hYmxlID0gbmV3IFR3ZWVuYWJsZSgpO1xuICogICAgIHR3ZWVuYWJsZS50d2Vlbih7XG4gKiAgICAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoNDVweCknIH0sXG4gKiAgICAgICB0bzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDkwcHgpJyB9LFxuICogICAgICAgc3RlcDogZnVuY3Rpb24gKHN0YXRlKSB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLnRyYW5zZm9ybSk7XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogVGhlIGFib3ZlIHNuaXBwZXQgd2lsbCBsb2cgc29tZXRoaW5nIGxpa2UgdGhpcyBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiAgICAgdHJhbnNsYXRlWCg2MC4zcHgpXG4gKiAgICAgLi4uXG4gKiAgICAgdHJhbnNsYXRlWCg3Ni4wNXB4KVxuICogICAgIC4uLlxuICogICAgIHRyYW5zbGF0ZVgoOTBweClcbiAqXG4gKiBBbm90aGVyIHVzZSBmb3IgdGhpcyBpcyBhbmltYXRpbmcgY29sb3JzOlxuICpcbiAqICAgICB2YXIgdHdlZW5hYmxlID0gbmV3IFR3ZWVuYWJsZSgpO1xuICogICAgIHR3ZWVuYWJsZS50d2Vlbih7XG4gKiAgICAgICBmcm9tOiB7IGNvbG9yOiAncmdiKDAsMjU1LDApJyB9LFxuICogICAgICAgdG86IHsgY29sb3I6ICdyZ2IoMjU1LDAsMjU1KScgfSxcbiAqICAgICAgIHN0ZXA6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICogICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS5jb2xvcik7XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogVGhlIGFib3ZlIHNuaXBwZXQgd2lsbCBsb2cgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAqXG4gKiAgICAgcmdiKDg0LDE3MCw4NClcbiAqICAgICAuLi5cbiAqICAgICByZ2IoMTcwLDg0LDE3MClcbiAqICAgICAuLi5cbiAqICAgICByZ2IoMjU1LDAsMjU1KVxuICpcbiAqIFRoaXMgZXh0ZW5zaW9uIGFsc28gc3VwcG9ydHMgaGV4YWRlY2ltYWwgY29sb3JzLCBpbiBib3RoIGxvbmcgKGAjZmYwMGZmYClcbiAqIGFuZCBzaG9ydCAoYCNmMGZgKSBmb3Jtcy4gIEJlIGF3YXJlIHRoYXQgaGV4YWRlY2ltYWwgaW5wdXQgdmFsdWVzIHdpbGwgYmVcbiAqIGNvbnZlcnRlZCBpbnRvIHRoZSBlcXVpdmFsZW50IFJHQiBvdXRwdXQgdmFsdWVzLiAgVGhpcyBpcyBkb25lIHRvIG9wdGltaXplXG4gKiBmb3IgcGVyZm9ybWFuY2UuXG4gKlxuICogICAgIHZhciB0d2VlbmFibGUgPSBuZXcgVHdlZW5hYmxlKCk7XG4gKiAgICAgdHdlZW5hYmxlLnR3ZWVuKHtcbiAqICAgICAgIGZyb206IHsgY29sb3I6ICcjMGYwJyB9LFxuICogICAgICAgdG86IHsgY29sb3I6ICcjZjBmJyB9LFxuICogICAgICAgc3RlcDogZnVuY3Rpb24gKHN0YXRlKSB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLmNvbG9yKTtcbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKiBUaGlzIHNuaXBwZXQgd2lsbCBnZW5lcmF0ZSB0aGUgc2FtZSBvdXRwdXQgYXMgdGhlIG9uZSBiZWZvcmUgaXQgYmVjYXVzZVxuICogZXF1aXZhbGVudCB2YWx1ZXMgd2VyZSBzdXBwbGllZCAoanVzdCBpbiBoZXhhZGVjaW1hbCBmb3JtIHJhdGhlciB0aGFuIFJHQik6XG4gKlxuICogICAgIHJnYig4NCwxNzAsODQpXG4gKiAgICAgLi4uXG4gKiAgICAgcmdiKDE3MCw4NCwxNzApXG4gKiAgICAgLi4uXG4gKiAgICAgcmdiKDI1NSwwLDI1NSlcbiAqXG4gKiAjIyBFYXNpbmcgc3VwcG9ydFxuICpcbiAqIEVhc2luZyB3b3JrcyBzb21ld2hhdCBkaWZmZXJlbnRseSBpbiB0aGUgVG9rZW4gZXh0ZW5zaW9uLiAgVGhpcyBpcyBiZWNhdXNlXG4gKiBzb21lIENTUyBwcm9wZXJ0aWVzIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGluIHRoZW0sIGFuZCB5b3UgbWlnaHQgbmVlZCB0b1xuICogdHdlZW4gZWFjaCB2YWx1ZSBhbG9uZyBpdHMgb3duIGVhc2luZyBjdXJ2ZS4gIEEgYmFzaWMgZXhhbXBsZTpcbiAqXG4gKiAgICAgdmFyIHR3ZWVuYWJsZSA9IG5ldyBUd2VlbmFibGUoKTtcbiAqICAgICB0d2VlbmFibGUudHdlZW4oe1xuICogICAgICAgZnJvbTogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDBweCkgdHJhbnNsYXRlWSgwcHgpJyB9LFxuICogICAgICAgdG86IHsgdHJhbnNmb3JtOiAgICd0cmFuc2xhdGVYKDEwMHB4KSB0cmFuc2xhdGVZKDEwMHB4KScgfSxcbiAqICAgICAgIGVhc2luZzogeyB0cmFuc2Zvcm06ICdlYXNlSW5RdWFkJyB9LFxuICogICAgICAgc3RlcDogZnVuY3Rpb24gKHN0YXRlKSB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLnRyYW5zZm9ybSk7XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogVGhlIGFib3ZlIHNuaXBwZXQgd2lsbCBjcmVhdGUgdmFsdWVzIGxpa2UgdGhpczpcbiAqXG4gKiAgICAgdHJhbnNsYXRlWCgxMS41NnB4KSB0cmFuc2xhdGVZKDExLjU2cHgpXG4gKiAgICAgLi4uXG4gKiAgICAgdHJhbnNsYXRlWCg0Ni4yNHB4KSB0cmFuc2xhdGVZKDQ2LjI0cHgpXG4gKiAgICAgLi4uXG4gKiAgICAgdHJhbnNsYXRlWCgxMDBweCkgdHJhbnNsYXRlWSgxMDBweClcbiAqXG4gKiBJbiB0aGlzIGNhc2UsIHRoZSB2YWx1ZXMgZm9yIGB0cmFuc2xhdGVYYCBhbmQgYHRyYW5zbGF0ZVlgIGFyZSBhbHdheXMgdGhlXG4gKiBzYW1lIGZvciBlYWNoIHN0ZXAgb2YgdGhlIHR3ZWVuLCBiZWNhdXNlIHRoZXkgaGF2ZSB0aGUgc2FtZSBzdGFydCBhbmQgZW5kXG4gKiBwb2ludHMgYW5kIGJvdGggdXNlIHRoZSBzYW1lIGVhc2luZyBjdXJ2ZS4gIFdlIGNhbiBhbHNvIHR3ZWVuIGB0cmFuc2xhdGVYYFxuICogYW5kIGB0cmFuc2xhdGVZYCBhbG9uZyBpbmRlcGVuZGVudCBjdXJ2ZXM6XG4gKlxuICogICAgIHZhciB0d2VlbmFibGUgPSBuZXcgVHdlZW5hYmxlKCk7XG4gKiAgICAgdHdlZW5hYmxlLnR3ZWVuKHtcbiAqICAgICAgIGZyb206IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgwcHgpIHRyYW5zbGF0ZVkoMHB4KScgfSxcbiAqICAgICAgIHRvOiB7IHRyYW5zZm9ybTogICAndHJhbnNsYXRlWCgxMDBweCkgdHJhbnNsYXRlWSgxMDBweCknIH0sXG4gKiAgICAgICBlYXNpbmc6IHsgdHJhbnNmb3JtOiAnZWFzZUluUXVhZCBib3VuY2UnIH0sXG4gKiAgICAgICBzdGVwOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coc3RhdGUudHJhbnNmb3JtKTtcbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKiBUaGUgYWJvdmUgc25pcHBldCB3aWxsIGNyZWF0ZSB2YWx1ZXMgbGlrZSB0aGlzOlxuICpcbiAqICAgICB0cmFuc2xhdGVYKDEwLjg5cHgpIHRyYW5zbGF0ZVkoODIuMzVweClcbiAqICAgICAuLi5cbiAqICAgICB0cmFuc2xhdGVYKDQ0Ljg5cHgpIHRyYW5zbGF0ZVkoODYuNzNweClcbiAqICAgICAuLi5cbiAqICAgICB0cmFuc2xhdGVYKDEwMHB4KSB0cmFuc2xhdGVZKDEwMHB4KVxuICpcbiAqIGB0cmFuc2xhdGVYYCBhbmQgYHRyYW5zbGF0ZVlgIGFyZSBub3QgaW4gc3luYyBhbnltb3JlLCBiZWNhdXNlIGBlYXNlSW5RdWFkYFxuICogd2FzIHNwZWNpZmllZCBmb3IgYHRyYW5zbGF0ZVhgIGFuZCBgYm91bmNlYCBmb3IgYHRyYW5zbGF0ZVlgLiAgTWl4aW5nIGFuZFxuICogbWF0Y2hpbmcgZWFzaW5nIGN1cnZlcyBjYW4gbWFrZSBmb3Igc29tZSBpbnRlcmVzdGluZyBtb3Rpb24gaW4geW91clxuICogYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgb3JkZXIgb2YgdGhlIHNwYWNlLXNlcGFyYXRlZCBlYXNpbmcgY3VydmVzIGNvcnJlc3BvbmQgdGhlIHRva2VuIHZhbHVlc1xuICogdGhleSBhcHBseSB0by4gIElmIHRoZXJlIGFyZSBtb3JlIHRva2VuIHZhbHVlcyB0aGFuIGVhc2luZyBjdXJ2ZXMgbGlzdGVkLFxuICogdGhlIGxhc3QgZWFzaW5nIGN1cnZlIGxpc3RlZCBpcyB1c2VkLlxuICogQHN1Ym1vZHVsZSBUd2VlbmFibGUudG9rZW5cbiAqL1xuXG4vLyB0b2tlbiBmdW5jdGlvbiBpcyBkZWZpbmVkIGFib3ZlIG9ubHkgc28gdGhhdCBkb3gtZm91bmRhdGlvbiBzZWVzIGl0IGFzXG4vLyBkb2N1bWVudGF0aW9uIGFuZCByZW5kZXJzIGl0LiAgSXQgaXMgbmV2ZXIgdXNlZCwgYW5kIGlzIG9wdGltaXplZCBhd2F5IGF0XG4vLyBidWlsZCB0aW1lLlxuXG47KGZ1bmN0aW9uIChUd2VlbmFibGUpIHtcblxuICAvKipcbiAgICogQHR5cGVkZWYge3tcbiAgICogICBmb3JtYXRTdHJpbmc6IHN0cmluZ1xuICAgKiAgIGNodW5rTmFtZXM6IEFycmF5LjxzdHJpbmc+XG4gICAqIH19XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB2YXIgZm9ybWF0TWFuaWZlc3Q7XG5cbiAgLy8gQ09OU1RBTlRTXG5cbiAgdmFyIFJfTlVNQkVSX0NPTVBPTkVOVCA9IC8oXFxkfFxcLXxcXC4pLztcbiAgdmFyIFJfRk9STUFUX0NIVU5LUyA9IC8oW15cXC0wLTlcXC5dKykvZztcbiAgdmFyIFJfVU5GT1JNQVRURURfVkFMVUVTID0gL1swLTkuXFwtXSsvZztcbiAgdmFyIFJfUkdCID0gbmV3IFJlZ0V4cChcbiAgICAncmdiXFxcXCgnICsgUl9VTkZPUk1BVFRFRF9WQUxVRVMuc291cmNlICtcbiAgICAoLyxcXHMqLy5zb3VyY2UpICsgUl9VTkZPUk1BVFRFRF9WQUxVRVMuc291cmNlICtcbiAgICAoLyxcXHMqLy5zb3VyY2UpICsgUl9VTkZPUk1BVFRFRF9WQUxVRVMuc291cmNlICsgJ1xcXFwpJywgJ2cnKTtcbiAgdmFyIFJfUkdCX1BSRUZJWCA9IC9eLipcXCgvO1xuICB2YXIgUl9IRVggPSAvIyhbMC05XXxbYS1mXSl7Myw2fS9naTtcbiAgdmFyIFZBTFVFX1BMQUNFSE9MREVSID0gJ1ZBTCc7XG5cbiAgLy8gSEVMUEVSU1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5Lm51bWJlcn0gcmF3VmFsdWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXhcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBnZXRGb3JtYXRDaHVua3NGcm9tIChyYXdWYWx1ZXMsIHByZWZpeCkge1xuICAgIHZhciBhY2N1bXVsYXRvciA9IFtdO1xuXG4gICAgdmFyIHJhd1ZhbHVlc0xlbmd0aCA9IHJhd1ZhbHVlcy5sZW5ndGg7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3VmFsdWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjY3VtdWxhdG9yLnB1c2goJ18nICsgcHJlZml4ICsgJ18nICsgaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXR0ZWRTdHJpbmdcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Rm9ybWF0U3RyaW5nRnJvbSAoZm9ybWF0dGVkU3RyaW5nKSB7XG4gICAgdmFyIGNodW5rcyA9IGZvcm1hdHRlZFN0cmluZy5tYXRjaChSX0ZPUk1BVF9DSFVOS1MpO1xuXG4gICAgaWYgKCFjaHVua3MpIHtcbiAgICAgIC8vIGNodW5rcyB3aWxsIGJlIG51bGwgaWYgdGhlcmUgd2VyZSBubyB0b2tlbnMgdG8gcGFyc2UgaW5cbiAgICAgIC8vIGZvcm1hdHRlZFN0cmluZyAoZm9yIGV4YW1wbGUsIGlmIGZvcm1hdHRlZFN0cmluZyBpcyAnMicpLiAgQ29lcmNlXG4gICAgICAvLyBjaHVua3MgdG8gYmUgdXNlZnVsIGhlcmUuXG4gICAgICBjaHVua3MgPSBbJycsICcnXTtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgY2h1bmssIGFzc3VtZSB0aGF0IHRoZSBzdHJpbmcgaXMgYSBudW1iZXJcbiAgICAgIC8vIGZvbGxvd2VkIGJ5IGEgdG9rZW4uLi5cbiAgICAgIC8vIE5PVEU6IFRoaXMgbWF5IGJlIGFuIHVud2lzZSBhc3N1bXB0aW9uLlxuICAgIH0gZWxzZSBpZiAoY2h1bmtzLmxlbmd0aCA9PT0gMSB8fFxuICAgICAgLy8gLi4ub3IgaWYgdGhlIHN0cmluZyBzdGFydHMgd2l0aCBhIG51bWJlciBjb21wb25lbnQgKFwiLlwiLCBcIi1cIiwgb3IgYVxuICAgICAgLy8gZGlnaXQpLi4uXG4gICAgZm9ybWF0dGVkU3RyaW5nLmNoYXJBdCgwKS5tYXRjaChSX05VTUJFUl9DT01QT05FTlQpKSB7XG4gICAgICAvLyAuLi5wcmVwZW5kIGFuIGVtcHR5IHN0cmluZyBoZXJlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBmb3JtYXR0ZWQgbnVtYmVyXG4gICAgICAvLyBpcyBwcm9wZXJseSByZXBsYWNlZCBieSBWQUxVRV9QTEFDRUhPTERFUlxuICAgICAgY2h1bmtzLnVuc2hpZnQoJycpO1xuICAgIH1cblxuICAgIHJldHVybiBjaHVua3Muam9pbihWQUxVRV9QTEFDRUhPTERFUik7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBhbGwgaGV4IGNvbG9yIHZhbHVlcyB3aXRoaW4gYSBzdHJpbmcgdG8gYW4gcmdiIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlT2JqZWN0XG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG1vZGlmaWVkIG9ialxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2FuaXRpemVPYmplY3RGb3JIZXhQcm9wcyAoc3RhdGVPYmplY3QpIHtcbiAgICBUd2VlbmFibGUuZWFjaChzdGF0ZU9iamVjdCwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHZhciBjdXJyZW50UHJvcCA9IHN0YXRlT2JqZWN0W3Byb3BdO1xuXG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnRQcm9wID09PSAnc3RyaW5nJyAmJiBjdXJyZW50UHJvcC5tYXRjaChSX0hFWCkpIHtcbiAgICAgICAgc3RhdGVPYmplY3RbcHJvcF0gPSBzYW5pdGl6ZUhleENodW5rc1RvUkdCKGN1cnJlbnRQcm9wKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uICBzYW5pdGl6ZUhleENodW5rc1RvUkdCIChzdHIpIHtcbiAgICByZXR1cm4gZmlsdGVyU3RyaW5nQ2h1bmtzKFJfSEVYLCBzdHIsIGNvbnZlcnRIZXhUb1JHQik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0cmluZ1xuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjb252ZXJ0SGV4VG9SR0IgKGhleFN0cmluZykge1xuICAgIHZhciByZ2JBcnIgPSBoZXhUb1JHQkFycmF5KGhleFN0cmluZyk7XG4gICAgcmV0dXJuICdyZ2IoJyArIHJnYkFyclswXSArICcsJyArIHJnYkFyclsxXSArICcsJyArIHJnYkFyclsyXSArICcpJztcbiAgfVxuXG4gIHZhciBoZXhUb1JHQkFycmF5X3JldHVybkFycmF5ID0gW107XG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgaGV4YWRlY2ltYWwgc3RyaW5nIHRvIGFuIGFycmF5IHdpdGggdGhyZWUgaXRlbXMsIG9uZSBlYWNoIGZvclxuICAgKiB0aGUgcmVkLCBibHVlLCBhbmQgZ3JlZW4gZGVjaW1hbCB2YWx1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoZXggQSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn0gVGhlIGNvbnZlcnRlZCBBcnJheSBvZiBSR0IgdmFsdWVzIGlmIGBoZXhgIGlzIGFcbiAgICogdmFsaWQgc3RyaW5nLCBvciBhbiBBcnJheSBvZiB0aHJlZSAwJ3MuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBoZXhUb1JHQkFycmF5IChoZXgpIHtcblxuICAgIGhleCA9IGhleC5yZXBsYWNlKC8jLywgJycpO1xuXG4gICAgLy8gSWYgdGhlIHN0cmluZyBpcyBhIHNob3J0aGFuZCB0aHJlZSBkaWdpdCBoZXggbm90YXRpb24sIG5vcm1hbGl6ZSBpdCB0b1xuICAgIC8vIHRoZSBzdGFuZGFyZCBzaXggZGlnaXQgbm90YXRpb25cbiAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xuICAgICAgaGV4ID0gaGV4LnNwbGl0KCcnKTtcbiAgICAgIGhleCA9IGhleFswXSArIGhleFswXSArIGhleFsxXSArIGhleFsxXSArIGhleFsyXSArIGhleFsyXTtcbiAgICB9XG5cbiAgICBoZXhUb1JHQkFycmF5X3JldHVybkFycmF5WzBdID0gaGV4VG9EZWMoaGV4LnN1YnN0cigwLCAyKSk7XG4gICAgaGV4VG9SR0JBcnJheV9yZXR1cm5BcnJheVsxXSA9IGhleFRvRGVjKGhleC5zdWJzdHIoMiwgMikpO1xuICAgIGhleFRvUkdCQXJyYXlfcmV0dXJuQXJyYXlbMl0gPSBoZXhUb0RlYyhoZXguc3Vic3RyKDQsIDIpKTtcblxuICAgIHJldHVybiBoZXhUb1JHQkFycmF5X3JldHVybkFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBiYXNlLTE2IG51bWJlciB0byBiYXNlLTEwLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IGhleCBUaGUgdmFsdWUgdG8gY29udmVydFxuICAgKlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzZS0xMCBlcXVpdmFsZW50IG9mIGBoZXhgLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gaGV4VG9EZWMgKGhleCkge1xuICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIGEgZmlsdGVyIG9wZXJhdGlvbiBvbiBhbGwgY2h1bmtzIG9mIGEgc3RyaW5nIHRoYXQgbWF0Y2ggYSBSZWdFeHBcbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuZmlsdGVyZWRTdHJpbmdcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBmaWx0ZXJcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZmlsdGVyU3RyaW5nQ2h1bmtzIChwYXR0ZXJuLCB1bmZpbHRlcmVkU3RyaW5nLCBmaWx0ZXIpIHtcbiAgICB2YXIgcGF0dGVuTWF0Y2hlcyA9IHVuZmlsdGVyZWRTdHJpbmcubWF0Y2gocGF0dGVybik7XG4gICAgdmFyIGZpbHRlcmVkU3RyaW5nID0gdW5maWx0ZXJlZFN0cmluZy5yZXBsYWNlKHBhdHRlcm4sIFZBTFVFX1BMQUNFSE9MREVSKTtcblxuICAgIGlmIChwYXR0ZW5NYXRjaGVzKSB7XG4gICAgICB2YXIgcGF0dGVuTWF0Y2hlc0xlbmd0aCA9IHBhdHRlbk1hdGNoZXMubGVuZ3RoO1xuICAgICAgdmFyIGN1cnJlbnRDaHVuaztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXR0ZW5NYXRjaGVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudENodW5rID0gcGF0dGVuTWF0Y2hlcy5zaGlmdCgpO1xuICAgICAgICBmaWx0ZXJlZFN0cmluZyA9IGZpbHRlcmVkU3RyaW5nLnJlcGxhY2UoXG4gICAgICAgICAgVkFMVUVfUExBQ0VIT0xERVIsIGZpbHRlcihjdXJyZW50Q2h1bmspKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmlsdGVyZWRTdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgZm9yIGZsb2F0aW5nIHBvaW50IHZhbHVlcyB3aXRoaW4gcmdiIHN0cmluZ3MgYW5kIHJvdW5kcyB0aGVtLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0dGVkU3RyaW5nXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHNhbml0aXplUkdCQ2h1bmtzIChmb3JtYXR0ZWRTdHJpbmcpIHtcbiAgICByZXR1cm4gZmlsdGVyU3RyaW5nQ2h1bmtzKFJfUkdCLCBmb3JtYXR0ZWRTdHJpbmcsIHNhbml0aXplUkdCQ2h1bmspO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZ2JDaHVua1xuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBzYW5pdGl6ZVJHQkNodW5rIChyZ2JDaHVuaykge1xuICAgIHZhciBudW1iZXJzID0gcmdiQ2h1bmsubWF0Y2goUl9VTkZPUk1BVFRFRF9WQUxVRVMpO1xuICAgIHZhciBudW1iZXJzTGVuZ3RoID0gbnVtYmVycy5sZW5ndGg7XG4gICAgdmFyIHNhbml0aXplZFN0cmluZyA9IHJnYkNodW5rLm1hdGNoKFJfUkdCX1BSRUZJWClbMF07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlcnNMZW5ndGg7IGkrKykge1xuICAgICAgc2FuaXRpemVkU3RyaW5nICs9IHBhcnNlSW50KG51bWJlcnNbaV0sIDEwKSArICcsJztcbiAgICB9XG5cbiAgICBzYW5pdGl6ZWRTdHJpbmcgPSBzYW5pdGl6ZWRTdHJpbmcuc2xpY2UoMCwgLTEpICsgJyknO1xuXG4gICAgcmV0dXJuIHNhbml0aXplZFN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGVPYmplY3RcbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBBbiBPYmplY3Qgb2YgZm9ybWF0TWFuaWZlc3RzIHRoYXQgY29ycmVzcG9uZCB0b1xuICAgKiB0aGUgc3RyaW5nIHByb3BlcnRpZXMgb2Ygc3RhdGVPYmplY3RcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGdldEZvcm1hdE1hbmlmZXN0cyAoc3RhdGVPYmplY3QpIHtcbiAgICB2YXIgbWFuaWZlc3RBY2N1bXVsYXRvciA9IHt9O1xuXG4gICAgVHdlZW5hYmxlLmVhY2goc3RhdGVPYmplY3QsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICB2YXIgY3VycmVudFByb3AgPSBzdGF0ZU9iamVjdFtwcm9wXTtcblxuICAgICAgaWYgKHR5cGVvZiBjdXJyZW50UHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHJhd1ZhbHVlcyA9IGdldFZhbHVlc0Zyb20oY3VycmVudFByb3ApO1xuXG4gICAgICAgIG1hbmlmZXN0QWNjdW11bGF0b3JbcHJvcF0gPSB7XG4gICAgICAgICAgJ2Zvcm1hdFN0cmluZyc6IGdldEZvcm1hdFN0cmluZ0Zyb20oY3VycmVudFByb3ApXG4gICAgICAgICAgLCdjaHVua05hbWVzJzogZ2V0Rm9ybWF0Q2h1bmtzRnJvbShyYXdWYWx1ZXMsIHByb3ApXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWFuaWZlc3RBY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGVPYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IGZvcm1hdE1hbmlmZXN0c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0dGVkUHJvcGVydGllcyAoc3RhdGVPYmplY3QsIGZvcm1hdE1hbmlmZXN0cykge1xuICAgIFR3ZWVuYWJsZS5lYWNoKGZvcm1hdE1hbmlmZXN0cywgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHZhciBjdXJyZW50UHJvcCA9IHN0YXRlT2JqZWN0W3Byb3BdO1xuICAgICAgdmFyIHJhd1ZhbHVlcyA9IGdldFZhbHVlc0Zyb20oY3VycmVudFByb3ApO1xuICAgICAgdmFyIHJhd1ZhbHVlc0xlbmd0aCA9IHJhd1ZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3VmFsdWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RhdGVPYmplY3RbZm9ybWF0TWFuaWZlc3RzW3Byb3BdLmNodW5rTmFtZXNbaV1dID0gK3Jhd1ZhbHVlc1tpXTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0YXRlT2JqZWN0W3Byb3BdO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZU9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZm9ybWF0TWFuaWZlc3RzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjb2xsYXBzZUZvcm1hdHRlZFByb3BlcnRpZXMgKHN0YXRlT2JqZWN0LCBmb3JtYXRNYW5pZmVzdHMpIHtcbiAgICBUd2VlbmFibGUuZWFjaChmb3JtYXRNYW5pZmVzdHMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICB2YXIgY3VycmVudFByb3AgPSBzdGF0ZU9iamVjdFtwcm9wXTtcbiAgICAgIHZhciBmb3JtYXRDaHVua3MgPSBleHRyYWN0UHJvcGVydHlDaHVua3MoXG4gICAgICAgIHN0YXRlT2JqZWN0LCBmb3JtYXRNYW5pZmVzdHNbcHJvcF0uY2h1bmtOYW1lcyk7XG4gICAgICB2YXIgdmFsdWVzTGlzdCA9IGdldFZhbHVlc0xpc3QoXG4gICAgICAgIGZvcm1hdENodW5rcywgZm9ybWF0TWFuaWZlc3RzW3Byb3BdLmNodW5rTmFtZXMpO1xuICAgICAgY3VycmVudFByb3AgPSBnZXRGb3JtYXR0ZWRWYWx1ZXMoXG4gICAgICAgIGZvcm1hdE1hbmlmZXN0c1twcm9wXS5mb3JtYXRTdHJpbmcsIHZhbHVlc0xpc3QpO1xuICAgICAgc3RhdGVPYmplY3RbcHJvcF0gPSBzYW5pdGl6ZVJHQkNodW5rcyhjdXJyZW50UHJvcCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlT2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNodW5rTmFtZXNcbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgZXh0cmFjdGVkIHZhbHVlIGNodW5rcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGV4dHJhY3RQcm9wZXJ0eUNodW5rcyAoc3RhdGVPYmplY3QsIGNodW5rTmFtZXMpIHtcbiAgICB2YXIgZXh0cmFjdGVkVmFsdWVzID0ge307XG4gICAgdmFyIGN1cnJlbnRDaHVua05hbWUsIGNodW5rTmFtZXNMZW5ndGggPSBjaHVua05hbWVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOYW1lc0xlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50Q2h1bmtOYW1lID0gY2h1bmtOYW1lc1tpXTtcbiAgICAgIGV4dHJhY3RlZFZhbHVlc1tjdXJyZW50Q2h1bmtOYW1lXSA9IHN0YXRlT2JqZWN0W2N1cnJlbnRDaHVua05hbWVdO1xuICAgICAgZGVsZXRlIHN0YXRlT2JqZWN0W2N1cnJlbnRDaHVua05hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiBleHRyYWN0ZWRWYWx1ZXM7XG4gIH1cblxuICB2YXIgZ2V0VmFsdWVzTGlzdF9hY2N1bXVsYXRvciA9IFtdO1xuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlT2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNodW5rTmFtZXNcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXkuPG51bWJlcj59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZXNMaXN0IChzdGF0ZU9iamVjdCwgY2h1bmtOYW1lcykge1xuICAgIGdldFZhbHVlc0xpc3RfYWNjdW11bGF0b3IubGVuZ3RoID0gMDtcbiAgICB2YXIgY2h1bmtOYW1lc0xlbmd0aCA9IGNodW5rTmFtZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua05hbWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgIGdldFZhbHVlc0xpc3RfYWNjdW11bGF0b3IucHVzaChzdGF0ZU9iamVjdFtjaHVua05hbWVzW2ldXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFZhbHVlc0xpc3RfYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdFN0cmluZ1xuICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSByYXdWYWx1ZXNcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkVmFsdWVzIChmb3JtYXRTdHJpbmcsIHJhd1ZhbHVlcykge1xuICAgIHZhciBmb3JtYXR0ZWRWYWx1ZVN0cmluZyA9IGZvcm1hdFN0cmluZztcbiAgICB2YXIgcmF3VmFsdWVzTGVuZ3RoID0gcmF3VmFsdWVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3VmFsdWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvcm1hdHRlZFZhbHVlU3RyaW5nID0gZm9ybWF0dGVkVmFsdWVTdHJpbmcucmVwbGFjZShcbiAgICAgICAgVkFMVUVfUExBQ0VIT0xERVIsICtyYXdWYWx1ZXNbaV0udG9GaXhlZCg0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdHRlZFZhbHVlU3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdGU6IEl0J3MgdGhlIGR1dHkgb2YgdGhlIGNhbGxlciB0byBjb252ZXJ0IHRoZSBBcnJheSBlbGVtZW50cyBvZiB0aGVcbiAgICogcmV0dXJuIHZhbHVlIGludG8gbnVtYmVycy4gIFRoaXMgaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXR0ZWRTdHJpbmdcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz58bnVsbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlc0Zyb20gKGZvcm1hdHRlZFN0cmluZykge1xuICAgIHJldHVybiBmb3JtYXR0ZWRTdHJpbmcubWF0Y2goUl9VTkZPUk1BVFRFRF9WQUxVRVMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlYXNpbmdPYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHRva2VuRGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZXhwYW5kRWFzaW5nT2JqZWN0IChlYXNpbmdPYmplY3QsIHRva2VuRGF0YSkge1xuICAgIFR3ZWVuYWJsZS5lYWNoKHRva2VuRGF0YSwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHZhciBjdXJyZW50UHJvcCA9IHRva2VuRGF0YVtwcm9wXTtcbiAgICAgIHZhciBjaHVua05hbWVzID0gY3VycmVudFByb3AuY2h1bmtOYW1lcztcbiAgICAgIHZhciBjaHVua0xlbmd0aCA9IGNodW5rTmFtZXMubGVuZ3RoO1xuXG4gICAgICB2YXIgZWFzaW5nID0gZWFzaW5nT2JqZWN0W3Byb3BdO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgZWFzaW5nQ2h1bmtzID0gZWFzaW5nLnNwbGl0KCcgJyk7XG4gICAgICAgIHZhciBsYXN0RWFzaW5nQ2h1bmsgPSBlYXNpbmdDaHVua3NbZWFzaW5nQ2h1bmtzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaHVua0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZWFzaW5nT2JqZWN0W2NodW5rTmFtZXNbaV1dID0gZWFzaW5nQ2h1bmtzW2ldIHx8IGxhc3RFYXNpbmdDaHVuaztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2h1bmtMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVhc2luZ09iamVjdFtjaHVua05hbWVzW2ldXSA9IGVhc2luZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWxldGUgZWFzaW5nT2JqZWN0W3Byb3BdO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlYXNpbmdPYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHRva2VuRGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY29sbGFwc2VFYXNpbmdPYmplY3QgKGVhc2luZ09iamVjdCwgdG9rZW5EYXRhKSB7XG4gICAgVHdlZW5hYmxlLmVhY2godG9rZW5EYXRhLCBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgdmFyIGN1cnJlbnRQcm9wID0gdG9rZW5EYXRhW3Byb3BdO1xuICAgICAgdmFyIGNodW5rTmFtZXMgPSBjdXJyZW50UHJvcC5jaHVua05hbWVzO1xuICAgICAgdmFyIGNodW5rTGVuZ3RoID0gY2h1bmtOYW1lcy5sZW5ndGg7XG5cbiAgICAgIHZhciBmaXJzdEVhc2luZyA9IGVhc2luZ09iamVjdFtjaHVua05hbWVzWzBdXTtcbiAgICAgIHZhciB0eXBlb2ZFYXNpbmdzID0gdHlwZW9mIGZpcnN0RWFzaW5nO1xuXG4gICAgICBpZiAodHlwZW9mRWFzaW5ncyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGNvbXBvc2VkRWFzaW5nU3RyaW5nID0gJyc7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29tcG9zZWRFYXNpbmdTdHJpbmcgKz0gJyAnICsgZWFzaW5nT2JqZWN0W2NodW5rTmFtZXNbaV1dO1xuICAgICAgICAgIGRlbGV0ZSBlYXNpbmdPYmplY3RbY2h1bmtOYW1lc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICBlYXNpbmdPYmplY3RbcHJvcF0gPSBjb21wb3NlZEVhc2luZ1N0cmluZy5zdWJzdHIoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYXNpbmdPYmplY3RbcHJvcF0gPSBmaXJzdEVhc2luZztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIFR3ZWVuYWJsZS5wcm90b3R5cGUuZmlsdGVyLnRva2VuID0ge1xuICAgICd0d2VlbkNyZWF0ZWQnOiBmdW5jdGlvbiAoY3VycmVudFN0YXRlLCBmcm9tU3RhdGUsIHRvU3RhdGUsIGVhc2luZ09iamVjdCkge1xuICAgICAgc2FuaXRpemVPYmplY3RGb3JIZXhQcm9wcyhjdXJyZW50U3RhdGUpO1xuICAgICAgc2FuaXRpemVPYmplY3RGb3JIZXhQcm9wcyhmcm9tU3RhdGUpO1xuICAgICAgc2FuaXRpemVPYmplY3RGb3JIZXhQcm9wcyh0b1N0YXRlKTtcbiAgICAgIHRoaXMuX3Rva2VuRGF0YSA9IGdldEZvcm1hdE1hbmlmZXN0cyhjdXJyZW50U3RhdGUpO1xuICAgIH0sXG5cbiAgICAnYmVmb3JlVHdlZW4nOiBmdW5jdGlvbiAoY3VycmVudFN0YXRlLCBmcm9tU3RhdGUsIHRvU3RhdGUsIGVhc2luZ09iamVjdCkge1xuICAgICAgZXhwYW5kRWFzaW5nT2JqZWN0KGVhc2luZ09iamVjdCwgdGhpcy5fdG9rZW5EYXRhKTtcbiAgICAgIGV4cGFuZEZvcm1hdHRlZFByb3BlcnRpZXMoY3VycmVudFN0YXRlLCB0aGlzLl90b2tlbkRhdGEpO1xuICAgICAgZXhwYW5kRm9ybWF0dGVkUHJvcGVydGllcyhmcm9tU3RhdGUsIHRoaXMuX3Rva2VuRGF0YSk7XG4gICAgICBleHBhbmRGb3JtYXR0ZWRQcm9wZXJ0aWVzKHRvU3RhdGUsIHRoaXMuX3Rva2VuRGF0YSk7XG4gICAgfSxcblxuICAgICdhZnRlclR3ZWVuJzogZnVuY3Rpb24gKGN1cnJlbnRTdGF0ZSwgZnJvbVN0YXRlLCB0b1N0YXRlLCBlYXNpbmdPYmplY3QpIHtcbiAgICAgIGNvbGxhcHNlRm9ybWF0dGVkUHJvcGVydGllcyhjdXJyZW50U3RhdGUsIHRoaXMuX3Rva2VuRGF0YSk7XG4gICAgICBjb2xsYXBzZUZvcm1hdHRlZFByb3BlcnRpZXMoZnJvbVN0YXRlLCB0aGlzLl90b2tlbkRhdGEpO1xuICAgICAgY29sbGFwc2VGb3JtYXR0ZWRQcm9wZXJ0aWVzKHRvU3RhdGUsIHRoaXMuX3Rva2VuRGF0YSk7XG4gICAgICBjb2xsYXBzZUVhc2luZ09iamVjdChlYXNpbmdPYmplY3QsIHRoaXMuX3Rva2VuRGF0YSk7XG4gICAgfVxuICB9O1xuXG59IChUd2VlbmFibGUpKTtcblxufSkuY2FsbChudWxsKTtcbiIsIi8vIFNlbWktU2VtaUNpcmNsZSBzaGFwZWQgcHJvZ3Jlc3MgYmFyXG5cbnZhciBTaGFwZSA9IHJlcXVpcmUoJy4vc2hhcGUnKTtcbnZhciBDaXJjbGUgPSByZXF1aXJlKCcuL2NpcmNsZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgU2VtaUNpcmNsZSA9IGZ1bmN0aW9uIFNlbWlDaXJjbGUoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gVXNlIG9uZSBhcmMgdG8gZm9ybSBhIFNlbWlDaXJjbGVcbiAgICAvLyBTZWUgdGhpcyBhbnN3ZXIgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA0NzczMzQvMTQ0NjA5MlxuICAgIHRoaXMuX3BhdGhUZW1wbGF0ZSA9XG4gICAgICAgICdNIDUwLDUwIG0gLXtyYWRpdXN9LDAnICtcbiAgICAgICAgJyBhIHtyYWRpdXN9LHtyYWRpdXN9IDAgMSAxIHsycmFkaXVzfSwwJztcblxuICAgIHRoaXMuY29udGFpbmVyQXNwZWN0UmF0aW8gPSAyO1xuXG4gICAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cblNlbWlDaXJjbGUucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5TZW1pQ2lyY2xlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNlbWlDaXJjbGU7XG5cblNlbWlDaXJjbGUucHJvdG90eXBlLl9pbml0aWFsaXplU3ZnID0gZnVuY3Rpb24gX2luaXRpYWxpemVTdmcoc3ZnLCBvcHRzKSB7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgMTAwIDUwJyk7XG59O1xuXG5TZW1pQ2lyY2xlLnByb3RvdHlwZS5faW5pdGlhbGl6ZVRleHRDb250YWluZXIgPSBmdW5jdGlvbiBfaW5pdGlhbGl6ZVRleHRDb250YWluZXIoXG4gICAgb3B0cyxcbiAgICBjb250YWluZXIsXG4gICAgdGV4dENvbnRhaW5lclxuKSB7XG4gICAgaWYgKG9wdHMudGV4dC5zdHlsZSkge1xuICAgICAgICAvLyBSZXNldCB0b3Agc3R5bGVcbiAgICAgICAgdGV4dENvbnRhaW5lci5zdHlsZS50b3AgPSAnYXV0byc7XG4gICAgICAgIHRleHRDb250YWluZXIuc3R5bGUuYm90dG9tID0gJzAnO1xuXG4gICAgICAgIGlmIChvcHRzLnRleHQuYWxpZ25Ub0JvdHRvbSkge1xuICAgICAgICAgICAgdXRpbHMuc2V0U3R5bGUodGV4dENvbnRhaW5lciwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoLTUwJSwgMCknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHV0aWxzLnNldFN0eWxlKHRleHRDb250YWluZXIsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKC01MCUsIDUwJSknKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIFNoYXJlIGZ1bmN0aW9uYWxpdHkgd2l0aCBDaXJjbGUsIGp1c3QgaGF2ZSBkaWZmZXJlbnQgcGF0aFxuU2VtaUNpcmNsZS5wcm90b3R5cGUuX3BhdGhTdHJpbmcgPSBDaXJjbGUucHJvdG90eXBlLl9wYXRoU3RyaW5nO1xuU2VtaUNpcmNsZS5wcm90b3R5cGUuX3RyYWlsU3RyaW5nID0gQ2lyY2xlLnByb3RvdHlwZS5fdHJhaWxTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VtaUNpcmNsZTtcbiIsIi8qXG4gKiBmaXR0eSB2Mi4yLjYgLSBTbnVnbHkgcmVzaXplcyB0ZXh0IHRvIGZpdCBpdHMgcGFyZW50IGNvbnRhaW5lclxuICogQ29weXJpZ2h0IChjKSAyMDE4IFJpayBTY2hlbm5pbmsgPGhlbGxvQHJpa3NjaGVubmluay5ubD4gKGh0dHA6Ly9yaWtzY2hlbm5pbmsubmwvKVxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh3KSB7XG5cbiAgLy8gbm8gd2luZG93LCBlYXJseSBleGl0XG4gIGlmICghdykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG5vZGUgbGlzdCB0byBhcnJheSBoZWxwZXIgbWV0aG9kXG4gIHZhciB0b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheShubCkge1xuICAgIHJldHVybiBbXS5zbGljZS5jYWxsKG5sKTtcbiAgfTtcblxuICAvLyBzdGF0ZXNcbiAgdmFyIERyYXdTdGF0ZSA9IHtcbiAgICBJRExFOiAwLFxuICAgIERJUlRZX0NPTlRFTlQ6IDEsXG4gICAgRElSVFlfTEFZT1VUOiAyLFxuICAgIERJUlRZOiAzXG4gIH07XG5cbiAgLy8gYWxsIGFjdGl2ZSBmaXR0eSBlbGVtZW50c1xuICB2YXIgZml0dGllcyA9IFtdO1xuXG4gIC8vIGdyb3VwIGFsbCByZWRyYXcgY2FsbHMgdGlsbCBuZXh0IGZyYW1lLCB3ZSBjYW5jZWwgZWFjaCBmcmFtZSByZXF1ZXN0IHdoZW4gYSBuZXcgb25lIGNvbWVzIGluLiBJZiBubyBzdXBwb3J0IGZvciByZXF1ZXN0IGFuaW1hdGlvbiBmcmFtZSwgdGhpcyBpcyBhbiBlbXB0eSBmdW5jdGlvbiBhbmQgc3VwcG9ydHMgZm9yIGZpdHR5IHN0b3BzLlxuICB2YXIgcmVkcmF3RnJhbWUgPSBudWxsO1xuICB2YXIgcmVxdWVzdFJlZHJhdyA9ICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnIGluIHcgPyBmdW5jdGlvbiAoKSB7XG4gICAgdy5jYW5jZWxBbmltYXRpb25GcmFtZShyZWRyYXdGcmFtZSk7XG4gICAgcmVkcmF3RnJhbWUgPSB3LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZWRyYXcoZml0dGllcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGYuZGlydHk7XG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH0gOiBmdW5jdGlvbiAoKSB7fTtcblxuICAvLyBzZXRzIGFsbCBmaXR0aWVzIHRvIGRpcnR5IHNvIHRoZXkgYXJlIHJlZHJhd24gb24gdGhlIG5leHQgcmVkcmF3IGxvb3AsIHRoZW4gY2FsbHMgcmVkcmF3XG4gIHZhciByZWRyYXdBbGwgPSBmdW5jdGlvbiByZWRyYXdBbGwodHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmaXR0aWVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgZi5kaXJ0eSA9IHR5cGU7XG4gICAgICB9KTtcbiAgICAgIHJlcXVlc3RSZWRyYXcoKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIHJlZHJhd3MgZml0dGllcyBzbyB0aGV5IG5pY2VseSBmaXQgdGhlaXIgcGFyZW50IGNvbnRhaW5lclxuICB2YXIgcmVkcmF3ID0gZnVuY3Rpb24gcmVkcmF3KGZpdHRpZXMpIHtcblxuICAgIC8vIGdldHRpbmcgaW5mbyBmcm9tIHRoZSBET00gYXQgdGhpcyBwb2ludCBzaG91bGQgbm90IHRyaWdnZXIgYSByZWZsb3csIGxldCdzIGdhdGhlciBhcyBtdWNoIGludGVsIGFzIHBvc3NpYmxlIGJlZm9yZSB0cmlnZ2VyaW5nIGEgcmVmbG93XG5cbiAgICAvLyBjaGVjayBpZiBzdHlsZXMgb2YgYWxsIGZpdHRpZXMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gICAgZml0dGllcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiAhZi5zdHlsZUNvbXB1dGVkO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgIGYuc3R5bGVDb21wdXRlZCA9IGNvbXB1dGVTdHlsZShmKTtcbiAgICB9KTtcblxuICAgIC8vIHJlc3R5bGUgZWxlbWVudHMgdGhhdCByZXF1aXJlIHByZS1zdHlsaW5nLCB0aGlzIHRyaWdnZXJzIGEgcmVmbG93LCBwbGVhc2UgdHJ5IHRvIHByZXZlbnQgYnkgYWRkaW5nIENTUyBydWxlcyAoc2VlIGRvY3MpXG4gICAgZml0dGllcy5maWx0ZXIoc2hvdWxkUHJlU3R5bGUpLmZvckVhY2goYXBwbHlTdHlsZSk7XG5cbiAgICAvLyB3ZSBub3cgZGV0ZXJtaW5lIHdoaWNoIGZpdHRpZXMgc2hvdWxkIGJlIHJlZHJhd25cbiAgICB2YXIgZml0dGllc1RvUmVkcmF3ID0gZml0dGllcy5maWx0ZXIoc2hvdWxkUmVkcmF3KTtcblxuICAgIC8vIHdlIGNhbGN1bGF0ZSBmaW5hbCBzdHlsZXMgZm9yIHRoZXNlIGZpdHRpZXNcbiAgICBmaXR0aWVzVG9SZWRyYXcuZm9yRWFjaChjYWxjdWxhdGVTdHlsZXMpO1xuXG4gICAgLy8gbm93IHdlIGFwcGx5IHRoZSBjYWxjdWxhdGVkIHN0eWxlcyBmcm9tIG91ciBwcmV2aW91cyBsb29wXG4gICAgZml0dGllc1RvUmVkcmF3LmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgIGFwcGx5U3R5bGUoZik7XG4gICAgICBtYXJrQXNDbGVhbihmKTtcbiAgICB9KTtcblxuICAgIC8vIG5vdyB3ZSBkaXNwYXRjaCBldmVudHMgZm9yIGFsbCByZXN0eWxlZCBmaXR0aWVzXG4gICAgZml0dGllc1RvUmVkcmF3LmZvckVhY2goZGlzcGF0Y2hGaXRFdmVudCk7XG4gIH07XG5cbiAgdmFyIG1hcmtBc0NsZWFuID0gZnVuY3Rpb24gbWFya0FzQ2xlYW4oZikge1xuICAgIHJldHVybiBmLmRpcnR5ID0gRHJhd1N0YXRlLklETEU7XG4gIH07XG5cbiAgdmFyIGNhbGN1bGF0ZVN0eWxlcyA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVN0eWxlcyhmKSB7XG5cbiAgICAvLyBnZXQgYXZhaWxhYmxlIHdpZHRoIGZyb20gcGFyZW50IG5vZGVcbiAgICBmLmF2YWlsYWJsZVdpZHRoID0gZi5lbGVtZW50LnBhcmVudE5vZGUuY2xpZW50V2lkdGg7XG5cbiAgICAvLyB0aGUgc3BhY2Ugb3VyIHRhcmdldCBlbGVtZW50IHVzZXNcbiAgICBmLmN1cnJlbnRXaWR0aCA9IGYuZWxlbWVudC5zY3JvbGxXaWR0aDtcblxuICAgIC8vIHJlbWVtYmVyIGN1cnJlbnQgZm9udCBzaXplXG4gICAgZi5wcmV2aW91c0ZvbnRTaXplID0gZi5jdXJyZW50Rm9udFNpemU7XG5cbiAgICAvLyBsZXQncyBjYWxjdWxhdGUgdGhlIG5ldyBmb250IHNpemVcbiAgICBmLmN1cnJlbnRGb250U2l6ZSA9IE1hdGgubWluKE1hdGgubWF4KGYubWluU2l6ZSwgZi5hdmFpbGFibGVXaWR0aCAvIGYuY3VycmVudFdpZHRoICogZi5wcmV2aW91c0ZvbnRTaXplKSwgZi5tYXhTaXplKTtcblxuICAgIC8vIGlmIGFsbG93cyB3cmFwcGluZywgb25seSB3cmFwIHdoZW4gYXQgbWluaW11bSBmb250IHNpemUgKG90aGVyd2lzZSB3b3VsZCBicmVhayBjb250YWluZXIpXG4gICAgZi53aGl0ZVNwYWNlID0gZi5tdWx0aUxpbmUgJiYgZi5jdXJyZW50Rm9udFNpemUgPT09IGYubWluU2l6ZSA/ICdub3JtYWwnIDogJ25vd3JhcCc7XG4gIH07XG5cbiAgLy8gc2hvdWxkIGFsd2F5cyByZWRyYXcgaWYgaXMgbm90IGRpcnR5IGxheW91dCwgaWYgaXMgZGlydHkgbGF5b3V0LCBvbmx5IHJlZHJhdyBpZiBzaXplIGhhcyBjaGFuZ2VkXG4gIHZhciBzaG91bGRSZWRyYXcgPSBmdW5jdGlvbiBzaG91bGRSZWRyYXcoZikge1xuICAgIHJldHVybiBmLmRpcnR5ICE9PSBEcmF3U3RhdGUuRElSVFlfTEFZT1VUIHx8IGYuZGlydHkgPT09IERyYXdTdGF0ZS5ESVJUWV9MQVlPVVQgJiYgZi5lbGVtZW50LnBhcmVudE5vZGUuY2xpZW50V2lkdGggIT09IGYuYXZhaWxhYmxlV2lkdGg7XG4gIH07XG5cbiAgLy8gZXZlcnkgZml0dHkgZWxlbWVudCBpcyB0ZXN0ZWQgZm9yIGludmFsaWQgc3R5bGVzXG4gIHZhciBjb21wdXRlU3R5bGUgPSBmdW5jdGlvbiBjb21wdXRlU3R5bGUoZikge1xuXG4gICAgLy8gZ2V0IHN0eWxlIHByb3BlcnRpZXNcbiAgICB2YXIgc3R5bGUgPSB3LmdldENvbXB1dGVkU3R5bGUoZi5lbGVtZW50LCBudWxsKTtcblxuICAgIC8vIGdldCBjdXJyZW50IGZvbnQgc2l6ZSBpbiBwaXhlbHMgKGlmIHdlIGFscmVhZHkgY2FsY3VsYXRlZCBpdCwgdXNlIHRoZSBjYWxjdWxhdGVkIHZlcnNpb24pXG4gICAgZi5jdXJyZW50Rm9udFNpemUgPSBwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LXNpemUnKSwgMTApO1xuXG4gICAgLy8gZ2V0IGRpc3BsYXkgdHlwZSBhbmQgd3JhcCBtb2RlXG4gICAgZi5kaXNwbGF5ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpO1xuICAgIGYud2hpdGVTcGFjZSA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3doaXRlLXNwYWNlJyk7XG4gIH07XG5cbiAgLy8gZGV0ZXJtaW5lcyBpZiB0aGlzIGZpdHR5IHJlcXVpcmVzIGluaXRpYWwgc3R5bGluZywgY2FuIGJlIHByZXZlbnRlZCBieSBhcHBseWluZyBjb3JyZWN0IHN0eWxlcyB0aHJvdWdoIENTU1xuICB2YXIgc2hvdWxkUHJlU3R5bGUgPSBmdW5jdGlvbiBzaG91bGRQcmVTdHlsZShmKSB7XG5cbiAgICB2YXIgcHJlU3R5bGUgPSBmYWxzZTtcblxuICAgIC8vIGlmIHdlIGFscmVhZHkgdGVzdGVkIGZvciBwcmVzdHlsaW5nIHdlIGRvbid0IGhhdmUgdG8gZG8gaXQgYWdhaW5cbiAgICBpZiAoZi5wcmVTdHlsZVRlc3RDb21wbGV0ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBzaG91bGQgaGF2ZSBhbiBpbmxpbmUgc3R5bGUsIGlmIG5vdCwgYXBwbHlcbiAgICBpZiAoIS9pbmxpbmUtLy50ZXN0KGYuZGlzcGxheSkpIHtcbiAgICAgIHByZVN0eWxlID0gdHJ1ZTtcbiAgICAgIGYuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgIH1cblxuICAgIC8vIHRvIGNvcnJlY3RseSBjYWxjdWxhdGUgZGltZW5zaW9ucyB0aGUgZWxlbWVudCBzaG91bGQgaGF2ZSB3aGl0ZVNwYWNlIHNldCB0byBub3dyYXBcbiAgICBpZiAoZi53aGl0ZVNwYWNlICE9PSAnbm93cmFwJykge1xuICAgICAgcHJlU3R5bGUgPSB0cnVlO1xuICAgICAgZi53aGl0ZVNwYWNlID0gJ25vd3JhcCc7XG4gICAgfVxuXG4gICAgLy8gd2UgZG9uJ3QgaGF2ZSB0byBkbyB0aGlzIHR3aWNlXG4gICAgZi5wcmVTdHlsZVRlc3RDb21wbGV0ZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHByZVN0eWxlO1xuICB9O1xuXG4gIC8vIGFwcGx5IHN0eWxlcyB0byBzaW5nbGUgZml0dHlcbiAgdmFyIGFwcGx5U3R5bGUgPSBmdW5jdGlvbiBhcHBseVN0eWxlKGYpIHtcblxuICAgIC8vIHJlbWVtYmVyIG9yaWdpbmFsIHN0eWxlLCB3ZSBuZWVkIHRoaXMgdG8gcmVzdG9yZSB0aGUgZml0dHkgc3R5bGUgd2hlbiB1bnN1YnNjcmliaW5nXG4gICAgaWYgKCFmLm9yaWdpbmFsU3R5bGUpIHtcbiAgICAgIGYub3JpZ2luYWxTdHlsZSA9IGYuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBuZXcgc3R5bGUgdG8gdGhlIG9yaWdpbmFsIHN0eWxlIHBsdXMgdGhlIGZpdHR5IHN0eWxlc1xuICAgIGYuZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gZi5vcmlnaW5hbFN0eWxlICsgJzt3aGl0ZS1zcGFjZTonICsgZi53aGl0ZVNwYWNlICsgJztkaXNwbGF5OicgKyBmLmRpc3BsYXkgKyAnO2ZvbnQtc2l6ZTonICsgZi5jdXJyZW50Rm9udFNpemUgKyAncHgnO1xuICB9O1xuXG4gIC8vIGRpc3BhdGNoIGEgZml0IGV2ZW50IG9uIGEgZml0dHlcbiAgdmFyIGRpc3BhdGNoRml0RXZlbnQgPSBmdW5jdGlvbiBkaXNwYXRjaEZpdEV2ZW50KGYpIHtcbiAgICBmLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZpdCcsIHtcbiAgICAgIGRldGFpbDoge1xuICAgICAgICBvbGRWYWx1ZTogZi5wcmV2aW91c0ZvbnRTaXplLFxuICAgICAgICBuZXdWYWx1ZTogZi5jdXJyZW50Rm9udFNpemUsXG4gICAgICAgIHNjYWxlRmFjdG9yOiBmLmN1cnJlbnRGb250U2l6ZSAvIGYucHJldmlvdXNGb250U2l6ZVxuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcblxuICAvLyBmaXQgbWV0aG9kLCBtYXJrcyB0aGUgZml0dHkgYXMgZGlydHkgYW5kIHJlcXVlc3RzIGEgcmVkcmF3ICh0aGlzIHdpbGwgYWxzbyByZWRyYXcgYW55IG90aGVyIGZpdHR5IG1hcmtlZCBhcyBkaXJ0eSlcbiAgdmFyIGZpdCA9IGZ1bmN0aW9uIGZpdChmLCB0eXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGYuZGlydHkgPSB0eXBlO1xuICAgICAgcmVxdWVzdFJlZHJhdygpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gYWRkIGEgbmV3IGZpdHR5LCBkb2VzIG5vdCByZWRyYXcgc2FpZCBmaXR0eVxuICB2YXIgc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGYpIHtcblxuICAgIC8vIHRoaXMgaXMgYSBuZXcgZml0dHkgc28gd2UgbmVlZCB0byB2YWxpZGF0ZSBpZiBpdCdzIHN0eWxlcyBhcmUgaW4gb3JkZXJcbiAgICBmLm5ld2JpZSA9IHRydWU7XG5cbiAgICAvLyBiZWNhdXNlIGl0J3MgYSBuZXcgZml0dHkgaXQgc2hvdWxkIGFsc28gYmUgZGlydHksIHdlIHdhbnQgaXQgdG8gcmVkcmF3IG9uIHRoZSBmaXJzdCBsb29wXG4gICAgZi5kaXJ0eSA9IHRydWU7XG5cbiAgICAvLyB3ZSB3YW50IHRvIGJlIGFibGUgdG8gdXBkYXRlIHRoaXMgZml0dHlcbiAgICBmaXR0aWVzLnB1c2goZik7XG4gIH07XG5cbiAgLy8gcmVtb3ZlIGFuIGV4aXN0aW5nIGZpdHR5XG4gIHZhciB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXG4gICAgICAvLyByZW1vdmUgZnJvbSBmaXR0aWVzIGFycmF5XG4gICAgICBmaXR0aWVzID0gZml0dGllcy5maWx0ZXIoZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgcmV0dXJuIF8uZWxlbWVudCAhPT0gZi5lbGVtZW50O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHN0b3Agb2JzZXJ2aW5nIERPTVxuICAgICAgaWYgKGYub2JzZXJ2ZU11dGF0aW9ucykge1xuICAgICAgICBmLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVzZXQgZm9udCBzaXplIHRvIGluaGVyaXRlZCBzaXplXG4gICAgICBmLmVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGYub3JpZ2luYWxTdHlsZTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBvYnNlcnZlTXV0YXRpb25zID0gZnVuY3Rpb24gb2JzZXJ2ZU11dGF0aW9ucyhmKSB7XG5cbiAgICAvLyBubyBvYnNlcnZpbmc/XG4gICAgaWYgKCFmLm9ic2VydmVNdXRhdGlvbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBzdGFydCBvYnNlcnZpbmcgbXV0YXRpb25zXG4gICAgZi5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZpdChmLCBEcmF3U3RhdGUuRElSVFlfQ09OVEVOVCkpO1xuXG4gICAgLy8gc3RhcnQgb2JzZXJ2aW5nXG4gICAgZi5vYnNlcnZlci5vYnNlcnZlKGYuZWxlbWVudCwgZi5vYnNlcnZlTXV0YXRpb25zKTtcbiAgfTtcblxuICAvLyBkZWZhdWx0IG11dGF0aW9uIG9ic2VydmVyIHNldHRpbmdzXG4gIHZhciBtdXRhdGlvbk9ic2VydmVyRGVmYXVsdFNldHRpbmcgPSB7XG4gICAgc3VidHJlZTogdHJ1ZSxcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9O1xuXG4gIC8vIGRlZmF1bHQgZml0dHkgb3B0aW9uc1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbWluU2l6ZTogMTYsXG4gICAgbWF4U2l6ZTogNTEyLFxuICAgIG11bHRpTGluZTogdHJ1ZSxcbiAgICBvYnNlcnZlTXV0YXRpb25zOiAnTXV0YXRpb25PYnNlcnZlcicgaW4gdyA/IG11dGF0aW9uT2JzZXJ2ZXJEZWZhdWx0U2V0dGluZyA6IGZhbHNlXG4gIH07XG5cbiAgLy8gYXJyYXkgb2YgZWxlbWVudHMgaW4sIGZpdHR5IGluc3RhbmNlcyBvdXRcbiAgZnVuY3Rpb24gZml0dHlDcmVhdGUoZWxlbWVudHMsIG9wdGlvbnMpIHtcblxuICAgIC8vIHNldCBvcHRpb25zIG9iamVjdFxuICAgIHZhciBmaXR0eU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgLy8gY3JlYXRlIGZpdHRpZXNcbiAgICB2YXIgcHVibGljRml0dGllcyA9IGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgICAvLyBjcmVhdGUgZml0dHkgaW5zdGFuY2VcbiAgICAgIHZhciBmID0gX2V4dGVuZHMoe30sIGZpdHR5T3B0aW9ucywge1xuXG4gICAgICAgIC8vIGludGVybmFsIG9wdGlvbnMgZm9yIHRoaXMgZml0dHlcbiAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgfSk7XG5cbiAgICAgIC8vIHJlZ2lzdGVyIHRoaXMgZml0dHlcbiAgICAgIHN1YnNjcmliZShmKTtcblxuICAgICAgLy8gc2hvdWxkIHdlIG9ic2VydmUgRE9NIG11dGF0aW9uc1xuICAgICAgb2JzZXJ2ZU11dGF0aW9ucyhmKTtcblxuICAgICAgLy8gZXhwb3NlIEFQSVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgZml0OiBmaXQoZiwgRHJhd1N0YXRlLkRJUlRZKSxcbiAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlKGYpXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gY2FsbCByZWRyYXcgb24gbmV3bHkgaW5pdGlhdGVkIGZpdHRpZXNcbiAgICByZXF1ZXN0UmVkcmF3KCk7XG5cbiAgICAvLyBleHBvc2UgZml0dGllc1xuICAgIHJldHVybiBwdWJsaWNGaXR0aWVzO1xuICB9XG5cbiAgLy8gZml0dHkgY3JlYXRpb24gZnVuY3Rpb25cbiAgZnVuY3Rpb24gZml0dHkodGFyZ2V0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cbiAgICAvLyBpZiB0YXJnZXQgaXMgYSBzdHJpbmdcbiAgICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgP1xuXG4gICAgLy8gdHJlYXQgaXQgYXMgYSBxdWVyeVNlbGVjdG9yXG4gICAgZml0dHlDcmVhdGUodG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldCkpLCBvcHRpb25zKSA6XG5cbiAgICAvLyBjcmVhdGUgc2luZ2xlIGZpdHR5XG4gICAgZml0dHlDcmVhdGUoW3RhcmdldF0sIG9wdGlvbnMpWzBdO1xuICB9XG5cbiAgLy8gaGFuZGxlcyB2aWV3cG9ydCBjaGFuZ2VzLCByZWRyYXdzIGFsbCBmaXR0aWVzLCBidXQgb25seSBkb2VzIHNvIGFmdGVyIGEgdGltZW91dFxuICB2YXIgcmVzaXplRGVib3VuY2UgPSBudWxsO1xuICB2YXIgb25XaW5kb3dSZXNpemVkID0gZnVuY3Rpb24gb25XaW5kb3dSZXNpemVkKCkge1xuICAgIHcuY2xlYXJUaW1lb3V0KHJlc2l6ZURlYm91bmNlKTtcbiAgICByZXNpemVEZWJvdW5jZSA9IHcuc2V0VGltZW91dChyZWRyYXdBbGwoRHJhd1N0YXRlLkRJUlRZX0xBWU9VVCksIGZpdHR5Lm9ic2VydmVXaW5kb3dEZWxheSk7XG4gIH07XG5cbiAgLy8gZGVmaW5lIG9ic2VydmUgd2luZG93IHByb3BlcnR5LCBzbyB3aGVuIHdlIHNldCBpdCB0byB0cnVlIG9yIGZhbHNlIGV2ZW50cyBhcmUgYXV0b21hdGljYWxseSBhZGRlZCBhbmQgcmVtb3ZlZFxuICB2YXIgZXZlbnRzID0gWydyZXNpemUnLCAnb3JpZW50YXRpb25jaGFuZ2UnXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpdHR5LCAnb2JzZXJ2ZVdpbmRvdycsIHtcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChlbmFibGVkKSB7XG4gICAgICB2YXIgbWV0aG9kID0gKGVuYWJsZWQgPyAnYWRkJyA6ICdyZW1vdmUnKSArICdFdmVudExpc3RlbmVyJztcbiAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHdbbWV0aG9kXShlLCBvbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBmaXR0eSBnbG9iYWwgcHJvcGVydGllcyAoYnkgc2V0dGluZyBvYnNlcnZlV2luZG93IHRvIHRydWUgdGhlIGV2ZW50cyBhYm92ZSBnZXQgYWRkZWQpXG4gIGZpdHR5Lm9ic2VydmVXaW5kb3cgPSB0cnVlO1xuICBmaXR0eS5vYnNlcnZlV2luZG93RGVsYXkgPSAxMDA7XG5cbiAgLy8gcHVibGljIGZpdCBhbGwgbWV0aG9kLCB3aWxsIGZvcmNlIHJlZHJhdyBubyBtYXR0ZXIgd2hhdFxuICBmaXR0eS5maXRBbGwgPSByZWRyYXdBbGwoRHJhd1N0YXRlLkRJUlRZKTtcblxuICAvLyBleHBvcnQgb3VyIGZpdHR5IGZ1bmN0aW9uLCB3ZSBkb24ndCB3YW50IHRvIGtlZXAgaXQgdG8gb3VyIHNlbHZlc1xuICByZXR1cm4gZml0dHk7XG59KHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHdpbmRvdyk7IiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjAgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG5cdH1cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuXHQgKiBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbFxuXHQgKiBhZGRyZXNzZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuXHQgKiBjaGFyYWN0ZXIuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrXG5cdCAqIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHtcblx0XHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0aWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0XHRyZXN1bHQgPSBwYXJ0c1swXSArICdAJztcblx0XHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHRcdH1cblx0XHQvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0XHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpO1xuXHRcdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcblx0ICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuXHQgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuXHQgKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcblx0ICogbWF0Y2hpbmcgVVRGLTE2LlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWBcblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4zLjInLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7XG5cdFx0XHQvLyBpbiBOb2RlLmpzLCBpby5qcywgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIi8qIVxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xuICogSVB2NiBTdXBwb3J0XG4gKlxuICogVmVyc2lvbjogMS4xOS4xXG4gKlxuICogQXV0aG9yOiBSb2RuZXkgUmVobVxuICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvXG4gKlxuICogTGljZW5zZWQgdW5kZXJcbiAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICpcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gTm9kZVxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICByb290LklQdjYgPSBmYWN0b3J5KHJvb3QpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uIChyb290KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKlxuICB2YXIgX2luID0gXCJmZTgwOjAwMDA6MDAwMDowMDAwOjAyMDQ6NjFmZjpmZTlkOmYxNTZcIjtcbiAgdmFyIF9vdXQgPSBJUHY2LmJlc3QoX2luKTtcbiAgdmFyIF9leHBlY3RlZCA9IFwiZmU4MDo6MjA0OjYxZmY6ZmU5ZDpmMTU2XCI7XG5cbiAgY29uc29sZS5sb2coX2luLCBfb3V0LCBfZXhwZWN0ZWQsIF9vdXQgPT09IF9leHBlY3RlZCk7XG4gICovXG5cbiAgLy8gc2F2ZSBjdXJyZW50IElQdjYgdmFyaWFibGUsIGlmIGFueVxuICB2YXIgX0lQdjYgPSByb290ICYmIHJvb3QuSVB2NjtcblxuICBmdW5jdGlvbiBiZXN0UHJlc2VudGF0aW9uKGFkZHJlc3MpIHtcbiAgICAvLyBiYXNlZCBvbjpcbiAgICAvLyBKYXZhc2NyaXB0IHRvIHRlc3QgYW4gSVB2NiBhZGRyZXNzIGZvciBwcm9wZXIgZm9ybWF0LCBhbmQgdG9cbiAgICAvLyBwcmVzZW50IHRoZSBcImJlc3QgdGV4dCByZXByZXNlbnRhdGlvblwiIGFjY29yZGluZyB0byBJRVRGIERyYWZ0IFJGQyBhdFxuICAgIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtNm1hbi10ZXh0LWFkZHItcmVwcmVzZW50YXRpb24tMDRcbiAgICAvLyA4IEZlYiAyMDEwIFJpY2ggQnJvd24sIERhcnR3YXJlLCBMTENcbiAgICAvLyBQbGVhc2UgZmVlbCBmcmVlIHRvIHVzZSB0aGlzIGNvZGUgYXMgbG9uZyBhcyB5b3UgcHJvdmlkZSBhIGxpbmsgdG9cbiAgICAvLyBodHRwOi8vd3d3LmludGVybWFwcGVyLmNvbVxuICAgIC8vIGh0dHA6Ly9pbnRlcm1hcHBlci5jb20vc3VwcG9ydC90b29scy9JUFY2LVZhbGlkYXRvci5hc3B4XG4gICAgLy8gaHR0cDovL2Rvd25sb2FkLmRhcnR3YXJlLmNvbS90aGlyZHBhcnR5L2lwdjZ2YWxpZGF0b3IuanNcblxuICAgIHZhciBfYWRkcmVzcyA9IGFkZHJlc3MudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgc2VnbWVudHMgPSBfYWRkcmVzcy5zcGxpdCgnOicpO1xuICAgIHZhciBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgdmFyIHRvdGFsID0gODtcblxuICAgIC8vIHRyaW0gY29sb25zICg6OiBvciA6OmE6Yjpj4oCmIG9yIOKApmE6YjpjOjopXG4gICAgaWYgKHNlZ21lbnRzWzBdID09PSAnJyAmJiBzZWdtZW50c1sxXSA9PT0gJycgJiYgc2VnbWVudHNbMl0gPT09ICcnKSB7XG4gICAgICAvLyBtdXN0IGhhdmUgYmVlbiA6OlxuICAgICAgLy8gcmVtb3ZlIGZpcnN0IHR3byBpdGVtc1xuICAgICAgc2VnbWVudHMuc2hpZnQoKTtcbiAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50c1swXSA9PT0gJycgJiYgc2VnbWVudHNbMV0gPT09ICcnKSB7XG4gICAgICAvLyBtdXN0IGhhdmUgYmVlbiA6Onh4eHhcbiAgICAgIC8vIHJlbW92ZSB0aGUgZmlyc3QgaXRlbVxuICAgICAgc2VnbWVudHMuc2hpZnQoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdID09PSAnJyAmJiBzZWdtZW50c1tsZW5ndGggLSAyXSA9PT0gJycpIHtcbiAgICAgIC8vIG11c3QgaGF2ZSBiZWVuIHh4eHg6OlxuICAgICAgc2VnbWVudHMucG9wKCk7XG4gICAgfVxuXG4gICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgLy8gYWRqdXN0IHRvdGFsIHNlZ21lbnRzIGZvciBJUHY0IHRyYWlsZXJcbiAgICBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0uaW5kZXhPZignLicpICE9PSAtMSkge1xuICAgICAgLy8gZm91bmQgYSBcIi5cIiB3aGljaCBtZWFucyBJUHY0XG4gICAgICB0b3RhbCA9IDc7XG4gICAgfVxuXG4gICAgLy8gZmlsbCBlbXB0eSBzZWdtZW50cyB0aGVtIHdpdGggXCIwMDAwXCJcbiAgICB2YXIgcG9zO1xuICAgIGZvciAocG9zID0gMDsgcG9zIDwgbGVuZ3RoOyBwb3MrKykge1xuICAgICAgaWYgKHNlZ21lbnRzW3Bvc10gPT09ICcnKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3MgPCB0b3RhbCkge1xuICAgICAgc2VnbWVudHMuc3BsaWNlKHBvcywgMSwgJzAwMDAnKTtcbiAgICAgIHdoaWxlIChzZWdtZW50cy5sZW5ndGggPCB0b3RhbCkge1xuICAgICAgICBzZWdtZW50cy5zcGxpY2UocG9zLCAwLCAnMDAwMCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHN0cmlwIGxlYWRpbmcgemVyb3NcbiAgICB2YXIgX3NlZ21lbnRzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgX3NlZ21lbnRzID0gc2VnbWVudHNbaV0uc3BsaXQoJycpO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzIDsgaisrKSB7XG4gICAgICAgIGlmIChfc2VnbWVudHNbMF0gPT09ICcwJyAmJiBfc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIF9zZWdtZW50cy5zcGxpY2UoMCwxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50c1tpXSA9IF9zZWdtZW50cy5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvLyBmaW5kIGxvbmdlc3Qgc2VxdWVuY2Ugb2YgemVyb2VzIGFuZCBjb2FsZXNjZSB0aGVtIGludG8gb25lIHNlZ21lbnRcbiAgICB2YXIgYmVzdCA9IC0xO1xuICAgIHZhciBfYmVzdCA9IDA7XG4gICAgdmFyIF9jdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudCA9IC0xO1xuICAgIHZhciBpbnplcm9lcyA9IGZhbHNlO1xuICAgIC8vIGk7IGFscmVhZHkgZGVjbGFyZWRcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG4gICAgICBpZiAoaW56ZXJvZXMpIHtcbiAgICAgICAgaWYgKHNlZ21lbnRzW2ldID09PSAnMCcpIHtcbiAgICAgICAgICBfY3VycmVudCArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluemVyb2VzID0gZmFsc2U7XG4gICAgICAgICAgaWYgKF9jdXJyZW50ID4gX2Jlc3QpIHtcbiAgICAgICAgICAgIGJlc3QgPSBjdXJyZW50O1xuICAgICAgICAgICAgX2Jlc3QgPSBfY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZWdtZW50c1tpXSA9PT0gJzAnKSB7XG4gICAgICAgICAgaW56ZXJvZXMgPSB0cnVlO1xuICAgICAgICAgIGN1cnJlbnQgPSBpO1xuICAgICAgICAgIF9jdXJyZW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfY3VycmVudCA+IF9iZXN0KSB7XG4gICAgICBiZXN0ID0gY3VycmVudDtcbiAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKF9iZXN0ID4gMSkge1xuICAgICAgc2VnbWVudHMuc3BsaWNlKGJlc3QsIF9iZXN0LCAnJyk7XG4gICAgfVxuXG4gICAgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgLy8gYXNzZW1ibGUgcmVtYWluaW5nIHNlZ21lbnRzXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIGlmIChzZWdtZW50c1swXSA9PT0gJycpICB7XG4gICAgICByZXN1bHQgPSAnOic7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2VnbWVudHNbaV07XG4gICAgICBpZiAoaSA9PT0gbGVuZ3RoIC0gMSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9ICc6JztcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMV0gPT09ICcnKSB7XG4gICAgICByZXN1bHQgKz0gJzonO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIGlmIChyb290LklQdjYgPT09IHRoaXMpIHtcbiAgICAgIHJvb3QuSVB2NiA9IF9JUHY2O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXN0OiBiZXN0UHJlc2VudGF0aW9uLFxuICAgIG5vQ29uZmxpY3Q6IG5vQ29uZmxpY3RcbiAgfTtcbn0pKTtcbiIsIi8qIVxuICogVVJJLmpzIC0gTXV0YXRpbmcgVVJMc1xuICogU2Vjb25kIExldmVsIERvbWFpbiAoU0xEKSBTdXBwb3J0XG4gKlxuICogVmVyc2lvbjogMS4xOS4xXG4gKlxuICogQXV0aG9yOiBSb2RuZXkgUmVobVxuICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvXG4gKlxuICogTGljZW5zZWQgdW5kZXJcbiAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICpcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gTm9kZVxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICByb290LlNlY29uZExldmVsRG9tYWlucyA9IGZhY3Rvcnkocm9vdCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKHJvb3QpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIHNhdmUgY3VycmVudCBTZWNvbmRMZXZlbERvbWFpbnMgdmFyaWFibGUsIGlmIGFueVxuICB2YXIgX1NlY29uZExldmVsRG9tYWlucyA9IHJvb3QgJiYgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnM7XG5cbiAgdmFyIFNMRCA9IHtcbiAgICAvLyBsaXN0IG9mIGtub3duIFNlY29uZCBMZXZlbCBEb21haW5zXG4gICAgLy8gY29udmVydGVkIGxpc3Qgb2YgU0xEcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nYXZpbmdtaWxsZXIvc2Vjb25kLWxldmVsLWRvbWFpbnNcbiAgICAvLyAtLS0tXG4gICAgLy8gcHVibGljc3VmZml4Lm9yZyBpcyBtb3JlIGN1cnJlbnQgYW5kIGFjdHVhbGx5IHVzZWQgYnkgYSBjb3VwbGUgb2YgYnJvd3NlcnMgaW50ZXJuYWxseS5cbiAgICAvLyBkb3duc2lkZSBpcyBpdCBhbHNvIGNvbnRhaW5zIGRvbWFpbnMgbGlrZSBcImR5bmRucy5vcmdcIiAtIHdoaWNoIGlzIGZpbmUgZm9yIHRoZSBzZWN1cml0eVxuICAgIC8vIGlzc3VlcyBicm93c2VyIGhhdmUgdG8gZGVhbCB3aXRoIChTT1AgZm9yIGNvb2tpZXMsIGV0YykgLSBidXQgaXMgd2F5IG92ZXJib2FyZCBmb3IgVVJJLmpzXG4gICAgLy8gLS0tLVxuICAgIGxpc3Q6IHtcbiAgICAgICdhYyc6JyBjb20gZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAnYWUnOicgYWMgY28gZ292IG1pbCBuYW1lIG5ldCBvcmcgcHJvIHNjaCAnLFxuICAgICAgJ2FmJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdhbCc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2FvJzonIGNvIGVkIGd2IGl0IG9nIHBiICcsXG4gICAgICAnYXInOicgY29tIGVkdSBnb2IgZ292IGludCBtaWwgbmV0IG9yZyB0dXIgJyxcbiAgICAgICdhdCc6JyBhYyBjbyBndiBvciAnLFxuICAgICAgJ2F1JzonIGFzbiBjb20gY3Npcm8gZWR1IGdvdiBpZCBuZXQgb3JnICcsXG4gICAgICAnYmEnOicgY28gY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgcnMgdW5iaSB1bm1vIHVuc2EgdW50eiB1bnplICcsXG4gICAgICAnYmInOicgYml6IGNvIGNvbSBlZHUgZ292IGluZm8gbmV0IG9yZyBzdG9yZSB0diAnLFxuICAgICAgJ2JoJzonIGJpeiBjYyBjb20gZWR1IGdvdiBpbmZvIG5ldCBvcmcgJyxcbiAgICAgICdibic6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnYm8nOicgY29tIGVkdSBnb2IgZ292IGludCBtaWwgbmV0IG9yZyB0diAnLFxuICAgICAgJ2JyJzonIGFkbSBhZHYgYWdyIGFtIGFycSBhcnQgYXRvIGIgYmlvIGJsb2cgYm1kIGNpbSBjbmcgY250IGNvbSBjb29wIGVjbiBlZHUgZW5nIGVzcCBldGMgZXRpIGZhciBmbG9nIGZtIGZuZCBmb3QgZnN0IGcxMiBnZ2YgZ292IGltYiBpbmQgaW5mIGpvciBqdXMgbGVsIG1hdCBtZWQgbWlsIG11cyBuZXQgbm9tIG5vdCBudHIgb2RvIG9yZyBwcGcgcHJvIHBzYyBwc2kgcXNsIHJlYyBzbGcgc3J2IHRtcCB0cmQgdHVyIHR2IHZldCB2bG9nIHdpa2kgemxnICcsXG4gICAgICAnYnMnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2J6JzonIGR1IGV0IG9tIG92IHJnICcsXG4gICAgICAnY2EnOicgYWIgYmMgbWIgbmIgbmYgbmwgbnMgbnQgbnUgb24gcGUgcWMgc2sgeWsgJyxcbiAgICAgICdjayc6JyBiaXogY28gZWR1IGdlbiBnb3YgaW5mbyBuZXQgb3JnICcsXG4gICAgICAnY24nOicgYWMgYWggYmogY29tIGNxIGVkdSBmaiBnZCBnb3YgZ3MgZ3ggZ3ogaGEgaGIgaGUgaGkgaGwgaG4gamwganMganggbG4gbWlsIG5ldCBubSBueCBvcmcgcWggc2Mgc2Qgc2ggc24gc3ggdGogdHcgeGogeHogeW4gemogJyxcbiAgICAgICdjbyc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG5vbSBvcmcgJyxcbiAgICAgICdjcic6JyBhYyBjIGNvIGVkIGZpIGdvIG9yIHNhICcsXG4gICAgICAnY3knOicgYWMgYml6IGNvbSBla2xvZ2VzIGdvdiBsdGQgbmFtZSBuZXQgb3JnIHBhcmxpYW1lbnQgcHJlc3MgcHJvIHRtICcsXG4gICAgICAnZG8nOicgYXJ0IGNvbSBlZHUgZ29iIGdvdiBtaWwgbmV0IG9yZyBzbGQgd2ViICcsXG4gICAgICAnZHonOicgYXJ0IGFzc28gY29tIGVkdSBnb3YgbmV0IG9yZyBwb2wgJyxcbiAgICAgICdlYyc6JyBjb20gZWR1IGZpbiBnb3YgaW5mbyBtZWQgbWlsIG5ldCBvcmcgcHJvICcsXG4gICAgICAnZWcnOicgY29tIGVkdSBldW4gZ292IG1pbCBuYW1lIG5ldCBvcmcgc2NpICcsXG4gICAgICAnZXInOicgY29tIGVkdSBnb3YgaW5kIG1pbCBuZXQgb3JnIHJvY2hlc3QgdyAnLFxuICAgICAgJ2VzJzonIGNvbSBlZHUgZ29iIG5vbSBvcmcgJyxcbiAgICAgICdldCc6JyBiaXogY29tIGVkdSBnb3YgaW5mbyBuYW1lIG5ldCBvcmcgJyxcbiAgICAgICdmaic6JyBhYyBiaXogY29tIGluZm8gbWlsIG5hbWUgbmV0IG9yZyBwcm8gJyxcbiAgICAgICdmayc6JyBhYyBjbyBnb3YgbmV0IG5vbSBvcmcgJyxcbiAgICAgICdmcic6JyBhc3NvIGNvbSBmIGdvdXYgbm9tIHByZCBwcmVzc2UgdG0gJyxcbiAgICAgICdnZyc6JyBjbyBuZXQgb3JnICcsXG4gICAgICAnZ2gnOicgY29tIGVkdSBnb3YgbWlsIG9yZyAnLFxuICAgICAgJ2duJzonIGFjIGNvbSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2dyJzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnICcsXG4gICAgICAnZ3QnOicgY29tIGVkdSBnb2IgaW5kIG1pbCBuZXQgb3JnICcsXG4gICAgICAnZ3UnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2hrJzonIGNvbSBlZHUgZ292IGlkdiBuZXQgb3JnICcsXG4gICAgICAnaHUnOicgMjAwMCBhZ3JhciBib2x0IGNhc2lubyBjaXR5IGNvIGVyb3RpY2EgZXJvdGlrYSBmaWxtIGZvcnVtIGdhbWVzIGhvdGVsIGluZm8gaW5nYXRsYW4gam9nYXN6IGtvbnl2ZWxvIGxha2FzIG1lZGlhIG5ld3Mgb3JnIHByaXYgcmVrbGFtIHNleCBzaG9wIHNwb3J0IHN1bGkgc3pleCB0bSB0b3pzZGUgdXRhemFzIHZpZGVvICcsXG4gICAgICAnaWQnOicgYWMgY28gZ28gbWlsIG5ldCBvciBzY2ggd2ViICcsXG4gICAgICAnaWwnOicgYWMgY28gZ292IGlkZiBrMTIgbXVuaSBuZXQgb3JnICcsXG4gICAgICAnaW4nOicgYWMgY28gZWR1IGVybmV0IGZpcm0gZ2VuIGdvdiBpIGluZCBtaWwgbmV0IG5pYyBvcmcgcmVzICcsXG4gICAgICAnaXEnOicgY29tIGVkdSBnb3YgaSBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2lyJzonIGFjIGNvIGRuc3NlYyBnb3YgaSBpZCBuZXQgb3JnIHNjaCAnLFxuICAgICAgJ2l0JzonIGVkdSBnb3YgJyxcbiAgICAgICdqZSc6JyBjbyBuZXQgb3JnICcsXG4gICAgICAnam8nOicgY29tIGVkdSBnb3YgbWlsIG5hbWUgbmV0IG9yZyBzY2ggJyxcbiAgICAgICdqcCc6JyBhYyBhZCBjbyBlZCBnbyBnciBsZyBuZSBvciAnLFxuICAgICAgJ2tlJzonIGFjIGNvIGdvIGluZm8gbWUgbW9iaSBuZSBvciBzYyAnLFxuICAgICAgJ2toJzonIGNvbSBlZHUgZ292IG1pbCBuZXQgb3JnIHBlciAnLFxuICAgICAgJ2tpJzonIGJpeiBjb20gZGUgZWR1IGdvdiBpbmZvIG1vYiBuZXQgb3JnIHRlbCAnLFxuICAgICAgJ2ttJzonIGFzc28gY29tIGNvb3AgZWR1IGdvdXYgayBtZWRlY2luIG1pbCBub20gbm90YWlyZXMgcGhhcm1hY2llbnMgcHJlc3NlIHRtIHZldGVyaW5haXJlICcsXG4gICAgICAna24nOicgZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAna3InOicgYWMgYnVzYW4gY2h1bmdidWsgY2h1bmduYW0gY28gZGFlZ3UgZGFlamVvbiBlcyBnYW5nd29uIGdvIGd3YW5nanUgZ3llb25nYnVrIGd5ZW9uZ2dpIGd5ZW9uZ25hbSBocyBpbmNoZW9uIGplanUgamVvbmJ1ayBqZW9ubmFtIGsga2cgbWlsIG1zIG5lIG9yIHBlIHJlIHNjIHNlb3VsIHVsc2FuICcsXG4gICAgICAna3cnOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2t5JzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdreic6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ2xiJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdsayc6JyBhc3NuIGNvbSBlZHUgZ292IGdycCBob3RlbCBpbnQgbHRkIG5ldCBuZ28gb3JnIHNjaCBzb2Mgd2ViICcsXG4gICAgICAnbHInOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ2x2JzonIGFzbiBjb20gY29uZiBlZHUgZ292IGlkIG1pbCBuZXQgb3JnICcsXG4gICAgICAnbHknOicgY29tIGVkdSBnb3YgaWQgbWVkIG5ldCBvcmcgcGxjIHNjaCAnLFxuICAgICAgJ21hJzonIGFjIGNvIGdvdiBtIG5ldCBvcmcgcHJlc3MgJyxcbiAgICAgICdtYyc6JyBhc3NvIHRtICcsXG4gICAgICAnbWUnOicgYWMgY28gZWR1IGdvdiBpdHMgbmV0IG9yZyBwcml2ICcsXG4gICAgICAnbWcnOicgY29tIGVkdSBnb3YgbWlsIG5vbSBvcmcgcHJkIHRtICcsXG4gICAgICAnbWsnOicgY29tIGVkdSBnb3YgaW5mIG5hbWUgbmV0IG9yZyBwcm8gJyxcbiAgICAgICdtbCc6JyBjb20gZWR1IGdvdiBuZXQgb3JnIHByZXNzZSAnLFxuICAgICAgJ21uJzonIGVkdSBnb3Ygb3JnICcsXG4gICAgICAnbW8nOicgY29tIGVkdSBnb3YgbmV0IG9yZyAnLFxuICAgICAgJ210JzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdtdic6JyBhZXJvIGJpeiBjb20gY29vcCBlZHUgZ292IGluZm8gaW50IG1pbCBtdXNldW0gbmFtZSBuZXQgb3JnIHBybyAnLFxuICAgICAgJ213JzonIGFjIGNvIGNvbSBjb29wIGVkdSBnb3YgaW50IG11c2V1bSBuZXQgb3JnICcsXG4gICAgICAnbXgnOicgY29tIGVkdSBnb2IgbmV0IG9yZyAnLFxuICAgICAgJ215JzonIGNvbSBlZHUgZ292IG1pbCBuYW1lIG5ldCBvcmcgc2NoICcsXG4gICAgICAnbmYnOicgYXJ0cyBjb20gZmlybSBpbmZvIG5ldCBvdGhlciBwZXIgcmVjIHN0b3JlIHdlYiAnLFxuICAgICAgJ25nJzonIGJpeiBjb20gZWR1IGdvdiBtaWwgbW9iaSBuYW1lIG5ldCBvcmcgc2NoICcsXG4gICAgICAnbmknOicgYWMgY28gY29tIGVkdSBnb2IgbWlsIG5ldCBub20gb3JnICcsXG4gICAgICAnbnAnOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICducic6JyBiaXogY29tIGVkdSBnb3YgaW5mbyBuZXQgb3JnICcsXG4gICAgICAnb20nOicgYWMgYml6IGNvIGNvbSBlZHUgZ292IG1lZCBtaWwgbXVzZXVtIG5ldCBvcmcgcHJvIHNjaCAnLFxuICAgICAgJ3BlJzonIGNvbSBlZHUgZ29iIG1pbCBuZXQgbm9tIG9yZyBzbGQgJyxcbiAgICAgICdwaCc6JyBjb20gZWR1IGdvdiBpIG1pbCBuZXQgbmdvIG9yZyAnLFxuICAgICAgJ3BrJzonIGJpeiBjb20gZWR1IGZhbSBnb2IgZ29rIGdvbiBnb3AgZ29zIGdvdiBuZXQgb3JnIHdlYiAnLFxuICAgICAgJ3BsJzonIGFydCBiaWFseXN0b2sgYml6IGNvbSBlZHUgZ2RhIGdkYW5zayBnb3J6b3cgZ292IGluZm8ga2F0b3dpY2Uga3Jha293IGxvZHogbHVibGluIG1pbCBuZXQgbmdvIG9sc3p0eW4gb3JnIHBvem5hbiBwd3IgcmFkb20gc2x1cHNrIHN6Y3plY2luIHRvcnVuIHdhcnN6YXdhIHdhdyB3cm9jIHdyb2NsYXcgemdvcmEgJyxcbiAgICAgICdwcic6JyBhYyBiaXogY29tIGVkdSBlc3QgZ292IGluZm8gaXNsYSBuYW1lIG5ldCBvcmcgcHJvIHByb2YgJyxcbiAgICAgICdwcyc6JyBjb20gZWR1IGdvdiBuZXQgb3JnIHBsbyBzZWMgJyxcbiAgICAgICdwdyc6JyBiZWxhdSBjbyBlZCBnbyBuZSBvciAnLFxuICAgICAgJ3JvJzonIGFydHMgY29tIGZpcm0gaW5mbyBub20gbnQgb3JnIHJlYyBzdG9yZSB0bSB3d3cgJyxcbiAgICAgICdycyc6JyBhYyBjbyBlZHUgZ292IGluIG9yZyAnLFxuICAgICAgJ3NiJzonIGNvbSBlZHUgZ292IG5ldCBvcmcgJyxcbiAgICAgICdzYyc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnc2gnOicgY28gY29tIGVkdSBnb3YgbmV0IG5vbSBvcmcgJyxcbiAgICAgICdzbCc6JyBjb20gZWR1IGdvdiBuZXQgb3JnICcsXG4gICAgICAnc3QnOicgY28gY29tIGNvbnN1bGFkbyBlZHUgZW1iYWl4YWRhIGdvdiBtaWwgbmV0IG9yZyBwcmluY2lwZSBzYW90b21lIHN0b3JlICcsXG4gICAgICAnc3YnOicgY29tIGVkdSBnb2Igb3JnIHJlZCAnLFxuICAgICAgJ3N6JzonIGFjIGNvIG9yZyAnLFxuICAgICAgJ3RyJzonIGF2IGJicyBiZWwgYml6IGNvbSBkciBlZHUgZ2VuIGdvdiBpbmZvIGsxMiBuYW1lIG5ldCBvcmcgcG9sIHRlbCB0c2sgdHYgd2ViICcsXG4gICAgICAndHQnOicgYWVybyBiaXogY2F0IGNvIGNvbSBjb29wIGVkdSBnb3YgaW5mbyBpbnQgam9icyBtaWwgbW9iaSBtdXNldW0gbmFtZSBuZXQgb3JnIHBybyB0ZWwgdHJhdmVsICcsXG4gICAgICAndHcnOicgY2x1YiBjb20gZWJpeiBlZHUgZ2FtZSBnb3YgaWR2IG1pbCBuZXQgb3JnICcsXG4gICAgICAnbXUnOicgYWMgY28gY29tIGdvdiBuZXQgb3Igb3JnICcsXG4gICAgICAnbXonOicgYWMgY28gZWR1IGdvdiBvcmcgJyxcbiAgICAgICduYSc6JyBjbyBjb20gJyxcbiAgICAgICdueic6JyBhYyBjbyBjcmkgZ2VlayBnZW4gZ292dCBoZWFsdGggaXdpIG1hb3JpIG1pbCBuZXQgb3JnIHBhcmxpYW1lbnQgc2Nob29sICcsXG4gICAgICAncGEnOicgYWJvIGFjIGNvbSBlZHUgZ29iIGluZyBtZWQgbmV0IG5vbSBvcmcgc2xkICcsXG4gICAgICAncHQnOicgY29tIGVkdSBnb3YgaW50IG5ldCBub21lIG9yZyBwdWJsICcsXG4gICAgICAncHknOicgY29tIGVkdSBnb3YgbWlsIG5ldCBvcmcgJyxcbiAgICAgICdxYSc6JyBjb20gZWR1IGdvdiBtaWwgbmV0IG9yZyAnLFxuICAgICAgJ3JlJzonIGFzc28gY29tIG5vbSAnLFxuICAgICAgJ3J1JzonIGFjIGFkeWdleWEgYWx0YWkgYW11ciBhcmtoYW5nZWxzayBhc3RyYWtoYW4gYmFzaGtpcmlhIGJlbGdvcm9kIGJpciBicnlhbnNrIGJ1cnlhdGlhIGNiZyBjaGVsIGNoZWx5YWJpbnNrIGNoaXRhIGNodWtvdGthIGNodXZhc2hpYSBjb20gZGFnZXN0YW4gZS1idXJnIGVkdSBnb3YgZ3Jvem55IGludCBpcmt1dHNrIGl2YW5vdm8gaXpoZXZzayBqYXIgam9zaGthci1vbGEga2FsbXlraWEga2FsdWdhIGthbWNoYXRrYSBrYXJlbGlhIGthemFuIGtjaHIga2VtZXJvdm8ga2hhYmFyb3ZzayBraGFrYXNzaWEga2h2IGtpcm92IGtvZW5pZyBrb21pIGtvc3Ryb21hIGtyYW5veWFyc2sga3ViYW4ga3VyZ2FuIGt1cnNrIGxpcGV0c2sgbWFnYWRhbiBtYXJpIG1hcmktZWwgbWFyaW5lIG1pbCBtb3Jkb3ZpYSBtb3NyZWcgbXNrIG11cm1hbnNrIG5hbGNoaWsgbmV0IG5ub3Ygbm92IG5vdm9zaWJpcnNrIG5zayBvbXNrIG9yZW5idXJnIG9yZyBvcnlvbCBwZW56YSBwZXJtIHBwIHBza292IHB0eiBybmQgcnlhemFuIHNha2hhbGluIHNhbWFyYSBzYXJhdG92IHNpbWJpcnNrIHNtb2xlbnNrIHNwYiBzdGF2cm9wb2wgc3R2IHN1cmd1dCB0YW1ib3YgdGF0YXJzdGFuIHRvbSB0b21zayB0c2FyaXRzeW4gdHNrIHR1bGEgdHV2YSB0dmVyIHR5dW1lbiB1ZG0gdWRtdXJ0aWEgdWxhbi11ZGUgdmxhZGlrYXZrYXogdmxhZGltaXIgdmxhZGl2b3N0b2sgdm9sZ29ncmFkIHZvbG9nZGEgdm9yb25lemggdnJuIHZ5YXRrYSB5YWt1dGlhIHlhbWFsIHlla2F0ZXJpbmJ1cmcgeXV6aG5vLXNha2hhbGluc2sgJyxcbiAgICAgICdydyc6JyBhYyBjbyBjb20gZWR1IGdvdXYgZ292IGludCBtaWwgbmV0ICcsXG4gICAgICAnc2EnOicgY29tIGVkdSBnb3YgbWVkIG5ldCBvcmcgcHViIHNjaCAnLFxuICAgICAgJ3NkJzonIGNvbSBlZHUgZ292IGluZm8gbWVkIG5ldCBvcmcgdHYgJyxcbiAgICAgICdzZSc6JyBhIGFjIGIgYmQgYyBkIGUgZiBnIGggaSBrIGwgbSBuIG8gb3JnIHAgcGFydGkgcHAgcHJlc3MgciBzIHQgdG0gdSB3IHggeSB6ICcsXG4gICAgICAnc2cnOicgY29tIGVkdSBnb3YgaWRuIG5ldCBvcmcgcGVyICcsXG4gICAgICAnc24nOicgYXJ0IGNvbSBlZHUgZ291diBvcmcgcGVyc28gdW5pdiAnLFxuICAgICAgJ3N5JzonIGNvbSBlZHUgZ292IG1pbCBuZXQgbmV3cyBvcmcgJyxcbiAgICAgICd0aCc6JyBhYyBjbyBnbyBpbiBtaSBuZXQgb3IgJyxcbiAgICAgICd0aic6JyBhYyBiaXogY28gY29tIGVkdSBnbyBnb3YgaW5mbyBpbnQgbWlsIG5hbWUgbmV0IG5pYyBvcmcgdGVzdCB3ZWIgJyxcbiAgICAgICd0bic6JyBhZ3JpbmV0IGNvbSBkZWZlbnNlIGVkdW5ldCBlbnMgZmluIGdvdiBpbmQgaW5mbyBpbnRsIG1pbmNvbSBuYXQgbmV0IG9yZyBwZXJzbyBybnJ0IHJucyBybnUgdG91cmlzbSAnLFxuICAgICAgJ3R6JzonIGFjIGNvIGdvIG5lIG9yICcsXG4gICAgICAndWEnOicgYml6IGNoZXJrYXNzeSBjaGVybmlnb3YgY2hlcm5vdnRzeSBjayBjbiBjbyBjb20gY3JpbWVhIGN2IGRuIGRuZXByb3BldHJvdnNrIGRvbmV0c2sgZHAgZWR1IGdvdiBpZiBpbiBpdmFuby1mcmFua2l2c2sga2gga2hhcmtvdiBraGVyc29uIGtobWVsbml0c2tpeSBraWV2IGtpcm92b2dyYWQga20ga3Iga3Mga3YgbGcgbHVnYW5zayBsdXRzayBsdml2IG1lIG1rIG5ldCBuaWtvbGFldiBvZCBvZGVzc2Egb3JnIHBsIHBvbHRhdmEgcHAgcm92bm8gcnYgc2ViYXN0b3BvbCBzdW15IHRlIHRlcm5vcGlsIHV6aGdvcm9kIHZpbm5pY2Egdm4gemFwb3Jpemh6aGUgemhpdG9taXIgenAgenQgJyxcbiAgICAgICd1Zyc6JyBhYyBjbyBnbyBuZSBvciBvcmcgc2MgJyxcbiAgICAgICd1ayc6JyBhYyBibCBicml0aXNoLWxpYnJhcnkgY28gY3ltIGdvdiBnb3Z0IGljbmV0IGpldCBsZWEgbHRkIG1lIG1pbCBtb2QgbmF0aW9uYWwtbGlicmFyeS1zY290bGFuZCBuZWwgbmV0IG5ocyBuaWMgbmxzIG9yZyBvcmduIHBhcmxpYW1lbnQgcGxjIHBvbGljZSBzY2ggc2NvdCBzb2MgJyxcbiAgICAgICd1cyc6JyBkbmkgZmVkIGlzYSBraWRzIG5zbiAnLFxuICAgICAgJ3V5JzonIGNvbSBlZHUgZ3ViIG1pbCBuZXQgb3JnICcsXG4gICAgICAndmUnOicgY28gY29tIGVkdSBnb2IgaW5mbyBtaWwgbmV0IG9yZyB3ZWIgJyxcbiAgICAgICd2aSc6JyBjbyBjb20gazEyIG5ldCBvcmcgJyxcbiAgICAgICd2bic6JyBhYyBiaXogY29tIGVkdSBnb3YgaGVhbHRoIGluZm8gaW50IG5hbWUgbmV0IG9yZyBwcm8gJyxcbiAgICAgICd5ZSc6JyBjbyBjb20gZ292IGx0ZCBtZSBuZXQgb3JnIHBsYyAnLFxuICAgICAgJ3l1JzonIGFjIGNvIGVkdSBnb3Ygb3JnICcsXG4gICAgICAnemEnOicgYWMgYWdyaWMgYWx0IGJvdXJzZSBjaXR5IGNvIGN5YmVybmV0IGRiIGVkdSBnb3YgZ3JvbmRhciBpYWNjZXNzIGltdCBpbmNhIGxhbmRlc2lnbiBsYXcgbWlsIG5ldCBuZ28gbmlzIG5vbSBvbGl2ZXR0aSBvcmcgcGl4IHNjaG9vbCB0bSB3ZWIgJyxcbiAgICAgICd6bSc6JyBhYyBjbyBjb20gZWR1IGdvdiBuZXQgb3JnIHNjaCAnLFxuICAgICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2VudHJhbE5pYyNTZWNvbmQtbGV2ZWxfZG9tYWluc1xuICAgICAgJ2NvbSc6ICdhciBiciBjbiBkZSBldSBnYiBnciBodSBqcG4ga3Igbm8gcWMgcnUgc2Egc2UgdWsgdXMgdXkgemEgJyxcbiAgICAgICduZXQnOiAnZ2IganAgc2UgdWsgJyxcbiAgICAgICdvcmcnOiAnYWUnLFxuICAgICAgJ2RlJzogJ2NvbSAnXG4gICAgfSxcbiAgICAvLyBnb3JoaWxsIDIwMTMtMTAtMjU6IFVzaW5nIGluZGV4T2YoKSBpbnN0ZWFkIFJlZ2V4cCgpLiBTaWduaWZpY2FudCBib29zdFxuICAgIC8vIGluIGJvdGggcGVyZm9ybWFuY2UgYW5kIG1lbW9yeSBmb290cHJpbnQuIE5vIGluaXRpYWxpemF0aW9uIHJlcXVpcmVkLlxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3VyaS1qcy1zbGQtcmVnZXgtdnMtYmluYXJ5LXNlYXJjaC80XG4gICAgLy8gRm9sbG93aW5nIG1ldGhvZHMgdXNlIGxhc3RJbmRleE9mKCkgcmF0aGVyIHRoYW4gYXJyYXkuc3BsaXQoKSBpbiBvcmRlclxuICAgIC8vIHRvIGF2b2lkIGFueSBtZW1vcnkgYWxsb2NhdGlvbnMuXG4gICAgaGFzOiBmdW5jdGlvbihkb21haW4pIHtcbiAgICAgIHZhciB0bGRPZmZzZXQgPSBkb21haW4ubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmICh0bGRPZmZzZXQgPD0gMCB8fCB0bGRPZmZzZXQgPj0gKGRvbWFpbi5sZW5ndGgtMSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHNsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicsIHRsZE9mZnNldC0xKTtcbiAgICAgIGlmIChzbGRPZmZzZXQgPD0gMCB8fCBzbGRPZmZzZXQgPj0gKHRsZE9mZnNldC0xKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc2xkTGlzdCA9IFNMRC5saXN0W2RvbWFpbi5zbGljZSh0bGRPZmZzZXQrMSldO1xuICAgICAgaWYgKCFzbGRMaXN0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGRMaXN0LmluZGV4T2YoJyAnICsgZG9tYWluLnNsaWNlKHNsZE9mZnNldCsxLCB0bGRPZmZzZXQpICsgJyAnKSA+PSAwO1xuICAgIH0sXG4gICAgaXM6IGZ1bmN0aW9uKGRvbWFpbikge1xuICAgICAgdmFyIHRsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicpO1xuICAgICAgaWYgKHRsZE9mZnNldCA8PSAwIHx8IHRsZE9mZnNldCA+PSAoZG9tYWluLmxlbmd0aC0xKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgc2xkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJywgdGxkT2Zmc2V0LTEpO1xuICAgICAgaWYgKHNsZE9mZnNldCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCsxKV07XG4gICAgICBpZiAoIXNsZExpc3QpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsZExpc3QuaW5kZXhPZignICcgKyBkb21haW4uc2xpY2UoMCwgdGxkT2Zmc2V0KSArICcgJykgPj0gMDtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24oZG9tYWluKSB7XG4gICAgICB2YXIgdGxkT2Zmc2V0ID0gZG9tYWluLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICBpZiAodGxkT2Zmc2V0IDw9IDAgfHwgdGxkT2Zmc2V0ID49IChkb21haW4ubGVuZ3RoLTEpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHNsZE9mZnNldCA9IGRvbWFpbi5sYXN0SW5kZXhPZignLicsIHRsZE9mZnNldC0xKTtcbiAgICAgIGlmIChzbGRPZmZzZXQgPD0gMCB8fCBzbGRPZmZzZXQgPj0gKHRsZE9mZnNldC0xKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBzbGRMaXN0ID0gU0xELmxpc3RbZG9tYWluLnNsaWNlKHRsZE9mZnNldCsxKV07XG4gICAgICBpZiAoIXNsZExpc3QpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoc2xkTGlzdC5pbmRleE9mKCcgJyArIGRvbWFpbi5zbGljZShzbGRPZmZzZXQrMSwgdGxkT2Zmc2V0KSArICcgJykgPCAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbWFpbi5zbGljZShzbGRPZmZzZXQrMSk7XG4gICAgfSxcbiAgICBub0NvbmZsaWN0OiBmdW5jdGlvbigpe1xuICAgICAgaWYgKHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zID0gX1NlY29uZExldmVsRG9tYWlucztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU0xEO1xufSkpO1xuIiwiLyohXG4gKiBVUkkuanMgLSBNdXRhdGluZyBVUkxzXG4gKlxuICogVmVyc2lvbjogMS4xOS4xXG4gKlxuICogQXV0aG9yOiBSb2RuZXkgUmVobVxuICogV2ViOiBodHRwOi8vbWVkaWFsaXplLmdpdGh1Yi5pby9VUkkuanMvXG4gKlxuICogTGljZW5zZWQgdW5kZXJcbiAqICAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICpcbiAqL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIC8vIE5vZGVcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnLi9wdW55Y29kZScpLCByZXF1aXJlKCcuL0lQdjYnKSwgcmVxdWlyZSgnLi9TZWNvbmRMZXZlbERvbWFpbnMnKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbJy4vcHVueWNvZGUnLCAnLi9JUHY2JywgJy4vU2Vjb25kTGV2ZWxEb21haW5zJ10sIGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5VUkkgPSBmYWN0b3J5KHJvb3QucHVueWNvZGUsIHJvb3QuSVB2Niwgcm9vdC5TZWNvbmRMZXZlbERvbWFpbnMsIHJvb3QpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uIChwdW55Y29kZSwgSVB2NiwgU0xELCByb290KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLypnbG9iYWwgbG9jYXRpb24sIGVzY2FwZSwgdW5lc2NhcGUgKi9cbiAgLy8gRklYTUU6IHYyLjAuMCByZW5hbWNlIG5vbi1jYW1lbENhc2UgcHJvcGVydGllcyB0byB1cHBlcmNhc2VcbiAgLypqc2hpbnQgY2FtZWxjYXNlOiBmYWxzZSAqL1xuXG4gIC8vIHNhdmUgY3VycmVudCBVUkkgdmFyaWFibGUsIGlmIGFueVxuICB2YXIgX1VSSSA9IHJvb3QgJiYgcm9vdC5VUkk7XG5cbiAgZnVuY3Rpb24gVVJJKHVybCwgYmFzZSkge1xuICAgIHZhciBfdXJsU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDE7XG4gICAgdmFyIF9iYXNlU3VwcGxpZWQgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG5cbiAgICAvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVVJJKSkge1xuICAgICAgaWYgKF91cmxTdXBwbGllZCkge1xuICAgICAgICBpZiAoX2Jhc2VTdXBwbGllZCkge1xuICAgICAgICAgIHJldHVybiBuZXcgVVJJKHVybCwgYmFzZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFVSSSh1cmwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFVSSSgpO1xuICAgIH1cblxuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKF91cmxTdXBwbGllZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmRlZmluZWQgaXMgbm90IGEgdmFsaWQgYXJndW1lbnQgZm9yIFVSSScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cmwgPSBsb2NhdGlvbi5ocmVmICsgJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXJsID09PSBudWxsKSB7XG4gICAgICBpZiAoX3VybFN1cHBsaWVkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ251bGwgaXMgbm90IGEgdmFsaWQgYXJndW1lbnQgZm9yIFVSSScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaHJlZih1cmwpO1xuXG4gICAgLy8gcmVzb2x2ZSB0byBiYXNlIGFjY29yZGluZyB0byBodHRwOi8vZHZjcy53My5vcmcvaGcvdXJsL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sI2NvbnN0cnVjdG9yXG4gICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzb2x1dGVUbyhiYXNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiAvXlswLTldKyQvLnRlc3QodmFsdWUpO1xuICB9XG5cbiAgVVJJLnZlcnNpb24gPSAnMS4xOS4xJztcblxuICB2YXIgcCA9IFVSSS5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4KHN0cmluZykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2NvbW1pdC84NWFjMjE3ODNjMTFmOGNjYWIwNjEwNmRiYTk3MzVhMzFhODY5MjRkI2NvbW1pdGNvbW1lbnQtODIxOTYzXG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUeXBlKHZhbHVlKSB7XG4gICAgLy8gSUU4IGRvZXNuJ3QgcmV0dXJuIFtPYmplY3QgVW5kZWZpbmVkXSBidXQgW09iamVjdCBPYmplY3RdIGZvciB1bmRlZmluZWQgdmFsdWVcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICdVbmRlZmluZWQnO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSkuc2xpY2UoOCwgLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgICByZXR1cm4gZ2V0VHlwZShvYmopID09PSAnQXJyYXknO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YSwgdmFsdWUpIHtcbiAgICB2YXIgbG9va3VwID0ge307XG4gICAgdmFyIGksIGxlbmd0aDtcblxuICAgIGlmIChnZXRUeXBlKHZhbHVlKSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICAgIGxvb2t1cCA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbG9va3VwW3ZhbHVlW2ldXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvb2t1cFt2YWx1ZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIC8qanNoaW50IGxheGJyZWFrOiB0cnVlICovXG4gICAgICB2YXIgX21hdGNoID0gbG9va3VwICYmIGxvb2t1cFtkYXRhW2ldXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgIHx8ICFsb29rdXAgJiYgdmFsdWUudGVzdChkYXRhW2ldKTtcbiAgICAgIC8qanNoaW50IGxheGJyZWFrOiBmYWxzZSAqL1xuICAgICAgaWYgKF9tYXRjaCkge1xuICAgICAgICBkYXRhLnNwbGljZShpLCAxKTtcbiAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5Q29udGFpbnMobGlzdCwgdmFsdWUpIHtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuXG4gICAgLy8gdmFsdWUgbWF5IGJlIHN0cmluZywgbnVtYmVyLCBhcnJheSwgcmVnZXhwXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAvLyBOb3RlOiB0aGlzIGNhbiBiZSBvcHRpbWl6ZWQgdG8gTyhuKSAoaW5zdGVhZCBvZiBjdXJyZW50IE8obSAqIG4pKVxuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFhcnJheUNvbnRhaW5zKGxpc3QsIHZhbHVlW2ldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGUgPSBnZXRUeXBlKHZhbHVlKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoX3R5cGUgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdFtpXSA9PT0gJ3N0cmluZycgJiYgbGlzdFtpXS5tYXRjaCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsaXN0W2ldID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBhcnJheXNFcXVhbChvbmUsIHR3bykge1xuICAgIGlmICghaXNBcnJheShvbmUpIHx8ICFpc0FycmF5KHR3bykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBhcnJheXMgY2FuJ3QgYmUgZXF1YWwgaWYgdGhleSBoYXZlIGRpZmZlcmVudCBhbW91bnQgb2YgY29udGVudFxuICAgIGlmIChvbmUubGVuZ3RoICE9PSB0d28ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgb25lLnNvcnQoKTtcbiAgICB0d28uc29ydCgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvbmUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAob25lW2ldICE9PSB0d29baV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJpbVNsYXNoZXModGV4dCkge1xuICAgIHZhciB0cmltX2V4cHJlc3Npb24gPSAvXlxcLyt8XFwvKyQvZztcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHRyaW1fZXhwcmVzc2lvbiwgJycpO1xuICB9XG5cbiAgVVJJLl9wYXJ0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm90b2NvbDogbnVsbCxcbiAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICBob3N0bmFtZTogbnVsbCxcbiAgICAgIHVybjogbnVsbCxcbiAgICAgIHBvcnQ6IG51bGwsXG4gICAgICBwYXRoOiBudWxsLFxuICAgICAgcXVlcnk6IG51bGwsXG4gICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgIC8vIHN0YXRlXG4gICAgICBwcmV2ZW50SW52YWxpZEhvc3RuYW1lOiBVUkkucHJldmVudEludmFsaWRIb3N0bmFtZSxcbiAgICAgIGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVyczogVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgIGVzY2FwZVF1ZXJ5U3BhY2U6IFVSSS5lc2NhcGVRdWVyeVNwYWNlXG4gICAgfTtcbiAgfTtcbiAgLy8gc3RhdGU6IHRocm93IG9uIGludmFsaWQgaG9zdG5hbWVcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL3B1bGwvMzQ1XG4gIC8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvMzU0XG4gIFVSSS5wcmV2ZW50SW52YWxpZEhvc3RuYW1lID0gZmFsc2U7XG4gIC8vIHN0YXRlOiBhbGxvdyBkdXBsaWNhdGUgcXVlcnkgcGFyYW1ldGVycyAoYT0xJmE9MSlcbiAgVVJJLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyA9IGZhbHNlO1xuICAvLyBzdGF0ZTogcmVwbGFjZXMgKyB3aXRoICUyMCAoc3BhY2UgaW4gcXVlcnkgc3RyaW5ncylcbiAgVVJJLmVzY2FwZVF1ZXJ5U3BhY2UgPSB0cnVlO1xuICAvLyBzdGF0aWMgcHJvcGVydGllc1xuICBVUkkucHJvdG9jb2xfZXhwcmVzc2lvbiA9IC9eW2Etel1bYS16MC05ListXSokL2k7XG4gIFVSSS5pZG5fZXhwcmVzc2lvbiA9IC9bXmEtejAtOVxcLl8tXS9pO1xuICBVUkkucHVueWNvZGVfZXhwcmVzc2lvbiA9IC8oeG4tLSkvaTtcbiAgLy8gd2VsbCwgMzMzLjQ0NC41NTUuNjY2IG1hdGNoZXMsIGJ1dCBpdCBzdXJlIGFpbid0IG5vIElQdjQgLSBkbyB3ZSBjYXJlP1xuICBVUkkuaXA0X2V4cHJlc3Npb24gPSAvXlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9JC87XG4gIC8vIGNyZWRpdHMgdG8gUmljaCBCcm93blxuICAvLyBzb3VyY2U6IGh0dHA6Ly9mb3J1bXMuaW50ZXJtYXBwZXIuY29tL3ZpZXd0b3BpYy5waHA/cD0xMDk2IzEwOTZcbiAgLy8gc3BlY2lmaWNhdGlvbjogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDI5MS50eHRcbiAgVVJJLmlwNl9leHByZXNzaW9uID0gL15cXHMqKCgoWzAtOUEtRmEtZl17MSw0fTopezd9KFswLTlBLUZhLWZdezEsNH18OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KDpbMC05QS1GYS1mXXsxLDR9fCgoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwyfSl8OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NH0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwzfSl8KCg6WzAtOUEtRmEtZl17MSw0fSk/OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezN9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNH0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsMn06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Mn0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw1fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwzfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsxfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDZ9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDR9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg6KCgoOlswLTlBLUZhLWZdezEsNH0pezEsN30pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNX06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSkpKCUuKyk/XFxzKiQvO1xuICAvLyBleHByZXNzaW9uIHVzZWQgaXMgXCJncnViZXIgcmV2aXNlZFwiIChAZ3J1YmVyIHYyKSBkZXRlcm1pbmVkIHRvIGJlIHRoZVxuICAvLyBiZXN0IHNvbHV0aW9uIGluIGEgcmVnZXgtZ29sZiB3ZSBkaWQgYSBjb3VwbGUgb2YgYWdlcyBhZ28gYXRcbiAgLy8gKiBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxuICAvLyAqIGh0dHA6Ly9yb2RuZXlyZWhtLmRlL3QvdXJsLXJlZ2V4Lmh0bWxcbiAgVVJJLmZpbmRfdXJpX2V4cHJlc3Npb24gPSAvXFxiKCg/OlthLXpdW1xcdy1dKzooPzpcXC97MSwzfXxbYS16MC05JV0pfHd3d1xcZHswLDN9Wy5dfFthLXowLTkuXFwtXStbLl1bYS16XXsyLDR9XFwvKSg/OlteXFxzKCk8Pl0rfFxcKChbXlxccygpPD5dK3woXFwoW15cXHMoKTw+XStcXCkpKSpcXCkpKyg/OlxcKChbXlxccygpPD5dK3woXFwoW15cXHMoKTw+XStcXCkpKSpcXCl8W15cXHNgISgpXFxbXFxde307OidcIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKS9pZztcbiAgVVJJLmZpbmRVcmkgPSB7XG4gICAgLy8gdmFsaWQgXCJzY2hlbWU6Ly9cIiBvciBcInd3dy5cIlxuICAgIHN0YXJ0OiAvXFxiKD86KFthLXpdW2EtejAtOS4rLV0qOlxcL1xcLyl8d3d3XFwuKS9naSxcbiAgICAvLyBldmVyeXRoaW5nIHVwIHRvIHRoZSBuZXh0IHdoaXRlc3BhY2VcbiAgICBlbmQ6IC9bXFxzXFxyXFxuXXwkLyxcbiAgICAvLyB0cmltIHRyYWlsaW5nIHB1bmN0dWF0aW9uIGNhcHR1cmVkIGJ5IGVuZCBSZWdFeHBcbiAgICB0cmltOiAvW2AhKClcXFtcXF17fTs6J1wiLiw8Pj/Cq8K74oCc4oCd4oCe4oCY4oCZXSskLyxcbiAgICAvLyBiYWxhbmNlZCBwYXJlbnMgaW5jbHVzaW9uICgpLCBbXSwge30sIDw+XG4gICAgcGFyZW5zOiAvKFxcKFteXFwpXSpcXCl8XFxbW15cXF1dKlxcXXxcXHtbXn1dKlxcfXw8W14+XSo+KS9nLFxuICB9O1xuICAvLyBodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL3VyaS1zY2hlbWVzLmh0bWxcbiAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX1RDUF9hbmRfVURQX3BvcnRfbnVtYmVycyNXZWxsLWtub3duX3BvcnRzXG4gIFVSSS5kZWZhdWx0UG9ydHMgPSB7XG4gICAgaHR0cDogJzgwJyxcbiAgICBodHRwczogJzQ0MycsXG4gICAgZnRwOiAnMjEnLFxuICAgIGdvcGhlcjogJzcwJyxcbiAgICB3czogJzgwJyxcbiAgICB3c3M6ICc0NDMnXG4gIH07XG4gIC8vIGxpc3Qgb2YgcHJvdG9jb2xzIHdoaWNoIGFsd2F5cyByZXF1aXJlIGEgaG9zdG5hbWVcbiAgVVJJLmhvc3RQcm90b2NvbHMgPSBbXG4gICAgJ2h0dHAnLFxuICAgICdodHRwcydcbiAgXTtcblxuICAvLyBhbGxvd2VkIGhvc3RuYW1lIGNoYXJhY3RlcnMgYWNjb3JkaW5nIHRvIFJGQyAzOTg2XG4gIC8vIEFMUEhBIERJR0lUIFwiLVwiIFwiLlwiIFwiX1wiIFwiflwiIFwiIVwiIFwiJFwiIFwiJlwiIFwiJ1wiIFwiKFwiIFwiKVwiIFwiKlwiIFwiK1wiIFwiLFwiIFwiO1wiIFwiPVwiICVlbmNvZGVkXG4gIC8vIEkndmUgbmV2ZXIgc2VlbiBhIChub24tSUROKSBob3N0bmFtZSBvdGhlciB0aGFuOiBBTFBIQSBESUdJVCAuIC0gX1xuICBVUkkuaW52YWxpZF9ob3N0bmFtZV9jaGFyYWN0ZXJzID0gL1teYS16QS1aMC05XFwuXFwtOl9dLztcbiAgLy8gbWFwIERPTSBFbGVtZW50cyB0byB0aGVpciBVUkkgYXR0cmlidXRlXG4gIFVSSS5kb21BdHRyaWJ1dGVzID0ge1xuICAgICdhJzogJ2hyZWYnLFxuICAgICdibG9ja3F1b3RlJzogJ2NpdGUnLFxuICAgICdsaW5rJzogJ2hyZWYnLFxuICAgICdiYXNlJzogJ2hyZWYnLFxuICAgICdzY3JpcHQnOiAnc3JjJyxcbiAgICAnZm9ybSc6ICdhY3Rpb24nLFxuICAgICdpbWcnOiAnc3JjJyxcbiAgICAnYXJlYSc6ICdocmVmJyxcbiAgICAnaWZyYW1lJzogJ3NyYycsXG4gICAgJ2VtYmVkJzogJ3NyYycsXG4gICAgJ3NvdXJjZSc6ICdzcmMnLFxuICAgICd0cmFjayc6ICdzcmMnLFxuICAgICdpbnB1dCc6ICdzcmMnLCAvLyBidXQgb25seSBpZiB0eXBlPVwiaW1hZ2VcIlxuICAgICdhdWRpbyc6ICdzcmMnLFxuICAgICd2aWRlbyc6ICdzcmMnXG4gIH07XG4gIFVSSS5nZXREb21BdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlIHx8ICFub2RlLm5vZGVOYW1lKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyA8aW5wdXQ+IHNob3VsZCBvbmx5IGV4cG9zZSBzcmMgZm9yIHR5cGU9XCJpbWFnZVwiXG4gICAgaWYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIG5vZGUudHlwZSAhPT0gJ2ltYWdlJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gVVJJLmRvbUF0dHJpYnV0ZXNbbm9kZU5hbWVdO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGVzY2FwZUZvckR1bWJGaXJlZm94MzYodmFsdWUpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvOTFcbiAgICByZXR1cm4gZXNjYXBlKHZhbHVlKTtcbiAgfVxuXG4gIC8vIGVuY29kaW5nIC8gZGVjb2RpbmcgYWNjb3JkaW5nIHRvIFJGQzM5ODZcbiAgZnVuY3Rpb24gc3RyaWN0RW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZykge1xuICAgIC8vIHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2VuY29kZVVSSUNvbXBvbmVudFxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKVxuICAgICAgLnJlcGxhY2UoL1shJygpKl0vZywgZXNjYXBlRm9yRHVtYkZpcmVmb3gzNilcbiAgICAgIC5yZXBsYWNlKC9cXCovZywgJyUyQScpO1xuICB9XG4gIFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7XG4gIFVSSS5kZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG4gIFVSSS5pc284ODU5ID0gZnVuY3Rpb24oKSB7XG4gICAgVVJJLmVuY29kZSA9IGVzY2FwZTtcbiAgICBVUkkuZGVjb2RlID0gdW5lc2NhcGU7XG4gIH07XG4gIFVSSS51bmljb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgVVJJLmVuY29kZSA9IHN0cmljdEVuY29kZVVSSUNvbXBvbmVudDtcbiAgICBVUkkuZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuICB9O1xuICBVUkkuY2hhcmFjdGVycyA9IHtcbiAgICBwYXRobmFtZToge1xuICAgICAgZW5jb2RlOiB7XG4gICAgICAgIC8vIFJGQzM5ODYgMi4xOiBGb3IgY29uc2lzdGVuY3ksIFVSSSBwcm9kdWNlcnMgYW5kIG5vcm1hbGl6ZXJzIHNob3VsZFxuICAgICAgICAvLyB1c2UgdXBwZXJjYXNlIGhleGFkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIHBlcmNlbnQtZW5jb2RpbmdzLlxuICAgICAgICBleHByZXNzaW9uOiAvJSgyNHwyNnwyQnwyQ3wzQnwzRHwzQXw0MCkvaWcsXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgIC8vIC0uX34hJygpKlxuICAgICAgICAgICclMjQnOiAnJCcsXG4gICAgICAgICAgJyUyNic6ICcmJyxcbiAgICAgICAgICAnJTJCJzogJysnLFxuICAgICAgICAgICclMkMnOiAnLCcsXG4gICAgICAgICAgJyUzQic6ICc7JyxcbiAgICAgICAgICAnJTNEJzogJz0nLFxuICAgICAgICAgICclM0EnOiAnOicsXG4gICAgICAgICAgJyU0MCc6ICdAJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVjb2RlOiB7XG4gICAgICAgIGV4cHJlc3Npb246IC9bXFwvXFw/I10vZyxcbiAgICAgICAgbWFwOiB7XG4gICAgICAgICAgJy8nOiAnJTJGJyxcbiAgICAgICAgICAnPyc6ICclM0YnLFxuICAgICAgICAgICcjJzogJyUyMydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVzZXJ2ZWQ6IHtcbiAgICAgIGVuY29kZToge1xuICAgICAgICAvLyBSRkMzOTg2IDIuMTogRm9yIGNvbnNpc3RlbmN5LCBVUkkgcHJvZHVjZXJzIGFuZCBub3JtYWxpemVycyBzaG91bGRcbiAgICAgICAgLy8gdXNlIHVwcGVyY2FzZSBoZXhhZGVjaW1hbCBkaWdpdHMgZm9yIGFsbCBwZXJjZW50LWVuY29kaW5ncy5cbiAgICAgICAgZXhwcmVzc2lvbjogLyUoMjF8MjN8MjR8MjZ8Mjd8Mjh8Mjl8MkF8MkJ8MkN8MkZ8M0F8M0J8M0R8M0Z8NDB8NUJ8NUQpL2lnLFxuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAvLyBnZW4tZGVsaW1zXG4gICAgICAgICAgJyUzQSc6ICc6JyxcbiAgICAgICAgICAnJTJGJzogJy8nLFxuICAgICAgICAgICclM0YnOiAnPycsXG4gICAgICAgICAgJyUyMyc6ICcjJyxcbiAgICAgICAgICAnJTVCJzogJ1snLFxuICAgICAgICAgICclNUQnOiAnXScsXG4gICAgICAgICAgJyU0MCc6ICdAJyxcbiAgICAgICAgICAvLyBzdWItZGVsaW1zXG4gICAgICAgICAgJyUyMSc6ICchJyxcbiAgICAgICAgICAnJTI0JzogJyQnLFxuICAgICAgICAgICclMjYnOiAnJicsXG4gICAgICAgICAgJyUyNyc6ICdcXCcnLFxuICAgICAgICAgICclMjgnOiAnKCcsXG4gICAgICAgICAgJyUyOSc6ICcpJyxcbiAgICAgICAgICAnJTJBJzogJyonLFxuICAgICAgICAgICclMkInOiAnKycsXG4gICAgICAgICAgJyUyQyc6ICcsJyxcbiAgICAgICAgICAnJTNCJzogJzsnLFxuICAgICAgICAgICclM0QnOiAnPSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdXJucGF0aDoge1xuICAgICAgLy8gVGhlIGNoYXJhY3RlcnMgdW5kZXIgYGVuY29kZWAgYXJlIHRoZSBjaGFyYWN0ZXJzIGNhbGxlZCBvdXQgYnkgUkZDIDIxNDEgYXMgYmVpbmcgYWNjZXB0YWJsZVxuICAgICAgLy8gZm9yIHVzYWdlIGluIGEgVVJOLiBSRkMyMTQxIGFsc28gY2FsbHMgb3V0IFwiLVwiLCBcIi5cIiwgYW5kIFwiX1wiIGFzIGFjY2VwdGFibGUgY2hhcmFjdGVycywgYnV0XG4gICAgICAvLyB0aGVzZSBhcmVuJ3QgZW5jb2RlZCBieSBlbmNvZGVVUklDb21wb25lbnQsIHNvIHdlIGRvbid0IGhhdmUgdG8gY2FsbCB0aGVtIG91dCBoZXJlLiBBbHNvXG4gICAgICAvLyBub3RlIHRoYXQgdGhlIGNvbG9uIGNoYXJhY3RlciBpcyBub3QgZmVhdHVyZWQgaW4gdGhlIGVuY29kaW5nIG1hcDsgdGhpcyBpcyBiZWNhdXNlIFVSSS5qc1xuICAgICAgLy8gZ2l2ZXMgdGhlIGNvbG9ucyBpbiBVUk5zIHNlbWFudGljIG1lYW5pbmcgYXMgdGhlIGRlbGltaXRlcnMgb2YgcGF0aCBzZWdlbWVudHMsIGFuZCBzbyBpdFxuICAgICAgLy8gc2hvdWxkIG5vdCBhcHBlYXIgdW5lbmNvZGVkIGluIGEgc2VnbWVudCBpdHNlbGYuXG4gICAgICAvLyBTZWUgYWxzbyB0aGUgbm90ZSBhYm92ZSBhYm91dCBSRkMzOTg2IGFuZCBjYXBpdGFsYWxpemVkIGhleCBkaWdpdHMuXG4gICAgICBlbmNvZGU6IHtcbiAgICAgICAgZXhwcmVzc2lvbjogLyUoMjF8MjR8Mjd8Mjh8Mjl8MkF8MkJ8MkN8M0J8M0R8NDApL2lnLFxuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAnJTIxJzogJyEnLFxuICAgICAgICAgICclMjQnOiAnJCcsXG4gICAgICAgICAgJyUyNyc6ICdcXCcnLFxuICAgICAgICAgICclMjgnOiAnKCcsXG4gICAgICAgICAgJyUyOSc6ICcpJyxcbiAgICAgICAgICAnJTJBJzogJyonLFxuICAgICAgICAgICclMkInOiAnKycsXG4gICAgICAgICAgJyUyQyc6ICcsJyxcbiAgICAgICAgICAnJTNCJzogJzsnLFxuICAgICAgICAgICclM0QnOiAnPScsXG4gICAgICAgICAgJyU0MCc6ICdAJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gVGhlc2UgY2hhcmFjdGVycyBhcmUgdGhlIGNoYXJhY3RlcnMgY2FsbGVkIG91dCBieSBSRkMyMTQxIGFzIFwicmVzZXJ2ZWRcIiBjaGFyYWN0ZXJzIHRoYXRcbiAgICAgIC8vIHNob3VsZCBuZXZlciBhcHBlYXIgaW4gYSBVUk4sIHBsdXMgdGhlIGNvbG9uIGNoYXJhY3RlciAoc2VlIG5vdGUgYWJvdmUpLlxuICAgICAgZGVjb2RlOiB7XG4gICAgICAgIGV4cHJlc3Npb246IC9bXFwvXFw/IzpdL2csXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgICcvJzogJyUyRicsXG4gICAgICAgICAgJz8nOiAnJTNGJyxcbiAgICAgICAgICAnIyc6ICclMjMnLFxuICAgICAgICAgICc6JzogJyUzQSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgVVJJLmVuY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG4gICAgdmFyIGVzY2FwZWQgPSBVUkkuZW5jb2RlKHN0cmluZyArICcnKTtcbiAgICBpZiAoZXNjYXBlUXVlcnlTcGFjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlc2NhcGVRdWVyeVNwYWNlID0gVVJJLmVzY2FwZVF1ZXJ5U3BhY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVzY2FwZVF1ZXJ5U3BhY2UgPyBlc2NhcGVkLnJlcGxhY2UoLyUyMC9nLCAnKycpIDogZXNjYXBlZDtcbiAgfTtcbiAgVVJJLmRlY29kZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG4gICAgc3RyaW5nICs9ICcnO1xuICAgIGlmIChlc2NhcGVRdWVyeVNwYWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVzY2FwZVF1ZXJ5U3BhY2UgPSBVUkkuZXNjYXBlUXVlcnlTcGFjZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFVSSS5kZWNvZGUoZXNjYXBlUXVlcnlTcGFjZSA/IHN0cmluZy5yZXBsYWNlKC9cXCsvZywgJyUyMCcpIDogc3RyaW5nKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIC8vIHdlJ3JlIG5vdCBnb2luZyB0byBtZXNzIHdpdGggd2VpcmQgZW5jb2RpbmdzLFxuICAgICAgLy8gZ2l2ZSB1cCBhbmQgcmV0dXJuIHRoZSB1bmRlY29kZWQgb3JpZ2luYWwgc3RyaW5nXG4gICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzg3XG4gICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21lZGlhbGl6ZS9VUkkuanMvaXNzdWVzLzkyXG4gICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cbiAgfTtcbiAgLy8gZ2VuZXJhdGUgZW5jb2RlL2RlY29kZSBwYXRoIGZ1bmN0aW9uc1xuICB2YXIgX3BhcnRzID0geydlbmNvZGUnOidlbmNvZGUnLCAnZGVjb2RlJzonZGVjb2RlJ307XG4gIHZhciBfcGFydDtcbiAgdmFyIGdlbmVyYXRlQWNjZXNzb3IgPSBmdW5jdGlvbihfZ3JvdXAsIF9wYXJ0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFVSSVtfcGFydF0oc3RyaW5nICsgJycpLnJlcGxhY2UoVVJJLmNoYXJhY3RlcnNbX2dyb3VwXVtfcGFydF0uZXhwcmVzc2lvbiwgZnVuY3Rpb24oYykge1xuICAgICAgICAgIHJldHVybiBVUkkuY2hhcmFjdGVyc1tfZ3JvdXBdW19wYXJ0XS5tYXBbY107XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyB3ZSdyZSBub3QgZ29pbmcgdG8gbWVzcyB3aXRoIHdlaXJkIGVuY29kaW5ncyxcbiAgICAgICAgLy8gZ2l2ZSB1cCBhbmQgcmV0dXJuIHRoZSB1bmRlY29kZWQgb3JpZ2luYWwgc3RyaW5nXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWVkaWFsaXplL1VSSS5qcy9pc3N1ZXMvODdcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL2lzc3Vlcy85MlxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgZm9yIChfcGFydCBpbiBfcGFydHMpIHtcbiAgICBVUklbX3BhcnQgKyAnUGF0aFNlZ21lbnQnXSA9IGdlbmVyYXRlQWNjZXNzb3IoJ3BhdGhuYW1lJywgX3BhcnRzW19wYXJ0XSk7XG4gICAgVVJJW19wYXJ0ICsgJ1VyblBhdGhTZWdtZW50J10gPSBnZW5lcmF0ZUFjY2Vzc29yKCd1cm5wYXRoJywgX3BhcnRzW19wYXJ0XSk7XG4gIH1cblxuICB2YXIgZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24gPSBmdW5jdGlvbihfc2VwLCBfY29kaW5nRnVuY05hbWUsIF9pbm5lckNvZGluZ0Z1bmNOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgLy8gV2h5IHBhc3MgaW4gbmFtZXMgb2YgZnVuY3Rpb25zLCByYXRoZXIgdGhhbiB0aGUgZnVuY3Rpb24gb2JqZWN0cyB0aGVtc2VsdmVzPyBUaGVcbiAgICAgIC8vIGRlZmluaXRpb25zIG9mIHNvbWUgZnVuY3Rpb25zIChidXQgaW4gcGFydGljdWxhciwgVVJJLmRlY29kZSkgd2lsbCBvY2Nhc2lvbmFsbHkgY2hhbmdlIGR1ZVxuICAgICAgLy8gdG8gVVJJLmpzIGhhdmluZyBJU084ODU5IGFuZCBVbmljb2RlIG1vZGVzLiBQYXNzaW5nIGluIHRoZSBuYW1lIGFuZCBnZXR0aW5nIGl0IHdpbGwgZW5zdXJlXG4gICAgICAvLyB0aGF0IHRoZSBmdW5jdGlvbnMgd2UgdXNlIGhlcmUgYXJlIFwiZnJlc2hcIi5cbiAgICAgIHZhciBhY3R1YWxDb2RpbmdGdW5jO1xuICAgICAgaWYgKCFfaW5uZXJDb2RpbmdGdW5jTmFtZSkge1xuICAgICAgICBhY3R1YWxDb2RpbmdGdW5jID0gVVJJW19jb2RpbmdGdW5jTmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3R1YWxDb2RpbmdGdW5jID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIFVSSVtfY29kaW5nRnVuY05hbWVdKFVSSVtfaW5uZXJDb2RpbmdGdW5jTmFtZV0oc3RyaW5nKSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWdtZW50cyA9IChzdHJpbmcgKyAnJykuc3BsaXQoX3NlcCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzZWdtZW50c1tpXSA9IGFjdHVhbENvZGluZ0Z1bmMoc2VnbWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VnbWVudHMuam9pbihfc2VwKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgdGFrZXMgcGxhY2Ugb3V0c2lkZSB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGRvbid0IHdhbnQsIGUuZy4sIGVuY29kZVVyblBhdGggZnVuY3Rpb25zLlxuICBVUkkuZGVjb2RlUGF0aCA9IGdlbmVyYXRlU2VnbWVudGVkUGF0aEZ1bmN0aW9uKCcvJywgJ2RlY29kZVBhdGhTZWdtZW50Jyk7XG4gIFVSSS5kZWNvZGVVcm5QYXRoID0gZ2VuZXJhdGVTZWdtZW50ZWRQYXRoRnVuY3Rpb24oJzonLCAnZGVjb2RlVXJuUGF0aFNlZ21lbnQnKTtcbiAgVVJJLnJlY29kZVBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignLycsICdlbmNvZGVQYXRoU2VnbWVudCcsICdkZWNvZGUnKTtcbiAgVVJJLnJlY29kZVVyblBhdGggPSBnZW5lcmF0ZVNlZ21lbnRlZFBhdGhGdW5jdGlvbignOicsICdlbmNvZGVVcm5QYXRoU2VnbWVudCcsICdkZWNvZGUnKTtcblxuICBVUkkuZW5jb2RlUmVzZXJ2ZWQgPSBnZW5lcmF0ZUFjY2Vzc29yKCdyZXNlcnZlZCcsICdlbmNvZGUnKTtcblxuICBVUkkucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XG4gICAgdmFyIHBvcztcbiAgICBpZiAoIXBhcnRzKSB7XG4gICAgICBwYXJ0cyA9IHtcbiAgICAgICAgcHJldmVudEludmFsaWRIb3N0bmFtZTogVVJJLnByZXZlbnRJbnZhbGlkSG9zdG5hbWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFtwcm90b2NvbFwiOi8vXCJbdXNlcm5hbWVbXCI6XCJwYXNzd29yZF1cIkBcIl1ob3N0bmFtZVtcIjpcInBvcnRdXCIvXCI/XVtwYXRoXVtcIj9cInF1ZXJ5c3RyaW5nXVtcIiNcImZyYWdtZW50XVxuXG4gICAgLy8gZXh0cmFjdCBmcmFnbWVudFxuICAgIHBvcyA9IHN0cmluZy5pbmRleE9mKCcjJyk7XG4gICAgaWYgKHBvcyA+IC0xKSB7XG4gICAgICAvLyBlc2NhcGluZz9cbiAgICAgIHBhcnRzLmZyYWdtZW50ID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKSB8fCBudWxsO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygwLCBwb3MpO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgcXVlcnlcbiAgICBwb3MgPSBzdHJpbmcuaW5kZXhPZignPycpO1xuICAgIGlmIChwb3MgPiAtMSkge1xuICAgICAgLy8gZXNjYXBpbmc/XG4gICAgICBwYXJ0cy5xdWVyeSA9IHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSkgfHwgbnVsbDtcbiAgICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTtcbiAgICB9XG5cbiAgICAvLyBleHRyYWN0IHByb3RvY29sXG4gICAgaWYgKHN0cmluZy5zdWJzdHJpbmcoMCwgMikgPT09ICcvLycpIHtcbiAgICAgIC8vIHJlbGF0aXZlLXNjaGVtZVxuICAgICAgcGFydHMucHJvdG9jb2wgPSBudWxsO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZygyKTtcbiAgICAgIC8vIGV4dHJhY3QgXCJ1c2VyOnBhc3NAaG9zdDpwb3J0XCJcbiAgICAgIHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zID0gc3RyaW5nLmluZGV4T2YoJzonKTtcbiAgICAgIGlmIChwb3MgPiAtMSkge1xuICAgICAgICBwYXJ0cy5wcm90b2NvbCA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsO1xuICAgICAgICBpZiAocGFydHMucHJvdG9jb2wgJiYgIXBhcnRzLnByb3RvY29sLm1hdGNoKFVSSS5wcm90b2NvbF9leHByZXNzaW9uKSkge1xuICAgICAgICAgIC8vIDogbWF5IGJlIHdpdGhpbiB0aGUgcGF0aFxuICAgICAgICAgIHBhcnRzLnByb3RvY29sID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmluZy5zdWJzdHJpbmcocG9zICsgMSwgcG9zICsgMykgPT09ICcvLycpIHtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDMpO1xuXG4gICAgICAgICAgLy8gZXh0cmFjdCBcInVzZXI6cGFzc0Bob3N0OnBvcnRcIlxuICAgICAgICAgIHN0cmluZyA9IFVSSS5wYXJzZUF1dGhvcml0eShzdHJpbmcsIHBhcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKHBvcyArIDEpO1xuICAgICAgICAgIHBhcnRzLnVybiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB3aGF0J3MgbGVmdCBtdXN0IGJlIHRoZSBwYXRoXG4gICAgcGFydHMucGF0aCA9IHN0cmluZztcblxuICAgIC8vIGFuZCB3ZSdyZSBkb25lXG4gICAgcmV0dXJuIHBhcnRzO1xuICB9O1xuICBVUkkucGFyc2VIb3N0ID0gZnVuY3Rpb24oc3RyaW5nLCBwYXJ0cykge1xuICAgIGlmICghc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSAnJztcbiAgICB9XG5cbiAgICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgICAvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9ibG9iLzM4NmZkMjRmNDliMGU5ZDFhOGEwNzY1OTJhNDA0MTY4ZmFlZWNjMzQvbGliL3VybC5qcyNMMTE1LUwxMjRcbiAgICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZWRpYWxpemUvVVJJLmpzL3B1bGwvMjMzXG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcblxuICAgIC8vIGV4dHJhY3QgaG9zdDpwb3J0XG4gICAgdmFyIHBvcyA9IHN0cmluZy5pbmRleE9mKCcvJyk7XG4gICAgdmFyIGJyYWNrZXRQb3M7XG4gICAgdmFyIHQ7XG5cbiAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgcG9zID0gc3RyaW5nLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAoc3RyaW5nLmNoYXJBdCgwKSA9PT0gJ1snKSB7XG4gICAgICAvLyBJUHY2IGhvc3QgLSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLTZtYW4tdGV4dC1hZGRyLXJlcHJlc2VudGF0aW9uLTA0I3NlY3Rpb24tNlxuICAgICAgLy8gSSBjbGFpbSBtb3N0IGNsaWVudCBzb2Z0d2FyZSBicmVha3Mgb24gSVB2NiBhbnl3YXlzLiBUbyBzaW1wbGlmeSB0aGluZ3MsIFVSSSBvbmx5IGFjY2VwdHNcbiAgICAgIC8vIElQdjYrcG9ydCBpbiB0aGUgZm9ybWF0IFsyMDAxOmRiODo6MV06ODAgKGZvciB0aGUgdGltZSBiZWluZylcbiAgICAgIGJyYWNrZXRQb3MgPSBzdHJpbmcuaW5kZXhPZignXScpO1xuICAgICAgcGFydHMuaG9zdG5hbWUgPSBzdHJpbmcuc3Vic3RyaW5nKDEsIGJyYWNrZXRQb3MpIHx8IG51bGw7XG4gICAgICBwYXJ0cy5wb3J0ID0gc3RyaW5nLnN1YnN0cmluZyhicmFja2V0UG9zICsgMiwgcG9zKSB8fCBudWxsO1xuICAgICAgaWYgKHBhcnRzLnBvcnQgPT09ICcvJykge1xuICAgICAgICBwYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGZpcnN0Q29sb24gPSBzdHJpbmcuaW5kZXhPZignOicpO1xuICAgICAgdmFyIGZpcnN0U2xhc2ggPSBzdHJpbmcuaW5kZXhPZignLycpO1xuICAgICAgdmFyIG5leHRDb2xvbiA9IHN0cmluZy5pbmRleE9mKCc6JywgZmlyc3RDb2xvbiArIDEpO1xuICAgICAgaWYgKG5leHRDb2xvbiAhPT0gLTEgJiYgKGZpcnN0U2xhc2ggPT09IC0xIHx8IG5leHRDb2xvbiA8IGZpcnN0U2xhc2gpKSB7XG4gICAgICAgIC8vIElQdjYgaG9zdCBjb250YWlucyBtdWx0aXBsZSBjb2xvbnMgLSBidXQgbm8gcG9ydFxuICAgICAgICAvLyB0aGlzIG5vdGF0aW9uIGlzIGFjdHVhbGx5IG5vdCBhbGxvd2VkIGJ5IFJGQyAzOTg2LCBidXQgd2UncmUgYSBsaWJlcmFsIHBhcnNlclxuICAgICAgICBwYXJ0cy5ob3N0bmFtZSA9IHN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKSB8fCBudWxsO1xuICAgICAgICBwYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTtcbiAgICAgICAgcGFydHMuaG9zdG5hbWUgPSB0WzBdIHx8IG51bGw7XG4gICAgICAgIHBhcnRzLnBvcnQgPSB0WzFdIHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcnRzLmhvc3RuYW1lICYmIHN0cmluZy5zdWJzdHJpbmcocG9zKS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgcG9zKys7XG4gICAgICBzdHJpbmcgPSAnLycgKyBzdHJpbmc7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRzLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUpIHtcbiAgICAgIFVSSS5lbnN1cmVWYWxpZEhvc3RuYW1lKHBhcnRzLmhvc3RuYW1lLCBwYXJ0cy5wcm90b2NvbCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRzLnBvcnQpIHtcbiAgICAgIFVSSS5lbnN1cmVWYWxpZFBvcnQocGFydHMucG9ydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcocG9zKSB8fCAnLyc7XG4gIH07XG4gIFVSSS5wYXJzZUF1dGhvcml0eSA9IGZ1bmN0aW9uKHN0cmluZywgcGFydHMpIHtcbiAgICBzdHJpbmcgPSBVUkkucGFyc2VVc2VyaW5mbyhzdHJpbmcsIHBhcnRzKTtcbiAgICByZXR1cm4gVVJJLnBhcnNlSG9zdChzdHJpbmcsIHBhcnRzKTtcbiAgfTtcbiAgVVJJLnBhcnNlVXNlcmluZm8gPSBmdW5jdGlvbihzdHJpbmcsIHBhcnRzKSB7XG4gICAgLy8gZXh0cmFjdCB1c2VybmFtZTpwYXNzd29yZFxuICAgIHZhciBmaXJzdFNsYXNoID0gc3RyaW5nLmluZGV4T2YoJy8nKTtcbiAgICB2YXIgcG9zID0gc3RyaW5nLmxhc3RJbmRleE9mKCdAJywgZmlyc3RTbGFzaCA+IC0xID8gZmlyc3RTbGFzaCA6IHN0cmluZy5sZW5ndGggLSAxKTtcbiAgICB2YXIgdDtcblxuICAgIC8vIGF1dGhvcml0eUAgbXVzdCBjb21lIGJlZm9yZSAvcGF0aFxuICAgIGlmIChwb3MgPiAtMSAmJiAoZmlyc3RTbGFzaCA9PT0gLTEgfHwgcG9zIDwgZmlyc3RTbGFzaCkpIHtcbiAgICAgIHQgPSBzdHJpbmcuc3Vic3RyaW5nKDAsIHBvcykuc3BsaXQoJzonKTtcbiAgICAgIHBhcnRzLnVzZXJuYW1lID0gdFswXSA/IFVSSS5kZWNvZGUodFswXSkgOiBudWxsO1xuICAgICAgdC5zaGlmdCgpO1xuICAgICAgcGFydHMucGFzc3dvcmQgPSB0WzBdID8gVVJJLmRlY29kZSh0LmpvaW4oJzonKSkgOiBudWxsO1xuICAgICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cmluZyhwb3MgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydHMudXNlcm5hbWUgPSBudWxsO1xuICAgICAgcGFydHMucGFzc3dvcmQgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG4gIFVSSS5wYXJzZVF1ZXJ5ID0gZnVuY3Rpb24oc3RyaW5nLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG4gICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvLyB0aHJvdyBvdXQgdGhlIGZ1bmt5IGJ1c2luZXNzIC0gXCI/XCJbbmFtZVwiPVwidmFsdWVcIiZcIl0rXG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoLyYrL2csICcmJykucmVwbGFjZSgvXlxcPyomKnwmKyQvZywgJycpO1xuXG4gICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICB2YXIgaXRlbXMgPSB7fTtcbiAgICB2YXIgc3BsaXRzID0gc3RyaW5nLnNwbGl0KCcmJyk7XG4gICAgdmFyIGxlbmd0aCA9IHNwbGl0cy5sZW5ndGg7XG4gICAgdmFyIHYsIG5hbWUsIHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdiA9IHNwbGl0c1tpXS5zcGxpdCgnPScpO1xuICAgICAgbmFtZSA9IFVSSS5kZWNvZGVRdWVyeSh2LnNoaWZ0KCksIGVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgICAgLy8gbm8gXCI9XCIgaXMgbnVsbCBhY2NvcmRpbmcgdG8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3VybC9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgICB2YWx1ZSA9IHYubGVuZ3RoID8gVVJJLmRlY29kZVF1ZXJ5KHYuam9pbignPScpLCBlc2NhcGVRdWVyeVNwYWNlKSA6IG51bGw7XG5cbiAgICAgIGlmIChoYXNPd24uY2FsbChpdGVtcywgbmFtZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtc1tuYW1lXSA9PT0gJ3N0cmluZycgfHwgaXRlbXNbbmFtZV0gPT09IG51bGwpIHtcbiAgICAgICAgICBpdGVtc1tuYW1lXSA9IFtpdGVtc1tuYW1lXV07XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtc1tuYW1lXS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIFVSSS5idWlsZCA9IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgdmFyIHQgPSAnJztcblxuICAgIGlmIChwYXJ0cy5wcm90b2NvbCkge1xuICAgICAgdCArPSBwYXJ0cy5wcm90b2NvbCArICc6JztcbiAgICB9XG5cbiAgICBpZiAoIXBhcnRzLnVybiAmJiAodCB8fCBwYXJ0cy5ob3N0bmFtZSkpIHtcbiAgICAgIHQgKz0gJy8vJztcbiAgICB9XG5cbiAgICB0ICs9IChVUkkuYnVpbGRBdXRob3JpdHkocGFydHMpIHx8ICcnKTtcblxuICAgIGlmICh0eXBlb2YgcGFydHMucGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChwYXJ0cy5wYXRoLmNoYXJBdCgwKSAhPT0gJy8nICYmIHR5cGVvZiBwYXJ0cy5ob3N0bmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdCArPSAnLyc7XG4gICAgICB9XG5cbiAgICAgIHQgKz0gcGFydHMucGF0aDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcnRzLnF1ZXJ5ID09PSAnc3RyaW5nJyAmJiBwYXJ0cy5xdWVyeSkge1xuICAgICAgdCArPSAnPycgKyBwYXJ0cy5xdWVyeTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcnRzLmZyYWdtZW50ID09PSAnc3RyaW5nJyAmJiBwYXJ0cy5mcmFnbWVudCkge1xuICAgICAgdCArPSAnIycgKyBwYXJ0cy5mcmFnbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH07XG4gIFVSSS5idWlsZEhvc3QgPSBmdW5jdGlvbihwYXJ0cykge1xuICAgIHZhciB0ID0gJyc7XG5cbiAgICBpZiAoIXBhcnRzLmhvc3RuYW1lKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmIChVUkkuaXA2X2V4cHJlc3Npb24udGVzdChwYXJ0cy5ob3N0bmFtZSkpIHtcbiAgICAgIHQgKz0gJ1snICsgcGFydHMuaG9zdG5hbWUgKyAnXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQgKz0gcGFydHMuaG9zdG5hbWU7XG4gICAgfVxuXG4gICAgaWYgKHBhcnRzLnBvcnQpIHtcbiAgICAgIHQgKz0gJzonICsgcGFydHMucG9ydDtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcbiAgVVJJLmJ1aWxkQXV0aG9yaXR5ID0gZnVuY3Rpb24ocGFydHMpIHtcbiAgICByZXR1cm4gVVJJLmJ1aWxkVXNlcmluZm8ocGFydHMpICsgVVJJLmJ1aWxkSG9zdChwYXJ0cyk7XG4gIH07XG4gIFVSSS5idWlsZFVzZXJpbmZvID0gZnVuY3Rpb24ocGFydHMpIHtcbiAgICB2YXIgdCA9ICcnO1xuXG4gICAgaWYgKHBhcnRzLnVzZXJuYW1lKSB7XG4gICAgICB0ICs9IFVSSS5lbmNvZGUocGFydHMudXNlcm5hbWUpO1xuICAgIH1cblxuICAgIGlmIChwYXJ0cy5wYXNzd29yZCkge1xuICAgICAgdCArPSAnOicgKyBVUkkuZW5jb2RlKHBhcnRzLnBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICBpZiAodCkge1xuICAgICAgdCArPSAnQCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG4gIFVSSS5idWlsZFF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCBlc2NhcGVRdWVyeVNwYWNlKSB7XG4gICAgLy8gYWNjb3JkaW5nIHRvIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYgb3IgaHR0cDovL2xhYnMuYXBhY2hlLm9yZy93ZWJhcmNoL3VyaS9yZmMvcmZjMzk4Ni5odG1sXG4gICAgLy8gYmVpbmcgwrstLl9+ISQmJygpKissOz06QC8/wqsgJUhFWCBhbmQgYWxudW0gYXJlIGFsbG93ZWRcbiAgICAvLyB0aGUgUkZDIGV4cGxpY2l0bHkgc3RhdGVzID8vZm9vIGJlaW5nIGEgdmFsaWQgdXNlIGNhc2UsIG5vIG1lbnRpb24gb2YgcGFyYW1ldGVyIHN5bnRheCFcbiAgICAvLyBVUkkuanMgdHJlYXRzIHRoZSBxdWVyeSBzdHJpbmcgYXMgYmVpbmcgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG4gICAgLy8gc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1odG1sNDAvaW50ZXJhY3QvZm9ybXMuaHRtbCNmb3JtLWNvbnRlbnQtdHlwZVxuXG4gICAgdmFyIHQgPSAnJztcbiAgICB2YXIgdW5pcXVlLCBrZXksIGksIGxlbmd0aDtcbiAgICBmb3IgKGtleSBpbiBkYXRhKSB7XG4gICAgICBpZiAoaGFzT3duLmNhbGwoZGF0YSwga2V5KSAmJiBrZXkpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtrZXldKSkge1xuICAgICAgICAgIHVuaXF1ZSA9IHt9O1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGRhdGFba2V5XS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRhdGFba2V5XVtpXSAhPT0gdW5kZWZpbmVkICYmIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAnJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICB0ICs9ICcmJyArIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyKGtleSwgZGF0YVtrZXldW2ldLCBlc2NhcGVRdWVyeVNwYWNlKTtcbiAgICAgICAgICAgICAgaWYgKGR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycyAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHVuaXF1ZVtkYXRhW2tleV1baV0gKyAnJ10gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdCArPSAnJicgKyBVUkkuYnVpbGRRdWVyeVBhcmFtZXRlcihrZXksIGRhdGFba2V5XSwgZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdC5zdWJzdHJpbmcoMSk7XG4gIH07XG4gIFVSSS5idWlsZFF1ZXJ5UGFyYW1ldGVyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGVzY2FwZVF1ZXJ5U3BhY2UpIHtcbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwL2ludGVyYWN0L2Zvcm1zLmh0bWwjZm9ybS1jb250ZW50LXR5cGUgLS0gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG4gICAgLy8gZG9uJ3QgYXBwZW5kIFwiPVwiIGZvciBudWxsIHZhbHVlcywgYWNjb3JkaW5nIHRvIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy91cmwvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwjdXJsLXBhcmFtZXRlci1zZXJpYWxpemF0aW9uXG4gICAgcmV0dXJuIFVSSS5lbmNvZGVRdWVyeShuYW1lLCBlc2NhcGVRdWVyeVNwYWNlKSArICh2YWx1ZSAhPT0gbnVsbCA/ICc9JyArIFVSSS5lbmNvZGVRdWVyeSh2YWx1ZSwgZXNjYXBlUXVlcnlTcGFjZSkgOiAnJyk7XG4gIH07XG5cbiAgVVJJLmFkZFF1ZXJ5ID0gZnVuY3Rpb24oZGF0YSwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkge1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuICAgICAgICAgIFVSSS5hZGRRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkYXRhW25hbWVdID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGFbbmFtZV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGFbbmFtZV0gPSBbZGF0YVtuYW1lXV07XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgfVxuXG4gICAgICBkYXRhW25hbWVdID0gKGRhdGFbbmFtZV0gfHwgW10pLmNvbmNhdCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7XG4gICAgfVxuICB9O1xuXG4gIFVSSS5zZXRRdWVyeSA9IGZ1bmN0aW9uKGRhdGEsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgaWYgKGhhc093bi5jYWxsKG5hbWUsIGtleSkpIHtcbiAgICAgICAgICBVUkkuc2V0UXVlcnkoZGF0YSwga2V5LCBuYW1lW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRhdGFbbmFtZV0gPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVUkkuc2V0UXVlcnkoKSBhY2NlcHRzIGFuIG9iamVjdCwgc3RyaW5nIGFzIHRoZSBuYW1lIHBhcmFtZXRlcicpO1xuICAgIH1cbiAgfTtcblxuICBVUkkucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpLCBsZW5ndGgsIGtleTtcblxuICAgIGlmIChpc0FycmF5KG5hbWUpKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBuYW1lLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGFbbmFtZVtpXV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChnZXRUeXBlKG5hbWUpID09PSAnUmVnRXhwJykge1xuICAgICAgZm9yIChrZXkgaW4gZGF0YSkge1xuICAgICAgICBpZiAobmFtZS50ZXN0KGtleSkpIHtcbiAgICAgICAgICBkYXRhW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yIChrZXkgaW4gbmFtZSkge1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwga2V5KSkge1xuICAgICAgICAgIFVSSS5yZW1vdmVRdWVyeShkYXRhLCBrZXksIG5hbWVba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGdldFR5cGUodmFsdWUpID09PSAnUmVnRXhwJykge1xuICAgICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSAmJiB2YWx1ZS50ZXN0KGRhdGFbbmFtZV0pKSB7XG4gICAgICAgICAgICBkYXRhW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhW25hbWVdID0gZmlsdGVyQXJyYXlWYWx1ZXMoZGF0YVtuYW1lXSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhW25hbWVdID09PSBTdHJpbmcodmFsdWUpICYmICghaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID09PSAxKSkge1xuICAgICAgICAgIGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhW25hbWVdKSkge1xuICAgICAgICAgIGRhdGFbbmFtZV0gPSBmaWx0ZXJBcnJheVZhbHVlcyhkYXRhW25hbWVdLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5yZW1vdmVRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcsIFJlZ0V4cCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyJyk7XG4gICAgfVxuICB9O1xuICBVUkkuaGFzUXVlcnkgPSBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpIHtcbiAgICBzd2l0Y2ggKGdldFR5cGUobmFtZSkpIHtcbiAgICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8gaGVyZVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgaWYgKG5hbWUudGVzdChrZXkpICYmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IFVSSS5oYXNRdWVyeShkYXRhLCBrZXksIHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjYXNlICdPYmplY3QnOlxuICAgICAgICBmb3IgKHZhciBfa2V5IGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoaGFzT3duLmNhbGwobmFtZSwgX2tleSkpIHtcbiAgICAgICAgICAgIGlmICghVVJJLmhhc1F1ZXJ5KGRhdGEsIF9rZXksIG5hbWVbX2tleV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyBhIHN0cmluZywgcmVndWxhciBleHByZXNzaW9uIG9yIG9iamVjdCBhcyB0aGUgbmFtZSBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGdldFR5cGUodmFsdWUpKSB7XG4gICAgICBjYXNlICdVbmRlZmluZWQnOlxuICAgICAgICAvLyB0cnVlIGlmIGV4aXN0cyAoYnV0IG1heSBiZSBlbXB0eSlcbiAgICAgICAgcmV0dXJuIG5hbWUgaW4gZGF0YTsgLy8gZGF0YVtuYW1lXSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICBjYXNlICdCb29sZWFuJzpcbiAgICAgICAgLy8gdHJ1ZSBpZiBleGlzdHMgYW5kIG5vbi1lbXB0eVxuICAgICAgICB2YXIgX2Jvb2x5ID0gQm9vbGVhbihpc0FycmF5KGRhdGFbbmFtZV0pID8gZGF0YVtuYW1lXS5sZW5ndGggOiBkYXRhW25hbWVdKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBfYm9vbHk7XG5cbiAgICAgIGNhc2UgJ0Z1bmN0aW9uJzpcbiAgICAgICAgLy8gYWxsb3cgY29tcGxleCBjb21wYXJpc29uXG4gICAgICAgIHJldHVybiAhIXZhbHVlKGRhdGFbbmFtZV0sIG5hbWUsIGRhdGEpO1xuXG4gICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgIGlmICghaXNBcnJheShkYXRhW25hbWVdKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcCA9IHdpdGhpbkFycmF5ID8gYXJyYXlDb250YWlucyA6IGFycmF5c0VxdWFsO1xuICAgICAgICByZXR1cm4gb3AoZGF0YVtuYW1lXSwgdmFsdWUpO1xuXG4gICAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YVtuYW1lXSkpIHtcbiAgICAgICAgICByZXR1cm4gQm9vbGVhbihkYXRhW25hbWVdICYmIGRhdGFbbmFtZV0ubWF0Y2godmFsdWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghd2l0aGluQXJyYXkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyYXlDb250YWlucyhkYXRhW25hbWVdLCB2YWx1ZSk7XG5cbiAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGFbbmFtZV0gPT09IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF3aXRoaW5BcnJheSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnJheUNvbnRhaW5zKGRhdGFbbmFtZV0sIHZhbHVlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVVJJLmhhc1F1ZXJ5KCkgYWNjZXB0cyB1bmRlZmluZWQsIGJvb2xlYW4sIHN0cmluZywgbnVtYmVyLCBSZWdFeHAsIEZ1bmN0aW9uIGFzIHRoZSB2YWx1ZSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gIH07XG5cblxuICBVUkkuam9pblBhdGhzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlucHV0ID0gW107XG4gICAgdmFyIHNlZ21lbnRzID0gW107XG4gICAgdmFyIG5vbkVtcHR5U2VnbWVudHMgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB1cmwgPSBuZXcgVVJJKGFyZ3VtZW50c1tpXSk7XG4gICAgICBpbnB1dC5wdXNoKHVybCk7XG4gICAgICB2YXIgX3NlZ21lbnRzID0gdXJsLnNlZ21lbnQoKTtcbiAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgX3NlZ21lbnRzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgX3NlZ21lbnRzW3NdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHNlZ21lbnRzLnB1c2goX3NlZ21lbnRzW3NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfc2VnbWVudHNbc10pIHtcbiAgICAgICAgICBub25FbXB0eVNlZ21lbnRzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCB8fCAhbm9uRW1wdHlTZWdtZW50cykge1xuICAgICAgcmV0dXJuIG5ldyBVUkkoJycpO1xuICAgIH1cblxuICAgIHZhciB1cmkgPSBuZXcgVVJJKCcnKS5zZWdtZW50KHNlZ21lbnRzKTtcblxuICAgIGlmIChpbnB1dFswXS5wYXRoKCkgPT09ICcnIHx8IGlucHV0WzBdLnBhdGgoKS5zbGljZSgwLCAxKSA9PT0gJy8nKSB7XG4gICAgICB1cmkucGF0aCgnLycgKyB1cmkucGF0aCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJpLm5vcm1hbGl6ZSgpO1xuICB9O1xuXG4gIFVSSS5jb21tb25QYXRoID0gZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4ob25lLmxlbmd0aCwgdHdvLmxlbmd0aCk7XG4gICAgdmFyIHBvcztcblxuICAgIC8vIGZpbmQgZmlyc3Qgbm9uLW1hdGNoaW5nIGNoYXJhY3RlclxuICAgIGZvciAocG9zID0gMDsgcG9zIDwgbGVuZ3RoOyBwb3MrKykge1xuICAgICAgaWYgKG9uZS5jaGFyQXQocG9zKSAhPT0gdHdvLmNoYXJBdChwb3MpKSB7XG4gICAgICAgIHBvcy0tO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zIDwgMSkge1xuICAgICAgcmV0dXJuIG9uZS5jaGFyQXQoMCkgPT09IHR3by5jaGFyQXQoMCkgJiYgb25lLmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJyc7XG4gICAgfVxuXG4gICAgLy8gcmV2ZXJ0IHRvIGxhc3QgL1xuICAgIGlmIChvbmUuY2hhckF0KHBvcykgIT09ICcvJyB8fCB0d28uY2hhckF0KHBvcykgIT09ICcvJykge1xuICAgICAgcG9zID0gb25lLnN1YnN0cmluZygwLCBwb3MpLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9uZS5zdWJzdHJpbmcoMCwgcG9zICsgMSk7XG4gIH07XG5cbiAgVVJJLndpdGhpblN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIHZhciBfc3RhcnQgPSBvcHRpb25zLnN0YXJ0IHx8IFVSSS5maW5kVXJpLnN0YXJ0O1xuICAgIHZhciBfZW5kID0gb3B0aW9ucy5lbmQgfHwgVVJJLmZpbmRVcmkuZW5kO1xuICAgIHZhciBfdHJpbSA9IG9wdGlvbnMudHJpbSB8fCBVUkkuZmluZFVyaS50cmltO1xuICAgIHZhciBfcGFyZW5zID0gb3B0aW9ucy5wYXJlbnMgfHwgVVJJLmZpbmRVcmkucGFyZW5zO1xuICAgIHZhciBfYXR0cmlidXRlT3BlbiA9IC9bYS16MC05LV09W1wiJ10/JC9pO1xuXG4gICAgX3N0YXJ0Lmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHZhciBtYXRjaCA9IF9zdGFydC5leGVjKHN0cmluZyk7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQgPSBtYXRjaC5pbmRleDtcbiAgICAgIGlmIChvcHRpb25zLmlnbm9yZUh0bWwpIHtcbiAgICAgICAgLy8gYXR0cmlidXQoZT1bXCInXT8kKVxuICAgICAgICB2YXIgYXR0cmlidXRlT3BlbiA9IHN0cmluZy5zbGljZShNYXRoLm1heChzdGFydCAtIDMsIDApLCBzdGFydCk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVPcGVuICYmIF9hdHRyaWJ1dGVPcGVuLnRlc3QoYXR0cmlidXRlT3BlbikpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZW5kID0gc3RhcnQgKyBzdHJpbmcuc2xpY2Uoc3RhcnQpLnNlYXJjaChfZW5kKTtcbiAgICAgIHZhciBzbGljZSA9IHN0cmluZy5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBpbmNsdWRlIHdlbGwgYmFsYW5jZWQgcGFyZW5zXG4gICAgICB2YXIgcGFyZW5zRW5kID0gLTE7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcGFyZW5zTWF0Y2ggPSBfcGFyZW5zLmV4ZWMoc2xpY2UpO1xuICAgICAgICBpZiAoIXBhcmVuc01hdGNoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyZW5zTWF0Y2hFbmQgPSBwYXJlbnNNYXRjaC5pbmRleCArIHBhcmVuc01hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgcGFyZW5zRW5kID0gTWF0aC5tYXgocGFyZW5zRW5kLCBwYXJlbnNNYXRjaEVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnNFbmQgPiAtMSkge1xuICAgICAgICBzbGljZSA9IHNsaWNlLnNsaWNlKDAsIHBhcmVuc0VuZCkgKyBzbGljZS5zbGljZShwYXJlbnNFbmQpLnJlcGxhY2UoX3RyaW0sICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWNlID0gc2xpY2UucmVwbGFjZShfdHJpbSwgJycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2xpY2UubGVuZ3RoIDw9IG1hdGNoWzBdLmxlbmd0aCkge1xuICAgICAgICAvLyB0aGUgZXh0cmFjdCBvbmx5IGNvbnRhaW5zIHRoZSBzdGFydGluZyBtYXJrZXIgb2YgYSBVUkksXG4gICAgICAgIC8vIGUuZy4gXCJ3d3dcIiBvciBcImh0dHA6Ly9cIlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaWdub3JlICYmIG9wdGlvbnMuaWdub3JlLnRlc3Qoc2xpY2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBlbmQgPSBzdGFydCArIHNsaWNlLmxlbmd0aDtcbiAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhzbGljZSwgc3RhcnQsIGVuZCwgc3RyaW5nKTtcbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfc3RhcnQubGFzdEluZGV4ID0gZW5kO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gU3RyaW5nKHJlc3VsdCk7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgc3RhcnQpICsgcmVzdWx0ICsgc3RyaW5nLnNsaWNlKGVuZCk7XG4gICAgICBfc3RhcnQubGFzdEluZGV4ID0gc3RhcnQgKyByZXN1bHQubGVuZ3RoO1xuICAgIH1cblxuICAgIF9zdGFydC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG5cbiAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUgPSBmdW5jdGlvbih2LCBwcm90b2NvbCkge1xuICAgIC8vIFRoZW9yZXRpY2FsbHkgVVJJcyBhbGxvdyBwZXJjZW50LWVuY29kaW5nIGluIEhvc3RuYW1lcyAoYWNjb3JkaW5nIHRvIFJGQyAzOTg2KVxuICAgIC8vIHRoZXkgYXJlIG5vdCBwYXJ0IG9mIEROUyBhbmQgdGhlcmVmb3JlIGlnbm9yZWQgYnkgVVJJLmpzXG5cbiAgICB2YXIgaGFzSG9zdG5hbWUgPSAhIXY7IC8vIG5vdCBudWxsIGFuZCBub3QgYW4gZW1wdHkgc3RyaW5nXG4gICAgdmFyIGhhc1Byb3RvY29sID0gISFwcm90b2NvbDtcbiAgICB2YXIgcmVqZWN0RW1wdHlIb3N0bmFtZSA9IGZhbHNlO1xuXG4gICAgaWYgKGhhc1Byb3RvY29sKSB7XG4gICAgICByZWplY3RFbXB0eUhvc3RuYW1lID0gYXJyYXlDb250YWlucyhVUkkuaG9zdFByb3RvY29scywgcHJvdG9jb2wpO1xuICAgIH1cblxuICAgIGlmIChyZWplY3RFbXB0eUhvc3RuYW1lICYmICFoYXNIb3N0bmFtZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgY2Fubm90IGJlIGVtcHR5LCBpZiBwcm90b2NvbCBpcyAnICsgcHJvdG9jb2wpO1xuICAgIH0gZWxzZSBpZiAodiAmJiB2Lm1hdGNoKFVSSS5pbnZhbGlkX2hvc3RuYW1lX2NoYXJhY3RlcnMpKSB7XG4gICAgICAvLyB0ZXN0IHB1bnljb2RlXG4gICAgICBpZiAoIXB1bnljb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLTpfXSBhbmQgUHVueWNvZGUuanMgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgfVxuICAgICAgaWYgKHB1bnljb2RlLnRvQVNDSUkodikubWF0Y2goVVJJLmludmFsaWRfaG9zdG5hbWVfY2hhcmFjdGVycykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSG9zdG5hbWUgXCInICsgdiArICdcIiBjb250YWlucyBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gW0EtWjAtOS4tOl9dJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFVSSS5lbnN1cmVWYWxpZFBvcnQgPSBmdW5jdGlvbiAodikge1xuICAgIGlmICghdikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3J0ID0gTnVtYmVyKHYpO1xuICAgIGlmIChpc0ludGVnZXIocG9ydCkgJiYgKHBvcnQgPiAwKSAmJiAocG9ydCA8IDY1NTM2KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BvcnQgXCInICsgdiArICdcIiBpcyBub3QgYSB2YWxpZCBwb3J0Jyk7XG4gIH07XG5cbiAgLy8gbm9Db25mbGljdFxuICBVUkkubm9Db25mbGljdCA9IGZ1bmN0aW9uKHJlbW92ZUFsbCkge1xuICAgIGlmIChyZW1vdmVBbGwpIHtcbiAgICAgIHZhciB1bmNvbmZsaWN0ZWQgPSB7XG4gICAgICAgIFVSSTogdGhpcy5ub0NvbmZsaWN0KClcbiAgICAgIH07XG5cbiAgICAgIGlmIChyb290LlVSSVRlbXBsYXRlICYmIHR5cGVvZiByb290LlVSSVRlbXBsYXRlLm5vQ29uZmxpY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdW5jb25mbGljdGVkLlVSSVRlbXBsYXRlID0gcm9vdC5VUklUZW1wbGF0ZS5ub0NvbmZsaWN0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb290LklQdjYgJiYgdHlwZW9mIHJvb3QuSVB2Ni5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHVuY29uZmxpY3RlZC5JUHY2ID0gcm9vdC5JUHY2Lm5vQ29uZmxpY3QoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3QuU2Vjb25kTGV2ZWxEb21haW5zICYmIHR5cGVvZiByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHVuY29uZmxpY3RlZC5TZWNvbmRMZXZlbERvbWFpbnMgPSByb290LlNlY29uZExldmVsRG9tYWlucy5ub0NvbmZsaWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmNvbmZsaWN0ZWQ7XG4gICAgfSBlbHNlIGlmIChyb290LlVSSSA9PT0gdGhpcykge1xuICAgICAgcm9vdC5VUkkgPSBfVVJJO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAuYnVpbGQgPSBmdW5jdGlvbihkZWZlckJ1aWxkKSB7XG4gICAgaWYgKGRlZmVyQnVpbGQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuX2RlZmVycmVkX2J1aWxkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRlZmVyQnVpbGQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl9kZWZlcnJlZF9idWlsZCkge1xuICAgICAgdGhpcy5fc3RyaW5nID0gVVJJLmJ1aWxkKHRoaXMuX3BhcnRzKTtcbiAgICAgIHRoaXMuX2RlZmVycmVkX2J1aWxkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcC5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVVJJKHRoaXMpO1xuICB9O1xuXG4gIHAudmFsdWVPZiA9IHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZChmYWxzZSkuX3N0cmluZztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoX3BhcnQpe1xuICAgIHJldHVybiBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFydHNbX3BhcnRdIHx8ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcGFydHNbX3BhcnRdID0gdiB8fCBudWxsO1xuICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVByZWZpeEFjY2Vzc29yKF9wYXJ0LCBfa2V5KXtcbiAgICByZXR1cm4gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzW19wYXJ0XSB8fCAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2ICE9PSBudWxsKSB7XG4gICAgICAgICAgdiA9IHYgKyAnJztcbiAgICAgICAgICBpZiAodi5jaGFyQXQoMCkgPT09IF9rZXkpIHtcbiAgICAgICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wYXJ0c1tfcGFydF0gPSB2O1xuICAgICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwLnByb3RvY29sID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncHJvdG9jb2wnKTtcbiAgcC51c2VybmFtZSA9IGdlbmVyYXRlU2ltcGxlQWNjZXNzb3IoJ3VzZXJuYW1lJyk7XG4gIHAucGFzc3dvcmQgPSBnZW5lcmF0ZVNpbXBsZUFjY2Vzc29yKCdwYXNzd29yZCcpO1xuICBwLmhvc3RuYW1lID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcignaG9zdG5hbWUnKTtcbiAgcC5wb3J0ID0gZ2VuZXJhdGVTaW1wbGVBY2Nlc3NvcigncG9ydCcpO1xuICBwLnF1ZXJ5ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcigncXVlcnknLCAnPycpO1xuICBwLmZyYWdtZW50ID0gZ2VuZXJhdGVQcmVmaXhBY2Nlc3NvcignZnJhZ21lbnQnLCAnIycpO1xuXG4gIHAuc2VhcmNoID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICB2YXIgdCA9IHRoaXMucXVlcnkodiwgYnVpbGQpO1xuICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ3N0cmluZycgJiYgdC5sZW5ndGggPyAoJz8nICsgdCkgOiB0O1xuICB9O1xuICBwLmhhc2ggPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIHZhciB0ID0gdGhpcy5mcmFnbWVudCh2LCBidWlsZCk7XG4gICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnc3RyaW5nJyAmJiB0Lmxlbmd0aCA/ICgnIycgKyB0KSA6IHQ7XG4gIH07XG5cbiAgcC5wYXRobmFtZSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSB0cnVlKSB7XG4gICAgICB2YXIgcmVzID0gdGhpcy5fcGFydHMucGF0aCB8fCAodGhpcy5fcGFydHMuaG9zdG5hbWUgPyAnLycgOiAnJyk7XG4gICAgICByZXR1cm4gdiA/ICh0aGlzLl9wYXJ0cy51cm4gPyBVUkkuZGVjb2RlVXJuUGF0aCA6IFVSSS5kZWNvZGVQYXRoKShyZXMpIDogcmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB2ID8gVVJJLnJlY29kZVVyblBhdGgodikgOiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB2ID8gVVJJLnJlY29kZVBhdGgodikgOiAnLyc7XG4gICAgICB9XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAucGF0aCA9IHAucGF0aG5hbWU7XG4gIHAuaHJlZiA9IGZ1bmN0aW9uKGhyZWYsIGJ1aWxkKSB7XG4gICAgdmFyIGtleTtcblxuICAgIGlmIChocmVmID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RyaW5nID0gJyc7XG4gICAgdGhpcy5fcGFydHMgPSBVUkkuX3BhcnRzKCk7XG5cbiAgICB2YXIgX1VSSSA9IGhyZWYgaW5zdGFuY2VvZiBVUkk7XG4gICAgdmFyIF9vYmplY3QgPSB0eXBlb2YgaHJlZiA9PT0gJ29iamVjdCcgJiYgKGhyZWYuaG9zdG5hbWUgfHwgaHJlZi5wYXRoIHx8IGhyZWYucGF0aG5hbWUpO1xuICAgIGlmIChocmVmLm5vZGVOYW1lKSB7XG4gICAgICB2YXIgYXR0cmlidXRlID0gVVJJLmdldERvbUF0dHJpYnV0ZShocmVmKTtcbiAgICAgIGhyZWYgPSBocmVmW2F0dHJpYnV0ZV0gfHwgJyc7XG4gICAgICBfb2JqZWN0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gd2luZG93LmxvY2F0aW9uIGlzIHJlcG9ydGVkIHRvIGJlIGFuIG9iamVjdCwgYnV0IGl0J3Mgbm90IHRoZSBzb3J0XG4gICAgLy8gb2Ygb2JqZWN0IHdlJ3JlIGxvb2tpbmcgZm9yOlxuICAgIC8vICogbG9jYXRpb24ucHJvdG9jb2wgZW5kcyB3aXRoIGEgY29sb25cbiAgICAvLyAqIGxvY2F0aW9uLnF1ZXJ5ICE9IG9iamVjdC5zZWFyY2hcbiAgICAvLyAqIGxvY2F0aW9uLmhhc2ggIT0gb2JqZWN0LmZyYWdtZW50XG4gICAgLy8gc2ltcGx5IHNlcmlhbGl6aW5nIHRoZSB1bmtub3duIG9iamVjdCBzaG91bGQgZG8gdGhlIHRyaWNrXG4gICAgLy8gKGZvciBsb2NhdGlvbiwgbm90IGZvciBldmVyeXRoaW5nLi4uKVxuICAgIGlmICghX1VSSSAmJiBfb2JqZWN0ICYmIGhyZWYucGF0aG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaHJlZiA9IGhyZWYudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGhyZWYgPT09ICdzdHJpbmcnIHx8IGhyZWYgaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgIHRoaXMuX3BhcnRzID0gVVJJLnBhcnNlKFN0cmluZyhocmVmKSwgdGhpcy5fcGFydHMpO1xuICAgIH0gZWxzZSBpZiAoX1VSSSB8fCBfb2JqZWN0KSB7XG4gICAgICB2YXIgc3JjID0gX1VSSSA/IGhyZWYuX3BhcnRzIDogaHJlZjtcbiAgICAgIGZvciAoa2V5IGluIHNyYykge1xuICAgICAgICBpZiAoa2V5ID09PSAncXVlcnknKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIGlmIChoYXNPd24uY2FsbCh0aGlzLl9wYXJ0cywga2V5KSkge1xuICAgICAgICAgIHRoaXMuX3BhcnRzW2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNyYy5xdWVyeSkge1xuICAgICAgICB0aGlzLnF1ZXJ5KHNyYy5xdWVyeSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGlucHV0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIGlkZW50aWZpY2F0aW9uIGFjY2Vzc29yc1xuICBwLmlzID0gZnVuY3Rpb24od2hhdCkge1xuICAgIHZhciBpcCA9IGZhbHNlO1xuICAgIHZhciBpcDQgPSBmYWxzZTtcbiAgICB2YXIgaXA2ID0gZmFsc2U7XG4gICAgdmFyIG5hbWUgPSBmYWxzZTtcbiAgICB2YXIgc2xkID0gZmFsc2U7XG4gICAgdmFyIGlkbiA9IGZhbHNlO1xuICAgIHZhciBwdW55Y29kZSA9IGZhbHNlO1xuICAgIHZhciByZWxhdGl2ZSA9ICF0aGlzLl9wYXJ0cy51cm47XG5cbiAgICBpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgIHJlbGF0aXZlID0gZmFsc2U7XG4gICAgICBpcDQgPSBVUkkuaXA0X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICBpcDYgPSBVUkkuaXA2X2V4cHJlc3Npb24udGVzdCh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICBpcCA9IGlwNCB8fCBpcDY7XG4gICAgICBuYW1lID0gIWlwO1xuICAgICAgc2xkID0gbmFtZSAmJiBTTEQgJiYgU0xELmhhcyh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICBpZG4gPSBuYW1lICYmIFVSSS5pZG5fZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICAgIHB1bnljb2RlID0gbmFtZSAmJiBVUkkucHVueWNvZGVfZXhwcmVzc2lvbi50ZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHdoYXQudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAncmVsYXRpdmUnOlxuICAgICAgICByZXR1cm4gcmVsYXRpdmU7XG5cbiAgICAgIGNhc2UgJ2Fic29sdXRlJzpcbiAgICAgICAgcmV0dXJuICFyZWxhdGl2ZTtcblxuICAgICAgLy8gaG9zdG5hbWUgaWRlbnRpZmljYXRpb25cbiAgICAgIGNhc2UgJ2RvbWFpbic6XG4gICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgcmV0dXJuIG5hbWU7XG5cbiAgICAgIGNhc2UgJ3NsZCc6XG4gICAgICAgIHJldHVybiBzbGQ7XG5cbiAgICAgIGNhc2UgJ2lwJzpcbiAgICAgICAgcmV0dXJuIGlwO1xuXG4gICAgICBjYXNlICdpcDQnOlxuICAgICAgY2FzZSAnaXB2NCc6XG4gICAgICBjYXNlICdpbmV0NCc6XG4gICAgICAgIHJldHVybiBpcDQ7XG5cbiAgICAgIGNhc2UgJ2lwNic6XG4gICAgICBjYXNlICdpcHY2JzpcbiAgICAgIGNhc2UgJ2luZXQ2JzpcbiAgICAgICAgcmV0dXJuIGlwNjtcblxuICAgICAgY2FzZSAnaWRuJzpcbiAgICAgICAgcmV0dXJuIGlkbjtcblxuICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgcmV0dXJuICF0aGlzLl9wYXJ0cy51cm47XG5cbiAgICAgIGNhc2UgJ3Vybic6XG4gICAgICAgIHJldHVybiAhIXRoaXMuX3BhcnRzLnVybjtcblxuICAgICAgY2FzZSAncHVueWNvZGUnOlxuICAgICAgICByZXR1cm4gcHVueWNvZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLy8gY29tcG9uZW50IHNwZWNpZmljIGlucHV0IHZhbGlkYXRpb25cbiAgdmFyIF9wcm90b2NvbCA9IHAucHJvdG9jb2w7XG4gIHZhciBfcG9ydCA9IHAucG9ydDtcbiAgdmFyIF9ob3N0bmFtZSA9IHAuaG9zdG5hbWU7XG5cbiAgcC5wcm90b2NvbCA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHYpIHtcbiAgICAgIC8vIGFjY2VwdCB0cmFpbGluZyA6Ly9cbiAgICAgIHYgPSB2LnJlcGxhY2UoLzooXFwvXFwvKT8kLywgJycpO1xuXG4gICAgICBpZiAoIXYubWF0Y2goVVJJLnByb3RvY29sX2V4cHJlc3Npb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3RvY29sIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuKy1dIG9yIGRvZXNuXFwndCBzdGFydCB3aXRoIFtBLVpdJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wcm90b2NvbC5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcbiAgfTtcbiAgcC5zY2hlbWUgPSBwLnByb3RvY29sO1xuICBwLnBvcnQgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHYgPT09IDApIHtcbiAgICAgICAgdiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh2KSB7XG4gICAgICAgIHYgKz0gJyc7XG4gICAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gJzonKSB7XG4gICAgICAgICAgdiA9IHYuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgVVJJLmVuc3VyZVZhbGlkUG9ydCh2KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9wb3J0LmNhbGwodGhpcywgdiwgYnVpbGQpO1xuICB9O1xuICBwLmhvc3RuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB4ID0geyBwcmV2ZW50SW52YWxpZEhvc3RuYW1lOiB0aGlzLl9wYXJ0cy5wcmV2ZW50SW52YWxpZEhvc3RuYW1lIH07XG4gICAgICB2YXIgcmVzID0gVVJJLnBhcnNlSG9zdCh2LCB4KTtcbiAgICAgIGlmIChyZXMgIT09ICcvJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIb3N0bmFtZSBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05Li1dJyk7XG4gICAgICB9XG5cbiAgICAgIHYgPSB4Lmhvc3RuYW1lO1xuICAgICAgaWYgKHRoaXMuX3BhcnRzLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUpIHtcbiAgICAgICAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUodiwgdGhpcy5fcGFydHMucHJvdG9jb2wpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfaG9zdG5hbWUuY2FsbCh0aGlzLCB2LCBidWlsZCk7XG4gIH07XG5cbiAgLy8gY29tcG91bmQgYWNjZXNzb3JzXG4gIHAub3JpZ2luID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2woKTtcbiAgICAgIHZhciBhdXRob3JpdHkgPSB0aGlzLmF1dGhvcml0eSgpO1xuICAgICAgaWYgKCFhdXRob3JpdHkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKHByb3RvY29sID8gcHJvdG9jb2wgKyAnOi8vJyA6ICcnKSArIHRoaXMuYXV0aG9yaXR5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvcmlnaW4gPSBVUkkodik7XG4gICAgICB0aGlzXG4gICAgICAgIC5wcm90b2NvbChvcmlnaW4ucHJvdG9jb2woKSlcbiAgICAgICAgLmF1dGhvcml0eShvcmlnaW4uYXV0aG9yaXR5KCkpXG4gICAgICAgIC5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmhvc3QgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gVVJJLmJ1aWxkSG9zdCh0aGlzLl9wYXJ0cykgOiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlcyA9IFVSSS5wYXJzZUhvc3QodiwgdGhpcy5fcGFydHMpO1xuICAgICAgaWYgKHJlcyAhPT0gJy8nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmF1dGhvcml0eSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUgPyBVUkkuYnVpbGRBdXRob3JpdHkodGhpcy5fcGFydHMpIDogJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZXMgPSBVUkkucGFyc2VBdXRob3JpdHkodiwgdGhpcy5fcGFydHMpO1xuICAgICAgaWYgKHJlcyAhPT0gJy8nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hvc3RuYW1lIFwiJyArIHYgKyAnXCIgY29udGFpbnMgY2hhcmFjdGVycyBvdGhlciB0aGFuIFtBLVowLTkuLV0nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLnVzZXJpbmZvID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB0ID0gVVJJLmJ1aWxkVXNlcmluZm8odGhpcy5fcGFydHMpO1xuICAgICAgcmV0dXJuIHQgPyB0LnN1YnN0cmluZygwLCB0Lmxlbmd0aCAtMSkgOiB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodlt2Lmxlbmd0aC0xXSAhPT0gJ0AnKSB7XG4gICAgICAgIHYgKz0gJ0AnO1xuICAgICAgfVxuXG4gICAgICBVUkkucGFyc2VVc2VyaW5mbyh2LCB0aGlzLl9wYXJ0cyk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAucmVzb3VyY2UgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIHZhciBwYXJ0cztcblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdGgoKSArIHRoaXMuc2VhcmNoKCkgKyB0aGlzLmhhc2goKTtcbiAgICB9XG5cbiAgICBwYXJ0cyA9IFVSSS5wYXJzZSh2KTtcbiAgICB0aGlzLl9wYXJ0cy5wYXRoID0gcGFydHMucGF0aDtcbiAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IHBhcnRzLnF1ZXJ5O1xuICAgIHRoaXMuX3BhcnRzLmZyYWdtZW50ID0gcGFydHMuZnJhZ21lbnQ7XG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIGZyYWN0aW9uIGFjY2Vzc29yc1xuICBwLnN1YmRvbWFpbiA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICAvLyBjb252ZW5pZW5jZSwgcmV0dXJuIFwid3d3XCIgZnJvbSBcInd3dy5leGFtcGxlLm9yZ1wiXG4gICAgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgLy8gZ3JhYiBkb21haW4gYW5kIGFkZCBhbm90aGVyIHNlZ21lbnRcbiAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sZW5ndGggLSB0aGlzLmRvbWFpbigpLmxlbmd0aCAtIDE7XG4gICAgICByZXR1cm4gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGVuZCkgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBlID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGVuZ3RoIC0gdGhpcy5kb21haW4oKS5sZW5ndGg7XG4gICAgICB2YXIgc3ViID0gdGhpcy5fcGFydHMuaG9zdG5hbWUuc3Vic3RyaW5nKDAsIGUpO1xuICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKCdeJyArIGVzY2FwZVJlZ0V4KHN1YikpO1xuXG4gICAgICBpZiAodiAmJiB2LmNoYXJBdCh2Lmxlbmd0aCAtIDEpICE9PSAnLicpIHtcbiAgICAgICAgdiArPSAnLic7XG4gICAgICB9XG5cbiAgICAgIGlmICh2LmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRG9tYWlucyBjYW5ub3QgY29udGFpbiBjb2xvbnMnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYpIHtcbiAgICAgICAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUodiwgdGhpcy5fcGFydHMucHJvdG9jb2wpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJ0cy5ob3N0bmFtZSA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnJlcGxhY2UocmVwbGFjZSwgdik7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAuZG9tYWluID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBidWlsZCA9IHY7XG4gICAgICB2ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIGNvbnZlbmllbmNlLCByZXR1cm4gXCJleGFtcGxlLm9yZ1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGhvc3RuYW1lIGNvbnNpc3RzIG9mIDEgb3IgMiBzZWdtZW50cywgaXQgbXVzdCBiZSB0aGUgZG9tYWluXG4gICAgICB2YXIgdCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLm1hdGNoKC9cXC4vZyk7XG4gICAgICBpZiAodCAmJiB0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLmhvc3RuYW1lO1xuICAgICAgfVxuXG4gICAgICAvLyBncmFiIHRsZCBhbmQgYWRkIGFub3RoZXIgc2VnbWVudFxuICAgICAgdmFyIGVuZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLmxlbmd0aCAtIHRoaXMudGxkKGJ1aWxkKS5sZW5ndGggLSAxO1xuICAgICAgZW5kID0gdGhpcy5fcGFydHMuaG9zdG5hbWUubGFzdEluZGV4T2YoJy4nLCBlbmQgLTEpICsgMTtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5zdWJzdHJpbmcoZW5kKSB8fCAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF2KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBzZXQgZG9tYWluIGVtcHR5Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2LmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRG9tYWlucyBjYW5ub3QgY29udGFpbiBjb2xvbnMnKTtcbiAgICAgIH1cblxuICAgICAgVVJJLmVuc3VyZVZhbGlkSG9zdG5hbWUodiwgdGhpcy5fcGFydHMucHJvdG9jb2wpO1xuXG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLmhvc3RuYW1lIHx8IHRoaXMuaXMoJ0lQJykpIHtcbiAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHRoaXMuZG9tYWluKCkpICsgJyQnKTtcbiAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAudGxkID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBidWlsZCA9IHY7XG4gICAgICB2ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIHJldHVybiBcIm9yZ1wiIGZyb20gXCJ3d3cuZXhhbXBsZS5vcmdcIlxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMuaG9zdG5hbWUgfHwgdGhpcy5pcygnSVAnKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3MgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgdmFyIHRsZCA9IHRoaXMuX3BhcnRzLmhvc3RuYW1lLnN1YnN0cmluZyhwb3MgKyAxKTtcblxuICAgICAgaWYgKGJ1aWxkICE9PSB0cnVlICYmIFNMRCAmJiBTTEQubGlzdFt0bGQudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgcmV0dXJuIFNMRC5nZXQodGhpcy5fcGFydHMuaG9zdG5hbWUpIHx8IHRsZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlcGxhY2U7XG5cbiAgICAgIGlmICghdikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IFRMRCBlbXB0eScpO1xuICAgICAgfSBlbHNlIGlmICh2Lm1hdGNoKC9bXmEtekEtWjAtOS1dLykpIHtcbiAgICAgICAgaWYgKFNMRCAmJiBTTEQuaXModikpIHtcbiAgICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLnRsZCgpKSArICckJyk7XG4gICAgICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RMRCBcIicgKyB2ICsgJ1wiIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3RoZXIgdGhhbiBbQS1aMC05XScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wYXJ0cy5ob3N0bmFtZSB8fCB0aGlzLmlzKCdJUCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignY2Fubm90IHNldCBUTEQgb24gbm9uLWRvbWFpbiBob3N0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCh0aGlzLnRsZCgpKSArICckJyk7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gdGhpcy5fcGFydHMuaG9zdG5hbWUucmVwbGFjZShyZXBsYWNlLCB2KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmRpcmVjdG9yeSA9IGZ1bmN0aW9uKHYsIGJ1aWxkKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IHRydWUpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCAmJiAhdGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcGFydHMucGF0aCA9PT0gJy8nKSB7XG4gICAgICAgIHJldHVybiAnLyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmQgPSB0aGlzLl9wYXJ0cy5wYXRoLmxlbmd0aCAtIHRoaXMuZmlsZW5hbWUoKS5sZW5ndGggLSAxO1xuICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKDAsIGVuZCkgfHwgKHRoaXMuX3BhcnRzLmhvc3RuYW1lID8gJy8nIDogJycpO1xuXG4gICAgICByZXR1cm4gdiA/IFVSSS5kZWNvZGVQYXRoKHJlcykgOiByZXM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGUgPSB0aGlzLl9wYXJ0cy5wYXRoLmxlbmd0aCAtIHRoaXMuZmlsZW5hbWUoKS5sZW5ndGg7XG4gICAgICB2YXIgZGlyZWN0b3J5ID0gdGhpcy5fcGFydHMucGF0aC5zdWJzdHJpbmcoMCwgZSk7XG4gICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoJ14nICsgZXNjYXBlUmVnRXgoZGlyZWN0b3J5KSk7XG5cbiAgICAgIC8vIGZ1bGx5IHF1YWxpZmllciBkaXJlY3RvcmllcyBiZWdpbiB3aXRoIGEgc2xhc2hcbiAgICAgIGlmICghdGhpcy5pcygncmVsYXRpdmUnKSkge1xuICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICB2ID0gJy8nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHYuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgICAgICB2ID0gJy8nICsgdjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBkaXJlY3RvcmllcyBhbHdheXMgZW5kIHdpdGggYSBzbGFzaFxuICAgICAgaWYgKHYgJiYgdi5jaGFyQXQodi5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgICAgIHYgKz0gJy8nO1xuICAgICAgfVxuXG4gICAgICB2ID0gVVJJLnJlY29kZVBhdGgodik7XG4gICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuICBwLmZpbGVuYW1lID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICghdGhpcy5fcGFydHMucGF0aCB8fCB0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zID0gdGhpcy5fcGFydHMucGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgdmFyIHJlcyA9IHRoaXMuX3BhcnRzLnBhdGguc3Vic3RyaW5nKHBvcysxKTtcblxuICAgICAgcmV0dXJuIHYgPyBVUkkuZGVjb2RlUGF0aFNlZ21lbnQocmVzKSA6IHJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG11dGF0ZWREaXJlY3RvcnkgPSBmYWxzZTtcblxuICAgICAgaWYgKHYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgdiA9IHYuc3Vic3RyaW5nKDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAodi5tYXRjaCgvXFwuP1xcLy8pKSB7XG4gICAgICAgIG11dGF0ZWREaXJlY3RvcnkgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVwbGFjZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXgodGhpcy5maWxlbmFtZSgpKSArICckJyk7XG4gICAgICB2ID0gVVJJLnJlY29kZVBhdGgodik7XG4gICAgICB0aGlzLl9wYXJ0cy5wYXRoID0gdGhpcy5fcGFydHMucGF0aC5yZXBsYWNlKHJlcGxhY2UsIHYpO1xuXG4gICAgICBpZiAobXV0YXRlZERpcmVjdG9yeSkge1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZVBhdGgoYnVpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG4gIHAuc3VmZml4ID0gZnVuY3Rpb24odiwgYnVpbGQpIHtcbiAgICBpZiAodGhpcy5fcGFydHMudXJuKSB7XG4gICAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkID8gJycgOiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKCF0aGlzLl9wYXJ0cy5wYXRoIHx8IHRoaXMuX3BhcnRzLnBhdGggPT09ICcvJykge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaWxlbmFtZSA9IHRoaXMuZmlsZW5hbWUoKTtcbiAgICAgIHZhciBwb3MgPSBmaWxlbmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgdmFyIHMsIHJlcztcblxuICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICAvLyBzdWZmaXggbWF5IG9ubHkgY29udGFpbiBhbG51bSBjaGFyYWN0ZXJzICh5dXAsIEkgbWFkZSB0aGlzIHVwLilcbiAgICAgIHMgPSBmaWxlbmFtZS5zdWJzdHJpbmcocG9zKzEpO1xuICAgICAgcmVzID0gKC9eW2EtejAtOSVdKyQvaSkudGVzdChzKSA/IHMgOiAnJztcbiAgICAgIHJldHVybiB2ID8gVVJJLmRlY29kZVBhdGhTZWdtZW50KHJlcykgOiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2LmNoYXJBdCgwKSA9PT0gJy4nKSB7XG4gICAgICAgIHYgPSB2LnN1YnN0cmluZygxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1ZmZpeCA9IHRoaXMuc3VmZml4KCk7XG4gICAgICB2YXIgcmVwbGFjZTtcblxuICAgICAgaWYgKCFzdWZmaXgpIHtcbiAgICAgICAgaWYgKCF2KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wYXJ0cy5wYXRoICs9ICcuJyArIFVSSS5yZWNvZGVQYXRoKHYpO1xuICAgICAgfSBlbHNlIGlmICghdikge1xuICAgICAgICByZXBsYWNlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeCgnLicgKyBzdWZmaXgpICsgJyQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4KHN1ZmZpeCkgKyAnJCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICB2ID0gVVJJLnJlY29kZVBhdGgodik7XG4gICAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSB0aGlzLl9wYXJ0cy5wYXRoLnJlcGxhY2UocmVwbGFjZSwgdik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgcC5zZWdtZW50ID0gZnVuY3Rpb24oc2VnbWVudCwgdiwgYnVpbGQpIHtcbiAgICB2YXIgc2VwYXJhdG9yID0gdGhpcy5fcGFydHMudXJuID8gJzonIDogJy8nO1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoKCk7XG4gICAgdmFyIGFic29sdXRlID0gcGF0aC5zdWJzdHJpbmcoMCwgMSkgPT09ICcvJztcbiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KHNlcGFyYXRvcik7XG5cbiAgICBpZiAoc2VnbWVudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzZWdtZW50ICE9PSAnbnVtYmVyJykge1xuICAgICAgYnVpbGQgPSB2O1xuICAgICAgdiA9IHNlZ21lbnQ7XG4gICAgICBzZWdtZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChzZWdtZW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNlZ21lbnQgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBzZWdtZW50IFwiJyArIHNlZ21lbnQgKyAnXCIsIG11c3QgYmUgMC1iYXNlZCBpbnRlZ2VyJyk7XG4gICAgfVxuXG4gICAgaWYgKGFic29sdXRlKSB7XG4gICAgICBzZWdtZW50cy5zaGlmdCgpO1xuICAgIH1cblxuICAgIGlmIChzZWdtZW50IDwgMCkge1xuICAgICAgLy8gYWxsb3cgbmVnYXRpdmUgaW5kZXhlcyB0byBhZGRyZXNzIGZyb20gdGhlIGVuZFxuICAgICAgc2VnbWVudCA9IE1hdGgubWF4KHNlZ21lbnRzLmxlbmd0aCArIHNlZ21lbnQsIDApO1xuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qanNoaW50IGxheGJyZWFrOiB0cnVlICovXG4gICAgICByZXR1cm4gc2VnbWVudCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gc2VnbWVudHNcbiAgICAgICAgOiBzZWdtZW50c1tzZWdtZW50XTtcbiAgICAgIC8qanNoaW50IGxheGJyZWFrOiBmYWxzZSAqL1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCA9PT0gbnVsbCB8fCBzZWdtZW50c1tzZWdtZW50XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaXNBcnJheSh2KSkge1xuICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAvLyBjb2xsYXBzZSBlbXB0eSBlbGVtZW50cyB3aXRoaW4gYXJyYXlcbiAgICAgICAgZm9yICh2YXIgaT0wLCBsPXYubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCF2W2ldLmxlbmd0aCAmJiAoIXNlZ21lbnRzLmxlbmd0aCB8fCAhc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXS5sZW5ndGgpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoICYmICFzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLTFdLmxlbmd0aCkge1xuICAgICAgICAgICAgc2VnbWVudHMucG9wKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VnbWVudHMucHVzaCh0cmltU2xhc2hlcyh2W2ldKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodiB8fCB0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdiA9IHRyaW1TbGFzaGVzKHYpO1xuICAgICAgICBpZiAoc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXSA9PT0gJycpIHtcbiAgICAgICAgICAvLyBlbXB0eSB0cmFpbGluZyBlbGVtZW50cyBoYXZlIHRvIGJlIG92ZXJ3cml0dGVuXG4gICAgICAgICAgLy8gdG8gcHJldmVudCByZXN1bHRzIHN1Y2ggYXMgL2Zvby8vYmFyXG4gICAgICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0xXSA9IHY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VnbWVudHMucHVzaCh2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodikge1xuICAgICAgICBzZWdtZW50c1tzZWdtZW50XSA9IHRyaW1TbGFzaGVzKHYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VnbWVudHMuc3BsaWNlKHNlZ21lbnQsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhYnNvbHV0ZSkge1xuICAgICAgc2VnbWVudHMudW5zaGlmdCgnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGF0aChzZWdtZW50cy5qb2luKHNlcGFyYXRvciksIGJ1aWxkKTtcbiAgfTtcbiAgcC5zZWdtZW50Q29kZWQgPSBmdW5jdGlvbihzZWdtZW50LCB2LCBidWlsZCkge1xuICAgIHZhciBzZWdtZW50cywgaSwgbDtcblxuICAgIGlmICh0eXBlb2Ygc2VnbWVudCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGJ1aWxkID0gdjtcbiAgICAgIHYgPSBzZWdtZW50O1xuICAgICAgc2VnbWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWdtZW50cyA9IHRoaXMuc2VnbWVudChzZWdtZW50LCB2LCBidWlsZCk7XG4gICAgICBpZiAoIWlzQXJyYXkoc2VnbWVudHMpKSB7XG4gICAgICAgIHNlZ21lbnRzID0gc2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IFVSSS5kZWNvZGUoc2VnbWVudHMpIDogdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHNlZ21lbnRzW2ldID0gVVJJLmRlY29kZShzZWdtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheSh2KSkge1xuICAgICAgdiA9ICh0eXBlb2YgdiA9PT0gJ3N0cmluZycgfHwgdiBpbnN0YW5jZW9mIFN0cmluZykgPyBVUkkuZW5jb2RlKHYpIDogdjtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMCwgbCA9IHYubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZbaV0gPSBVUkkuZW5jb2RlKHZbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNlZ21lbnQoc2VnbWVudCwgdiwgYnVpbGQpO1xuICB9O1xuXG4gIC8vIG11dGF0aW5nIHF1ZXJ5IHN0cmluZ1xuICB2YXIgcSA9IHAucXVlcnk7XG4gIHAucXVlcnkgPSBmdW5jdGlvbih2LCBidWlsZCkge1xuICAgIGlmICh2ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgICAgdmFyIHJlc3VsdCA9IHYuY2FsbCh0aGlzLCBkYXRhKTtcbiAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkocmVzdWx0IHx8IGRhdGEsIHRoaXMuX3BhcnRzLmR1cGxpY2F0ZVF1ZXJ5UGFyYW1ldGVycywgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2UgaWYgKHYgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkodiwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcS5jYWxsKHRoaXMsIHYsIGJ1aWxkKTtcbiAgICB9XG4gIH07XG4gIHAuc2V0UXVlcnkgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgYnVpbGQpIHtcbiAgICB2YXIgZGF0YSA9IFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgbmFtZSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgZGF0YVtuYW1lXSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgICAgIGlmIChoYXNPd24uY2FsbChuYW1lLCBrZXkpKSB7XG4gICAgICAgICAgZGF0YVtrZXldID0gbmFtZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VSSS5hZGRRdWVyeSgpIGFjY2VwdHMgYW4gb2JqZWN0LCBzdHJpbmcgYXMgdGhlIG5hbWUgcGFyYW1ldGVyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1aWxkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLmFkZFF1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGJ1aWxkKSB7XG4gICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgVVJJLmFkZFF1ZXJ5KGRhdGEsIG5hbWUsIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWUpO1xuICAgIHRoaXMuX3BhcnRzLnF1ZXJ5ID0gVVJJLmJ1aWxkUXVlcnkoZGF0YSwgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzLCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKTtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBidWlsZCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5yZW1vdmVRdWVyeSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBidWlsZCkge1xuICAgIHZhciBkYXRhID0gVVJJLnBhcnNlUXVlcnkodGhpcy5fcGFydHMucXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIFVSSS5yZW1vdmVRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSk7XG4gICAgdGhpcy5fcGFydHMucXVlcnkgPSBVUkkuYnVpbGRRdWVyeShkYXRhLCB0aGlzLl9wYXJ0cy5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMsIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1aWxkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLmhhc1F1ZXJ5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHdpdGhpbkFycmF5KSB7XG4gICAgdmFyIGRhdGEgPSBVUkkucGFyc2VRdWVyeSh0aGlzLl9wYXJ0cy5xdWVyeSwgdGhpcy5fcGFydHMuZXNjYXBlUXVlcnlTcGFjZSk7XG4gICAgcmV0dXJuIFVSSS5oYXNRdWVyeShkYXRhLCBuYW1lLCB2YWx1ZSwgd2l0aGluQXJyYXkpO1xuICB9O1xuICBwLnNldFNlYXJjaCA9IHAuc2V0UXVlcnk7XG4gIHAuYWRkU2VhcmNoID0gcC5hZGRRdWVyeTtcbiAgcC5yZW1vdmVTZWFyY2ggPSBwLnJlbW92ZVF1ZXJ5O1xuICBwLmhhc1NlYXJjaCA9IHAuaGFzUXVlcnk7XG5cbiAgLy8gc2FuaXRpemluZyBVUkxzXG4gIHAubm9ybWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3BhcnRzLnVybikge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgLm5vcm1hbGl6ZVByb3RvY29sKGZhbHNlKVxuICAgICAgICAubm9ybWFsaXplUGF0aChmYWxzZSlcbiAgICAgICAgLm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKVxuICAgICAgICAubm9ybWFsaXplRnJhZ21lbnQoZmFsc2UpXG4gICAgICAgIC5idWlsZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gICAgICAubm9ybWFsaXplUHJvdG9jb2woZmFsc2UpXG4gICAgICAubm9ybWFsaXplSG9zdG5hbWUoZmFsc2UpXG4gICAgICAubm9ybWFsaXplUG9ydChmYWxzZSlcbiAgICAgIC5ub3JtYWxpemVQYXRoKGZhbHNlKVxuICAgICAgLm5vcm1hbGl6ZVF1ZXJ5KGZhbHNlKVxuICAgICAgLm5vcm1hbGl6ZUZyYWdtZW50KGZhbHNlKVxuICAgICAgLmJ1aWxkKCk7XG4gIH07XG4gIHAubm9ybWFsaXplUHJvdG9jb2wgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9wYXJ0cy5wcm90b2NvbCA9IHRoaXMuX3BhcnRzLnByb3RvY29sLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAubm9ybWFsaXplSG9zdG5hbWUgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICh0aGlzLl9wYXJ0cy5ob3N0bmFtZSkge1xuICAgICAgaWYgKHRoaXMuaXMoJ0lETicpICYmIHB1bnljb2RlKSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLl9wYXJ0cy5ob3N0bmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXMoJ0lQdjYnKSAmJiBJUHY2KSB7XG4gICAgICAgIHRoaXMuX3BhcnRzLmhvc3RuYW1lID0gSVB2Ni5iZXN0KHRoaXMuX3BhcnRzLmhvc3RuYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFydHMuaG9zdG5hbWUgPSB0aGlzLl9wYXJ0cy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLm5vcm1hbGl6ZVBvcnQgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIC8vIHJlbW92ZSBwb3J0IG9mIGl0J3MgdGhlIHByb3RvY29sJ3MgZGVmYXVsdFxuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucHJvdG9jb2wgPT09ICdzdHJpbmcnICYmIHRoaXMuX3BhcnRzLnBvcnQgPT09IFVSSS5kZWZhdWx0UG9ydHNbdGhpcy5fcGFydHMucHJvdG9jb2xdKSB7XG4gICAgICB0aGlzLl9wYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5ub3JtYWxpemVQYXRoID0gZnVuY3Rpb24oYnVpbGQpIHtcbiAgICB2YXIgX3BhdGggPSB0aGlzLl9wYXJ0cy5wYXRoO1xuICAgIGlmICghX3BhdGgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHRoaXMuX3BhcnRzLnBhdGggPSBVUkkucmVjb2RlVXJuUGF0aCh0aGlzLl9wYXJ0cy5wYXRoKTtcbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wYXJ0cy5wYXRoID09PSAnLycpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9wYXRoID0gVVJJLnJlY29kZVBhdGgoX3BhdGgpO1xuXG4gICAgdmFyIF93YXNfcmVsYXRpdmU7XG4gICAgdmFyIF9sZWFkaW5nUGFyZW50cyA9ICcnO1xuICAgIHZhciBfcGFyZW50LCBfcG9zO1xuXG4gICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzXG4gICAgaWYgKF9wYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBfd2FzX3JlbGF0aXZlID0gdHJ1ZTtcbiAgICAgIF9wYXRoID0gJy8nICsgX3BhdGg7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIHJlbGF0aXZlIGZpbGVzIChhcyBvcHBvc2VkIHRvIGRpcmVjdG9yaWVzKVxuICAgIGlmIChfcGF0aC5zbGljZSgtMykgPT09ICcvLi4nIHx8IF9wYXRoLnNsaWNlKC0yKSA9PT0gJy8uJykge1xuICAgICAgX3BhdGggKz0gJy8nO1xuICAgIH1cblxuICAgIC8vIHJlc29sdmUgc2ltcGxlc1xuICAgIF9wYXRoID0gX3BhdGhcbiAgICAgIC5yZXBsYWNlKC8oXFwvKFxcLlxcLykrKXwoXFwvXFwuJCkvZywgJy8nKVxuICAgICAgLnJlcGxhY2UoL1xcL3syLH0vZywgJy8nKTtcblxuICAgIC8vIHJlbWVtYmVyIGxlYWRpbmcgcGFyZW50c1xuICAgIGlmIChfd2FzX3JlbGF0aXZlKSB7XG4gICAgICBfbGVhZGluZ1BhcmVudHMgPSBfcGF0aC5zdWJzdHJpbmcoMSkubWF0Y2goL14oXFwuXFwuXFwvKSsvKSB8fCAnJztcbiAgICAgIGlmIChfbGVhZGluZ1BhcmVudHMpIHtcbiAgICAgICAgX2xlYWRpbmdQYXJlbnRzID0gX2xlYWRpbmdQYXJlbnRzWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlc29sdmUgcGFyZW50c1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBfcGFyZW50ID0gX3BhdGguc2VhcmNoKC9cXC9cXC5cXC4oXFwvfCQpLyk7XG4gICAgICBpZiAoX3BhcmVudCA9PT0gLTEpIHtcbiAgICAgICAgLy8gbm8gbW9yZSAuLi8gdG8gcmVzb2x2ZVxuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoX3BhcmVudCA9PT0gMCkge1xuICAgICAgICAvLyB0b3AgbGV2ZWwgY2Fubm90IGJlIHJlbGF0aXZlLCBza2lwIGl0XG4gICAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKDMpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgX3BvcyA9IF9wYXRoLnN1YnN0cmluZygwLCBfcGFyZW50KS5sYXN0SW5kZXhPZignLycpO1xuICAgICAgaWYgKF9wb3MgPT09IC0xKSB7XG4gICAgICAgIF9wb3MgPSBfcGFyZW50O1xuICAgICAgfVxuICAgICAgX3BhdGggPSBfcGF0aC5zdWJzdHJpbmcoMCwgX3BvcykgKyBfcGF0aC5zdWJzdHJpbmcoX3BhcmVudCArIDMpO1xuICAgIH1cblxuICAgIC8vIHJldmVydCB0byByZWxhdGl2ZVxuICAgIGlmIChfd2FzX3JlbGF0aXZlICYmIHRoaXMuaXMoJ3JlbGF0aXZlJykpIHtcbiAgICAgIF9wYXRoID0gX2xlYWRpbmdQYXJlbnRzICsgX3BhdGguc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIHRoaXMuX3BhcnRzLnBhdGggPSBfcGF0aDtcbiAgICB0aGlzLmJ1aWxkKCFidWlsZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHAubm9ybWFsaXplUGF0aG5hbWUgPSBwLm5vcm1hbGl6ZVBhdGg7XG4gIHAubm9ybWFsaXplUXVlcnkgPSBmdW5jdGlvbihidWlsZCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFydHMucXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoIXRoaXMuX3BhcnRzLnF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9wYXJ0cy5xdWVyeSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnF1ZXJ5KFVSSS5wYXJzZVF1ZXJ5KHRoaXMuX3BhcnRzLnF1ZXJ5LCB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVpbGQoIWJ1aWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcC5ub3JtYWxpemVGcmFnbWVudCA9IGZ1bmN0aW9uKGJ1aWxkKSB7XG4gICAgaWYgKCF0aGlzLl9wYXJ0cy5mcmFnbWVudCkge1xuICAgICAgdGhpcy5fcGFydHMuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgdGhpcy5idWlsZCghYnVpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBwLm5vcm1hbGl6ZVNlYXJjaCA9IHAubm9ybWFsaXplUXVlcnk7XG4gIHAubm9ybWFsaXplSGFzaCA9IHAubm9ybWFsaXplRnJhZ21lbnQ7XG5cbiAgcC5pc284ODU5ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZXhwZWN0IHVuaWNvZGUgaW5wdXQsIGlzbzg4NTkgb3V0cHV0XG4gICAgdmFyIGUgPSBVUkkuZW5jb2RlO1xuICAgIHZhciBkID0gVVJJLmRlY29kZTtcblxuICAgIFVSSS5lbmNvZGUgPSBlc2NhcGU7XG4gICAgVVJJLmRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5ub3JtYWxpemUoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgVVJJLmVuY29kZSA9IGU7XG4gICAgICBVUkkuZGVjb2RlID0gZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcC51bmljb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZXhwZWN0IGlzbzg4NTkgaW5wdXQsIHVuaWNvZGUgb3V0cHV0XG4gICAgdmFyIGUgPSBVUkkuZW5jb2RlO1xuICAgIHZhciBkID0gVVJJLmRlY29kZTtcblxuICAgIFVSSS5lbmNvZGUgPSBzdHJpY3RFbmNvZGVVUklDb21wb25lbnQ7XG4gICAgVVJJLmRlY29kZSA9IHVuZXNjYXBlO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBVUkkuZW5jb2RlID0gZTtcbiAgICAgIFVSSS5kZWNvZGUgPSBkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBwLnJlYWRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVyaSA9IHRoaXMuY2xvbmUoKTtcbiAgICAvLyByZW1vdmluZyB1c2VybmFtZSwgcGFzc3dvcmQsIGJlY2F1c2UgdGhleSBzaG91bGRuJ3QgYmUgZGlzcGxheWVkIGFjY29yZGluZyB0byBSRkMgMzk4NlxuICAgIHVyaS51c2VybmFtZSgnJykucGFzc3dvcmQoJycpLm5vcm1hbGl6ZSgpO1xuICAgIHZhciB0ID0gJyc7XG4gICAgaWYgKHVyaS5fcGFydHMucHJvdG9jb2wpIHtcbiAgICAgIHQgKz0gdXJpLl9wYXJ0cy5wcm90b2NvbCArICc6Ly8nO1xuICAgIH1cblxuICAgIGlmICh1cmkuX3BhcnRzLmhvc3RuYW1lKSB7XG4gICAgICBpZiAodXJpLmlzKCdwdW55Y29kZScpICYmIHB1bnljb2RlKSB7XG4gICAgICAgIHQgKz0gcHVueWNvZGUudG9Vbmljb2RlKHVyaS5fcGFydHMuaG9zdG5hbWUpO1xuICAgICAgICBpZiAodXJpLl9wYXJ0cy5wb3J0KSB7XG4gICAgICAgICAgdCArPSAnOicgKyB1cmkuX3BhcnRzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQgKz0gdXJpLmhvc3QoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXJpLl9wYXJ0cy5ob3N0bmFtZSAmJiB1cmkuX3BhcnRzLnBhdGggJiYgdXJpLl9wYXJ0cy5wYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB0ICs9ICcvJztcbiAgICB9XG5cbiAgICB0ICs9IHVyaS5wYXRoKHRydWUpO1xuICAgIGlmICh1cmkuX3BhcnRzLnF1ZXJ5KSB7XG4gICAgICB2YXIgcSA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHFwID0gdXJpLl9wYXJ0cy5xdWVyeS5zcGxpdCgnJicpLCBsID0gcXAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBrdiA9IChxcFtpXSB8fCAnJykuc3BsaXQoJz0nKTtcbiAgICAgICAgcSArPSAnJicgKyBVUkkuZGVjb2RlUXVlcnkoa3ZbMF0sIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpXG4gICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyUyNicpO1xuXG4gICAgICAgIGlmIChrdlsxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcSArPSAnPScgKyBVUkkuZGVjb2RlUXVlcnkoa3ZbMV0sIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpXG4gICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAnJTI2Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHQgKz0gJz8nICsgcS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgdCArPSBVUkkuZGVjb2RlUXVlcnkodXJpLmhhc2goKSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gcmVzb2x2aW5nIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBVUkxzXG4gIHAuYWJzb2x1dGVUbyA9IGZ1bmN0aW9uKGJhc2UpIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbJ3Byb3RvY29sJywgJ3VzZXJuYW1lJywgJ3Bhc3N3b3JkJywgJ2hvc3RuYW1lJywgJ3BvcnQnXTtcbiAgICB2YXIgYmFzZWRpciwgaSwgcDtcblxuICAgIGlmICh0aGlzLl9wYXJ0cy51cm4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVVJOcyBkbyBub3QgaGF2ZSBhbnkgZ2VuZXJhbGx5IGRlZmluZWQgaGllcmFyY2hpY2FsIGNvbXBvbmVudHMnKTtcbiAgICB9XG5cbiAgICBpZiAoIShiYXNlIGluc3RhbmNlb2YgVVJJKSkge1xuICAgICAgYmFzZSA9IG5ldyBVUkkoYmFzZSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc29sdmVkLl9wYXJ0cy5wcm90b2NvbCkge1xuICAgICAgLy8gRGlyZWN0bHkgcmV0dXJucyBldmVuIGlmIHRoaXMuX3BhcnRzLmhvc3RuYW1lIGlzIGVtcHR5LlxuICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlZC5fcGFydHMucHJvdG9jb2wgPSBiYXNlLl9wYXJ0cy5wcm90b2NvbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGFydHMuaG9zdG5hbWUpIHtcbiAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyAocCA9IHByb3BlcnRpZXNbaV0pOyBpKyspIHtcbiAgICAgIHJlc29sdmVkLl9wYXJ0c1twXSA9IGJhc2UuX3BhcnRzW3BdO1xuICAgIH1cblxuICAgIGlmICghcmVzb2x2ZWQuX3BhcnRzLnBhdGgpIHtcbiAgICAgIHJlc29sdmVkLl9wYXJ0cy5wYXRoID0gYmFzZS5fcGFydHMucGF0aDtcbiAgICAgIGlmICghcmVzb2x2ZWQuX3BhcnRzLnF1ZXJ5KSB7XG4gICAgICAgIHJlc29sdmVkLl9wYXJ0cy5xdWVyeSA9IGJhc2UuX3BhcnRzLnF1ZXJ5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVzb2x2ZWQuX3BhcnRzLnBhdGguc3Vic3RyaW5nKC0yKSA9PT0gJy4uJykge1xuICAgICAgICByZXNvbHZlZC5fcGFydHMucGF0aCArPSAnLyc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNvbHZlZC5wYXRoKCkuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgICAgYmFzZWRpciA9IGJhc2UuZGlyZWN0b3J5KCk7XG4gICAgICAgIGJhc2VkaXIgPSBiYXNlZGlyID8gYmFzZWRpciA6IGJhc2UucGF0aCgpLmluZGV4T2YoJy8nKSA9PT0gMCA/ICcvJyA6ICcnO1xuICAgICAgICByZXNvbHZlZC5fcGFydHMucGF0aCA9IChiYXNlZGlyID8gKGJhc2VkaXIgKyAnLycpIDogJycpICsgcmVzb2x2ZWQuX3BhcnRzLnBhdGg7XG4gICAgICAgIHJlc29sdmVkLm5vcm1hbGl6ZVBhdGgoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXNvbHZlZC5idWlsZCgpO1xuICAgIHJldHVybiByZXNvbHZlZDtcbiAgfTtcbiAgcC5yZWxhdGl2ZVRvID0gZnVuY3Rpb24oYmFzZSkge1xuICAgIHZhciByZWxhdGl2ZSA9IHRoaXMuY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICB2YXIgcmVsYXRpdmVQYXJ0cywgYmFzZVBhcnRzLCBjb21tb24sIHJlbGF0aXZlUGF0aCwgYmFzZVBhdGg7XG5cbiAgICBpZiAocmVsYXRpdmUuX3BhcnRzLnVybikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUk5zIGRvIG5vdCBoYXZlIGFueSBnZW5lcmFsbHkgZGVmaW5lZCBoaWVyYXJjaGljYWwgY29tcG9uZW50cycpO1xuICAgIH1cblxuICAgIGJhc2UgPSBuZXcgVVJJKGJhc2UpLm5vcm1hbGl6ZSgpO1xuICAgIHJlbGF0aXZlUGFydHMgPSByZWxhdGl2ZS5fcGFydHM7XG4gICAgYmFzZVBhcnRzID0gYmFzZS5fcGFydHM7XG4gICAgcmVsYXRpdmVQYXRoID0gcmVsYXRpdmUucGF0aCgpO1xuICAgIGJhc2VQYXRoID0gYmFzZS5wYXRoKCk7XG5cbiAgICBpZiAocmVsYXRpdmVQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VSSSBpcyBhbHJlYWR5IHJlbGF0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKGJhc2VQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjYWxjdWxhdGUgYSBVUkkgcmVsYXRpdmUgdG8gYW5vdGhlciByZWxhdGl2ZSBVUkknKTtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpdmVQYXJ0cy5wcm90b2NvbCA9PT0gYmFzZVBhcnRzLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZVBhcnRzLnByb3RvY29sID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gYmFzZVBhcnRzLnVzZXJuYW1lIHx8IHJlbGF0aXZlUGFydHMucGFzc3dvcmQgIT09IGJhc2VQYXJ0cy5wYXNzd29yZCkge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGFydHMucHJvdG9jb2wgIT09IG51bGwgfHwgcmVsYXRpdmVQYXJ0cy51c2VybmFtZSAhPT0gbnVsbCB8fCByZWxhdGl2ZVBhcnRzLnBhc3N3b3JkICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpdmVQYXJ0cy5ob3N0bmFtZSA9PT0gYmFzZVBhcnRzLmhvc3RuYW1lICYmIHJlbGF0aXZlUGFydHMucG9ydCA9PT0gYmFzZVBhcnRzLnBvcnQpIHtcbiAgICAgIHJlbGF0aXZlUGFydHMuaG9zdG5hbWUgPSBudWxsO1xuICAgICAgcmVsYXRpdmVQYXJ0cy5wb3J0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgaWYgKHJlbGF0aXZlUGF0aCA9PT0gYmFzZVBhdGgpIHtcbiAgICAgIHJlbGF0aXZlUGFydHMucGF0aCA9ICcnO1xuICAgICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgLy8gZGV0ZXJtaW5lIGNvbW1vbiBzdWIgcGF0aFxuICAgIGNvbW1vbiA9IFVSSS5jb21tb25QYXRoKHJlbGF0aXZlUGF0aCwgYmFzZVBhdGgpO1xuXG4gICAgLy8gSWYgdGhlIHBhdGhzIGhhdmUgbm90aGluZyBpbiBjb21tb24sIHJldHVybiBhIHJlbGF0aXZlIFVSTCB3aXRoIHRoZSBhYnNvbHV0ZSBwYXRoLlxuICAgIGlmICghY29tbW9uKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmUuYnVpbGQoKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50cyA9IGJhc2VQYXJ0cy5wYXRoXG4gICAgICAuc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpXG4gICAgICAucmVwbGFjZSgvW15cXC9dKiQvLCAnJylcbiAgICAgIC5yZXBsYWNlKC8uKj9cXC8vZywgJy4uLycpO1xuXG4gICAgcmVsYXRpdmVQYXJ0cy5wYXRoID0gKHBhcmVudHMgKyByZWxhdGl2ZVBhcnRzLnBhdGguc3Vic3RyaW5nKGNvbW1vbi5sZW5ndGgpKSB8fCAnLi8nO1xuXG4gICAgcmV0dXJuIHJlbGF0aXZlLmJ1aWxkKCk7XG4gIH07XG5cbiAgLy8gY29tcGFyaW5nIFVSSXNcbiAgcC5lcXVhbHMgPSBmdW5jdGlvbih1cmkpIHtcbiAgICB2YXIgb25lID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciB0d28gPSBuZXcgVVJJKHVyaSk7XG4gICAgdmFyIG9uZV9tYXAgPSB7fTtcbiAgICB2YXIgdHdvX21hcCA9IHt9O1xuICAgIHZhciBjaGVja2VkID0ge307XG4gICAgdmFyIG9uZV9xdWVyeSwgdHdvX3F1ZXJ5LCBrZXk7XG5cbiAgICBvbmUubm9ybWFsaXplKCk7XG4gICAgdHdvLm5vcm1hbGl6ZSgpO1xuXG4gICAgLy8gZXhhY3QgbWF0Y2hcbiAgICBpZiAob25lLnRvU3RyaW5nKCkgPT09IHR3by50b1N0cmluZygpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBleHRyYWN0IHF1ZXJ5IHN0cmluZ1xuICAgIG9uZV9xdWVyeSA9IG9uZS5xdWVyeSgpO1xuICAgIHR3b19xdWVyeSA9IHR3by5xdWVyeSgpO1xuICAgIG9uZS5xdWVyeSgnJyk7XG4gICAgdHdvLnF1ZXJ5KCcnKTtcblxuICAgIC8vIGRlZmluaXRlbHkgbm90IGVxdWFsIGlmIG5vdCBldmVuIG5vbi1xdWVyeSBwYXJ0cyBtYXRjaFxuICAgIGlmIChvbmUudG9TdHJpbmcoKSAhPT0gdHdvLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBxdWVyeSBwYXJhbWV0ZXJzIGhhdmUgdGhlIHNhbWUgbGVuZ3RoLCBldmVuIGlmIHRoZXkncmUgcGVybXV0ZWRcbiAgICBpZiAob25lX3F1ZXJ5Lmxlbmd0aCAhPT0gdHdvX3F1ZXJ5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG9uZV9tYXAgPSBVUkkucGFyc2VRdWVyeShvbmVfcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuICAgIHR3b19tYXAgPSBVUkkucGFyc2VRdWVyeSh0d29fcXVlcnksIHRoaXMuX3BhcnRzLmVzY2FwZVF1ZXJ5U3BhY2UpO1xuXG4gICAgZm9yIChrZXkgaW4gb25lX21hcCkge1xuICAgICAgaWYgKGhhc093bi5jYWxsKG9uZV9tYXAsIGtleSkpIHtcbiAgICAgICAgaWYgKCFpc0FycmF5KG9uZV9tYXBba2V5XSkpIHtcbiAgICAgICAgICBpZiAob25lX21hcFtrZXldICE9PSB0d29fbWFwW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWFycmF5c0VxdWFsKG9uZV9tYXBba2V5XSwgdHdvX21hcFtrZXldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoZWNrZWRba2V5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChrZXkgaW4gdHdvX21hcCkge1xuICAgICAgaWYgKGhhc093bi5jYWxsKHR3b19tYXAsIGtleSkpIHtcbiAgICAgICAgaWYgKCFjaGVja2VkW2tleV0pIHtcbiAgICAgICAgICAvLyB0d28gY29udGFpbnMgYSBwYXJhbWV0ZXIgbm90IHByZXNlbnQgaW4gb25lXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gc3RhdGVcbiAgcC5wcmV2ZW50SW52YWxpZEhvc3RuYW1lID0gZnVuY3Rpb24odikge1xuICAgIHRoaXMuX3BhcnRzLnByZXZlbnRJbnZhbGlkSG9zdG5hbWUgPSAhIXY7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcC5kdXBsaWNhdGVRdWVyeVBhcmFtZXRlcnMgPSBmdW5jdGlvbih2KSB7XG4gICAgdGhpcy5fcGFydHMuZHVwbGljYXRlUXVlcnlQYXJhbWV0ZXJzID0gISF2O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHAuZXNjYXBlUXVlcnlTcGFjZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICB0aGlzLl9wYXJ0cy5lc2NhcGVRdWVyeVNwYWNlID0gISF2O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBVUkk7XG59KSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiFcdFxuKiBGaXRUZXh0LmpzIDEuMCBqUXVlcnkgZnJlZSB2ZXJzaW9uXG4qXG4qIENvcHlyaWdodCAyMDExLCBEYXZlIFJ1cGVydCBodHRwOi8vZGF2ZXJ1cGVydC5jb20gXG4qIFJlbGVhc2VkIHVuZGVyIHRoZSBXVEZQTCBsaWNlbnNlIFxuKiBodHRwOi8vc2FtLnpveS5vcmcvd3RmcGwvXG4qIE1vZGlmaWVkIGJ5IFNsYXdvbWlyIEtvbG9kemllaiBodHRwOi8vc2xhd2Vray5pbmZvXG4qXG4qIERhdGU6IFR1ZSBBdWcgMDkgMjAxMSAxMDo0NTo1NCBHTVQrMDIwMCAoQ0VTVClcbiovXG4oZnVuY3Rpb24oKXtcblxuICB2YXIgYWRkRXZlbnQgPSBmdW5jdGlvbiAoZWwsIHR5cGUsIGZuKSB7XG4gICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBmYWxzZSk7XG5cdFx0ZWxzZVxuXHRcdFx0ZWwuYXR0YWNoRXZlbnQoJ29uJyt0eXBlLCBmbik7XG4gIH07XG4gIFxuICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24ob2JqLGV4dCl7XG4gICAgZm9yKHZhciBrZXkgaW4gZXh0KVxuICAgICAgaWYoZXh0Lmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgIG9ialtrZXldID0gZXh0W2tleV07XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICB3aW5kb3cuZml0VGV4dCA9IGZ1bmN0aW9uIChlbCwga29tcHJlc3Nvciwgb3B0aW9ucykge1xuXG4gICAgdmFyIHNldHRpbmdzID0gZXh0ZW5kKHtcbiAgICAgICdtaW5Gb250U2l6ZScgOiAtMS8wLFxuICAgICAgJ21heEZvbnRTaXplJyA6IDEvMFxuICAgIH0sb3B0aW9ucyk7XG5cbiAgICB2YXIgZml0ID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICB2YXIgY29tcHJlc3NvciA9IGtvbXByZXNzb3IgfHwgMTtcblxuICAgICAgdmFyIHJlc2l6ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmZvbnRTaXplID0gTWF0aC5tYXgoTWF0aC5taW4oZWwuY2xpZW50V2lkdGggLyAoY29tcHJlc3NvcioxMCksIHBhcnNlRmxvYXQoc2V0dGluZ3MubWF4Rm9udFNpemUpKSwgcGFyc2VGbG9hdChzZXR0aW5ncy5taW5Gb250U2l6ZSkpICsgJ3B4JztcbiAgICAgIH07XG5cbiAgICAgIC8vIENhbGwgb25jZSB0byBzZXQuXG4gICAgICByZXNpemVyKCk7XG5cbiAgICAgIC8vIEJpbmQgZXZlbnRzXG4gICAgICAvLyBJZiB5b3UgaGF2ZSBhbnkganMgbGlicmFyeSB3aGljaCBzdXBwb3J0IEV2ZW50cywgcmVwbGFjZSB0aGlzIHBhcnRcbiAgICAgIC8vIGFuZCByZW1vdmUgYWRkRXZlbnQgZnVuY3Rpb24gKG9yIHVzZSBvcmlnaW5hbCBqUXVlcnkgdmVyc2lvbilcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHJlc2l6ZXIpO1xuICAgICAgYWRkRXZlbnQod2luZG93LCAnb3JpZW50YXRpb25jaGFuZ2UnLCByZXNpemVyKTtcbiAgICB9O1xuXG4gICAgaWYgKGVsLmxlbmd0aClcbiAgICAgIGZvcih2YXIgaT0wOyBpPGVsLmxlbmd0aDsgaSsrKVxuICAgICAgICBmaXQoZWxbaV0pO1xuICAgIGVsc2VcbiAgICAgIGZpdChlbCk7XG5cbiAgICAvLyByZXR1cm4gc2V0IG9mIGVsZW1lbnRzXG4gICAgcmV0dXJuIGVsO1xuICB9O1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=